(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[    951818,      18530]
NotebookOptionsPosition[    941943,      18364]
NotebookOutlinePosition[    942340,      18380]
CellTagsIndexPosition[    942297,      18377]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "**********************************)"}], 
  RowBox[{"(*", 
   RowBox[{"Hyper", "-", 
    RowBox[{"parameters", " ", 
     RowBox[{"(", 
      RowBox[{"to", " ", "be", " ", 
       RowBox[{"tuned", "!"}]}], ")"}]}]}], "*)"}], 
  RowBox[{"(*", "**********************************)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"$jensen", "=", "True"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"Jensen", " ", "or", " ", "Wasserstein"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$numposfeatures", "=", "0"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$numlatent", "=", "16"}], ";", 
    RowBox[{"(*", 
     RowBox[{
     "Dimension", " ", "of", " ", "the", " ", "latent", " ", "space"}], 
     "*)"}], 
    RowBox[{"$numhiddens", "=", "128"}], ";", 
    RowBox[{"(*", 
     RowBox[{"CNN", " ", "Hidden", " ", "Layers"}], "*)"}], 
    RowBox[{"$depth", "=", "2"}], ";", 
    RowBox[{"(*", 
     RowBox[{"Number", " ", "of", " ", "CNN"}], "*)"}], 
    RowBox[{"$kernelSize", "=", "5"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
     "Look", " ", "at", " ", "five", " ", "grams", " ", "of", " ", 
      "characters"}], "*)"}], "\n", 
    RowBox[{"$batchsize", "=", "32"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$discriminatorTerminalTokensQ", "=", "True"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$generatorTerminalTokensQ", "=", "True"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$updateDiscriminator", "=", "1"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{"(*", 
    RowBox[{"Other", " ", "variables"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ngramInfo", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.803300956667386*^9, 3.803300961597875*^9}},
 CellLabel->
  "In[2381]:=",ExpressionUUID->"fe8ba46c-0895-43eb-a31a-1cd28862be43"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{
   "Use", " ", "a", " ", "folder", " ", "name", " ", "to", " ", "dump", " ", 
    "intermediate", " ", "results", " ", "into", " ", "it"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{
    "$SAVEDIR", "=", "\"\</Users/sumansigdel/documents/ChemicalNames\>\""}], 
    ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$device", "=", "\"\<CPU\>\""}], ";"}], "\n", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"normalizeText", "[", "s_", "]"}], " ", ":=", " ", 
     RowBox[{"ToLowerCase", " ", "@", " ", 
      RowBox[{"RemoveDiacritics", " ", "@", " ", 
       RowBox[{"StringReplace", "[", 
        RowBox[{"s", ",", "\n", "\t", 
         RowBox[{"{", 
          RowBox[{
           RowBox[{
            RowBox[{"WordBoundary", "~~", 
             RowBox[{"(", 
              RowBox[{"WordCharacter", ".."}], ")"}], "~~", "\"\<.\>\""}], 
            "\[RuleDelayed]", "\"\<\>\""}], ",", 
           RowBox[{"(*", 
            RowBox[{
             RowBox[{"Remove", " ", "\"\<mr.\>\""}], ",", "\"\<jr.\>\"", ",", 
             "..."}], "*)"}], "\n", "\t", 
           RowBox[{
            RowBox[{"\"\<\[Mars]\>\"", "|", "\"\<\[Venus]\>\""}], "\[Rule]", 
            "\"\<\>\""}], ",", 
           RowBox[{"(*", 
            RowBox[{"Remove", " ", "gender", " ", "hints"}], "*)"}], "\n", 
           "\t", 
           RowBox[{
            RowBox[{"\"\<\[Hyphen]\>\"", "|", "\"\<-\>\"", "|", "\"\<'\>\""}],
             "\[Rule]", "\"\< \>\""}], ",", 
           RowBox[{"(*", 
            RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
            "*)"}], "\n", "\t", 
           RowBox[{"DigitCharacter", "\[Rule]", "\"\<\>\""}], " ", ",", 
           RowBox[{"(*", 
            RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
            "*)"}], "\n", "\t", 
           RowBox[{
            RowBox[{"\"\<(\>\"", "|", "\"\<)\>\""}], " ", "\[Rule]", " ", 
            "\"\<\>\""}], ",", 
           RowBox[{"(*", 
            RowBox[{"Remove", " ", "Brackets"}], "*)"}], "\n", "\t", 
           RowBox[{
            RowBox[{"\"\<%\>\"", "|", "\"\<:\>\""}], " ", "\[Rule]", " ", 
            "\"\<\>\""}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"\"\<[\>\"", "|", "\"\<]\>\""}], "\[Rule]", 
            "\"\<\>\""}]}], "}"}]}], 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "Colons", " ", "and", " ", "%"}], "*)"}], 
        "]"}]}]}]}], ";"}], "\[IndentingNewLine]", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"c", " ", "=", " ", 
     RowBox[{"EntityValue", "[", 
      RowBox[{
       RowBox[{"EntityList", "[", "\"\<Chemical\>\"", "]"}], ",", 
       "\"\<Name\>\""}], "]"}]}], ";"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"chemicalNames", " ", "=", " ", 
     RowBox[{"Select", "[", 
      RowBox[{"c", ",", 
       RowBox[{
        RowBox[{"StringMatchQ", "[", 
         RowBox[{"#", ",", 
          RowBox[{
           RowBox[{"CharacterRange", "[", 
            RowBox[{"\"\<A\>\"", ",", "\"\<z\>\""}], "]"}], ".."}]}], "]"}], 
        "&"}]}], "]"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.803300975788146*^9, 3.803301020097926*^9}, {
  3.80330137964682*^9, 3.803301380115943*^9}, {3.803301551299115*^9, 
  3.803301555927306*^9}, {3.803304328875704*^9, 3.803304353492199*^9}, {
  3.803304415731965*^9, 3.803304443661831*^9}},
 CellLabel->
  "In[2388]:=",ExpressionUUID->"0fb83867-76af-4e40-9129-2d60b439cfd4"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"normalizedChemicalNames", " ", "=", " ", 
    RowBox[{"normalizeText", "@", "chemicalNames"}]}], ";"}], 
  "\[IndentingNewLine]", "\[IndentingNewLine]"}]], "Input",
 CellChangeTimes->{{3.803301428681329*^9, 3.803301441805637*^9}, {
  3.8033015603911953`*^9, 3.803301563123342*^9}, {3.803304376295686*^9, 
  3.8033044008927298`*^9}, {3.803304461354841*^9, 3.803304462563418*^9}},
 CellLabel->
  "In[2211]:=",ExpressionUUID->"5954d679-1f77-44d6-a97e-7bb9e55ea28b"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"counts", "=", 
    RowBox[{"Counts", "[", 
     RowBox[{"StringLength", "/@", "normalizedChemicalNames"}], "]"}]}], 
   ";"}], 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "will", " ", "use", " ", "this", " ", "to", " ", "generate", 
    " ", "a", " ", "realistic", " ", "length"}], 
   "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"characters", "=", 
   RowBox[{"Union", "[", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Characters", "@", "normalizedChemicalNames"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"characters2", "=", 
    RowBox[{"If", "[", 
     RowBox[{"$discriminatorTerminalTokensQ", ",", 
      RowBox[{"Join", "[", 
       RowBox[{"characters", ",", 
        RowBox[{"{", 
         RowBox[{"StartOfString", ",", "EndOfString"}], "}"}]}], "]"}], ",", 
      "characters"}], "]"}]}], ";"}], "\[IndentingNewLine]"}], "\n", 
 RowBox[{
  RowBox[{"netpreproc", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Characters\>\"", ",", "characters2", ",", 
      RowBox[{"\"\<IgnoreCase\>\"", "\[Rule]", "True"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.803301450213812*^9, 3.803301469734062*^9}, {
   3.803301611692281*^9, 3.80330161663846*^9}, 3.803301794393622*^9, {
   3.803302812603284*^9, 3.803302814324471*^9}, {3.8033037623945417`*^9, 
   3.8033037662222767`*^9}},
 CellLabel->
  "In[2393]:=",ExpressionUUID->"21fbf449-f1aa-4e4a-9074-c9cde8962832"],

Cell[CellGroupData[{

Cell[BoxData["netpreproc"], "Input",
 CellChangeTimes->{{3.8033037940462513`*^9, 3.8033037949179153`*^9}, {
  3.803304363251618*^9, 3.803304364157523*^9}},
 CellLabel->
  "In[2216]:=",ExpressionUUID->"2163b6ae-0336-4400-8b10-3d84b94fb171"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "28", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Short], "SummaryItem"]}}, BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Encoding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"\[LeftAngleBracket]", 
                    
                    RowBox[{
                    "\"a\"", ",", "\"b\"", ",", "\"c\"", ",", "\"d\"", ",", 
                    "\"e\"", ",", "\"f\"", ",", "\"g\"", ",", "\"h\"", ",", 
                    "\"i\"", ",", "\"j\"", ",", "\"k\"", ",", "\"l\"", ",", 
                    "\"m\"", ",", "\"n\"", ",", "\"o\"", ",", "\"p\"", ",", 
                    "\"q\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", 
                    "\"u\"", ",", "\"v\"", ",", "\"w\"", ",", "\"x\"", ",", 
                    "\"y\"", ",", "\"z\"", ",", "StartOfString", ",", 
                    "EndOfString"}], "\[RightAngleBracket]"}], Short[#, 3]& ],
                     BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Index\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Ignore case\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["True", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["28", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target length\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["All", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "28", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Short], "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803303795182044*^9, {3.80330434336003*^9, 3.803304367556459*^9}, 
   3.8033044705425034`*^9},
 CellLabel->
  "Out[2216]=",ExpressionUUID->"1132272b-0b31-4826-8036-30932d8d78fb"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["characters2"], "Input",
 CellChangeTimes->{{3.803301412513082*^9, 3.803301414669718*^9}, {
  3.803302818992783*^9, 3.803302820729618*^9}},
 CellLabel->
  "In[2217]:=",ExpressionUUID->"b6246fb4-4675-4f3a-90a6-fb5328838d29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>", ",", "StartOfString", ",", 
   "EndOfString"}], "}"}]], "Output",
 CellChangeTimes->{
  3.803302821036674*^9, 3.803303459192965*^9, {3.803303774502976*^9, 
   3.8033037748684597`*^9}, 3.803304474055222*^9},
 CellLabel->
  "Out[2217]=",ExpressionUUID->"0a85a503-cec6-40c6-9790-e1247233b4ea"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"characters", " "}]], "Input",
 CellChangeTimes->{{3.803301926619905*^9, 3.803301982434211*^9}, 
   3.8033028353021812`*^9, 3.8033037858843184`*^9},
 CellLabel->
  "In[2218]:=",ExpressionUUID->"610abb73-5886-4401-8dcf-50dea13e861f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.8033037861128807`*^9, 3.803304476103631*^9},
 CellLabel->
  "Out[2218]=",ExpressionUUID->"34c42153-e205-4309-bbc7-54853f622cce"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "\"\<a\>\"", ",", "\"\<b\>\"", ",", "\"\<c\>\"", ",", "\"\<d\>\"", ",", 
   "\"\<e\>\"", ",", "\"\<f\>\"", ",", "\"\<g\>\"", ",", "\"\<h\>\"", ",", 
   "\"\<i\>\"", ",", "\"\<j\>\"", ",", "\"\<k\>\"", ",", "\"\<l\>\"", ",", 
   "\"\<m\>\"", ",", "\"\<n\>\"", ",", "\"\<o\>\"", ",", "\"\<p\>\"", ",", 
   "\"\<q\>\"", ",", "\"\<r\>\"", ",", "\"\<s\>\"", ",", "\"\<t\>\"", ",", 
   "\"\<u\>\"", ",", "\"\<v\>\"", ",", "\"\<w\>\"", ",", "\"\<x\>\"", ",", 
   "\"\<y\>\"", ",", "\"\<z\>\""}], "}"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[2123]:=",ExpressionUUID->"b33a858e-3d77-4534-8bfd-50cbc6c2e1d1"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.803303474940071*^9},
 CellLabel->
  "Out[2123]=",ExpressionUUID->"c26de99e-3ac1-47a5-9a61-5224844861c1"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nonlinearityGenerator", "=", 
   RowBox[{"ElementwiseLayer", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"#", ">", "0"}], ",", "#", ",", 
       RowBox[{"0.2", "*", "#"}]}], "]"}], "&"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"nonlinearityDiscriminator", "=", 
    RowBox[{"ElementwiseLayer", "[", 
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", ">", "0"}], ",", "#", ",", 
        RowBox[{"0.2", "*", "#"}]}], "]"}], "&"}], "]"}]}], ";"}], 
  "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"batchnorm", "=", 
   RowBox[{"BatchNormalizationLayer", "[", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"\"\<Scaling\>\"", "\[Rule]", "None"}], ",", 
      RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "*)"}], 
    RowBox[{
     RowBox[{"\"\<Scaling\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "0"}], ",", 
     RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"LearningRateMultipliers", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Scaling\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"\"\<Biases\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"_", "\[Rule]", "1"}]}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"instancenorm", "=", 
   RowBox[{"NormalizationLayer", "[", 
    RowBox[{"1", ",", 
     RowBox[{"\"\<Scaling\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.803301781043736*^9, 3.803301828400323*^9}, 
   3.803303484872064*^9},
 CellLabel->
  "In[2124]:=",ExpressionUUID->"00a7f7cb-aaf6-46db-87c7-782f714442c4"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"normalizationGenerator", "=", "batchnorm"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"normalizationDiscriminator", "=", "batchnorm"}], ";"}]}], "Input",
 CellLabel->
  "In[2128]:=",ExpressionUUID->"2c77561d-6c94-47eb-b677-4a9a950a826e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"convolutionBlock", "[", 
    RowBox[{"n_", ",", "args___"}], "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"n", ",", 
        RowBox[{"{", "$kernelSize", "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{"PaddingSize", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"$kernelSize", "-", "1"}], ")"}], "/", "2"}], ")"}]}], 
        ",", 
        RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", "args"}], 
       "]"}], ",", "normalizationDiscriminator", ",", 
      "nonlinearityDiscriminator", ",", 
      RowBox[{"DropoutLayer", "[", "]"}]}], "}"}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[2130]:=",ExpressionUUID->"a0d7f61f-1a66-4225-9c0f-1f7dabd6e6a6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"textDiscriminator", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"(*", 
       RowBox[{"Preprocessing", ":", 
        RowBox[{
        "only", " ", "keep", " ", "the", " ", "maximum", " ", "values"}]}], 
       "*)"}], 
      RowBox[{
       RowBox[{"\"\<keep max only\>\"", "\[Rule]", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"AggregationLayer", "[", 
             RowBox[{"Max", ",", 
              RowBox[{"-", "1"}]}], "]"}], ",", 
            RowBox[{"ThreadingLayer", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"#1", "\[GreaterEqual]", 
                  RowBox[{"#2", "-", "1.*^-7"}]}], ",", "#1", ",", "0"}], 
                "]"}], "&"}], ",", 
              RowBox[{"-", "1"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], 
             "}"}], "\[Rule]", "2"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<conv.\>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}], "\[Rule]", 
           RowBox[{"convolutionBlock", "[", "$numhiddens", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "$depth"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"\"\<aggregate\>\"", "\[Rule]", 
        RowBox[{"AggregationLayer", "[", 
         RowBox[{"Mean", ",", "1"}], "]"}]}], ",", 
       RowBox[{"\"\<dropout\>\"", "\[Rule]", 
        RowBox[{"DropoutLayer", "[", "]"}]}], ",", 
       RowBox[{"\"\<classify\>\"", "\[Rule]", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"\"\<Real\>\"", ",", 
          RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}], ",", 
          RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$jensen", ",", 
         RowBox[{"\"\<logit\>\"", "\[Rule]", "LogisticSigmoid"}], ",", 
         "Nothing"}], "]"}]}], "|>"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Varying\>\"", ",", 
        RowBox[{"Length", "[", "characters2", "]"}]}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.8033018652762537`*^9},
 CellLabel->
  "In[2219]:=",ExpressionUUID->"4ae08478-dacc-4b25-a418-a51fd3b0ac16"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"textGenerator", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"$generatorTerminalTokensQ", ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Append", "/", "Prepend"}], " ", 
           RowBox[{"EOS", "/", "SOS"}], " ", "feature", " ", "vectors"}], 
          "*)"}], 
         RowBox[{"\"\<add eos/sos latent\>\"", "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ArrayLayer", "[", "]"}], ",", 
              RowBox[{"AppendLayer", "[", "]"}], ",", 
              RowBox[{"ArrayLayer", "[", "]"}], ",", 
              RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], 
                "}"}], "\[Rule]", "2"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "4"}]}], "}"}]}], 
           "]"}]}], ",", "Nothing"}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Core", " ", "deep", " ", "net"}], "*)"}], 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<conv.\>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}], "\[Rule]", 
           RowBox[{"convolutionBlock", "[", "$numhiddens", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "$depth"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$generatorTerminalTokensQ", ",", 
         RowBox[{"(*", 
          RowBox[{"Remove", " ", 
           RowBox[{"EOS", "/", "SOS"}], " ", "high", " ", "level", " ", 
           "features"}], "*)"}], 
         RowBox[{"\"\<remove eos/sos prediction\>\"", "\[Rule]", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"SequenceRestLayer", "[", "]"}], ",", 
             RowBox[{"SequenceMostLayer", "[", "]"}]}], "}"}], "]"}]}], ",", 
         "Nothing"}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Classifier", " ", 
         RowBox[{"(", 
          RowBox[{"of", " ", "characters"}], ")"}]}], "*)"}], 
       RowBox[{"\"\<classify\>\"", "\[Rule]", 
        RowBox[{"NetMapOperator", "@", 
         RowBox[{"LinearLayer", "[", 
          RowBox[{"Length", "[", "characters", "]"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}]}], "*)"}], "]"}]}]}], 
       ",", 
       RowBox[{"\"\<squash\>\"", "\[Rule]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$discriminatorTerminalTokensQ", ",", 
         RowBox[{"\"\<add eos/sos onehot proba\>\"", "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"(*", 
              RowBox[{
              "Catenate", " ", "zero", " ", "proba", " ", "for", " ", 
               RowBox[{"EOS", "/", "SOS"}], " ", "inside", " ", "the", " ", 
               "generated", " ", "text"}], "*)"}], 
             RowBox[{
              RowBox[{"PaddingLayer", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "2"}], "}"}]}], "}"}], "]"}], ",", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"Append", "/", "Prepend"}], " ", "proba", " ", "of", 
                " ", "1", " ", "for", " ", 
                RowBox[{"EOS", "/", "SOS"}], " ", "at", " ", "the", " ", 
                RowBox[{"end", "/", "beginning"}], " ", "of", " ", "the", " ",
                 "generated", " ", "text", " ", 
                RowBox[{"(", 
                 RowBox[{
                 "to", " ", "be", " ", "in", " ", "accordance", " ", "with", 
                  " ", "the", " ", "discriminator"}], ")"}]}], "*)"}], 
              RowBox[{"ArrayLayer", "[", 
               RowBox[{
                RowBox[{"\"\<Array\>\"", "\[Rule]", 
                 RowBox[{"UnitVector", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "characters2", "]"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "characters2", "]"}], "-", "1"}]}],
                   "]"}]}], ",", 
                RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], 
               "]"}], ",", 
              RowBox[{"PrependLayer", "[", "]"}], ",", 
              RowBox[{"ArrayLayer", "[", 
               RowBox[{
                RowBox[{"\"\<Array\>\"", "\[Rule]", 
                 RowBox[{"UnitVector", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "characters2", "]"}], ",", 
                   RowBox[{"Length", "[", "characters2", "]"}]}], "]"}]}], 
                ",", 
                RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], 
               "]"}], ",", 
              RowBox[{"AppendLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "3"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", "5"}]}], "}"}]}], 
           "]"}]}], ",", "Nothing"}], "]"}]}], "|>"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<n\>\"", ",", "$numlatent"}], "}"}]}], ",", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"netpostproc", "=", 
          RowBox[{"NetDecoder", "[", "netpreproc", "]"}]}], "}"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Capitalize", " ", "the", " ", "decoded", " ", 
          RowBox[{"(", 
           RowBox[{"lower", "-", "case"}], ")"}], " ", "text"}], "*)"}], 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Function\>\"", ",", 
           RowBox[{"Function", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"netpostproc", "[", "#", "]"}], ",", 
              RowBox[{
               RowBox[{"WordBoundary", "~~", 
                RowBox[{"c", ":", "WordCharacter"}]}], "\[RuleDelayed]", 
               RowBox[{"ToUpperCase", "[", "c", "]"}]}]}], "]"}], "]"}]}], 
          "}"}], "]"}]}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{3.803302019554625*^9},
 CellLabel->
  "In[2220]:=",ExpressionUUID->"e4bce7eb-3ae9-4cbc-a22d-8432ab87d54f"],

Cell[BoxData[
 TemplateBox[{
  "NetDecoder", "extfwarn", 
   "\"Specified function \\!\\(\\*RowBox[{RowBox[{\\\"StringReplace\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"&\\\"}]\\) appears to require definitions of external \
symbols (\\!\\(\\*TemplateBox[List[\\\", \\\", \\\"\\\\\\\", \\\\\\\"\\\", \\\
\"c\\\"], \\\"RowWithSeparators\\\"]\\)). Be aware that the definitions and \
values of these symbols will not be retained if the net is saved using \
Export, Put, or DumpSave.\"", 2, 2220, 229, 26207717223377046194, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.803301877731173*^9, {3.803301992046596*^9, 3.80330202048737*^9}, 
   3.80330285532178*^9, 3.803303494164421*^9, 3.803304482573189*^9},
 CellLabel->
  "During evaluation of \
In[2220]:=",ExpressionUUID->"2b196ac6-8547-4e4d-b400-cb547a357934"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["textGenerator"], "Input",
 CellChangeTimes->{{3.803302033299098*^9, 3.8033020351080523`*^9}},
 CellLabel->
  "In[2040]:=",ExpressionUUID->"dc5a96f0-b532-45ed-870f-7420d4413951"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1018133751], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "3" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`RealT]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1962472001]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1962472001], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1962472001], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1018133751]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1962472001], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1018133751], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 16, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1018133751]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2108979279]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1018133751], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[2108979279]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2108979279], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1018133751], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2108979279]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1873011630]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1873011630]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1873011630], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2108979279], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1873011630], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1688598501]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1688598501], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1688598501], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2102112350]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1688598501], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1873011630], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{26, 128}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2102112350], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1480060382], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 2}}, "Padding" -> 0., 
                    "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2102112350], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2102112350], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2102112350], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[749760453]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2102112350], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[749760453], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[749760453], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1480060382]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[749760453], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1480060382], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1480060382], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[758483095], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos latent\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"remove eos/sos prediction\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"squash\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos onehot proba\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"expression\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    395., {58.172119140625, 63.827880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.80330203547169*^9, 3.80330285806594*^9},
 CellLabel->
  "Out[2040]=",ExpressionUUID->"41b09827-f1f5-484e-8ffa-6de5ccd1fdad"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"characters1", " ", "=", " ", 
    RowBox[{"AssociationThread", "[", "\n", "\t", 
     RowBox[{
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"CharacterRange", "[", 
         RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], ",", " ", 
        RowBox[{"{", 
         RowBox[{"StartOfString", ",", " ", "EndOfString"}], "}"}]}], "]"}], 
      "\n", "\t", "\[Rule]", " ", 
      RowBox[{"Range", "[", "28", "]"}]}], "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"computeNGrams", "[", 
     RowBox[{"texts_", ",", " ", "n_"}], "]"}], " ", ":=", " ", 
    RowBox[{"Block", "[", 
     RowBox[{
      RowBox[{"{", "ngrams", "}"}], ",", "\n", "\t", 
      RowBox[{
       RowBox[{"ngrams", " ", "=", " ", 
        RowBox[{"Flatten", "[", "\n", "\t\t", 
         RowBox[{
          RowBox[{
           RowBox[{"Function", "[", 
            RowBox[{"Partition", "[", 
             RowBox[{"#", ",", " ", "n", ",", " ", "1"}], "]"}], "]"}], " ", "/@",
            " ", "\n", "\t\t", 
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{"Join", "[", 
              RowBox[{
               RowBox[{"{", "StartOfString", "}"}], ",", " ", 
               RowBox[{"Characters", "[", "#", "]"}], ",", " ", 
               RowBox[{"{", "EndOfString", "}"}]}], "]"}], "]"}], " ", "/@", 
            " ", 
            RowBox[{"normalizeText", "[", "texts", "]"}]}]}], ",", "\n", 
          "\t\t", "1"}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
       RowBox[{"(*", " ", 
        RowBox[{"Convert", " ", "to", " ", "indices"}], " ", "*)"}], "\n", 
       "\t", 
       RowBox[{"ngrams", " ", "=", " ", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"Lookup", "[", 
            RowBox[{"characters1", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
          "ngrams"}], "]"}]}], ";", "\n", "\t", 
       RowBox[{"(*", " ", "Counts", " ", "*)"}], "\n", "\t", 
       RowBox[{"ngrams", " ", "=", " ", 
        RowBox[{"Normal", "[", 
         RowBox[{
          RowBox[{"N", " ", "@", " ", 
           RowBox[{"Counts", "[", "ngrams", "]"}]}], " ", "/", " ", 
          RowBox[{"Length", "[", "ngrams", "]"}]}], "]"}]}], ";", "\n", "\t", 
       
       RowBox[{"(*", " ", 
        RowBox[{"Fill", " ", "SparseArray"}], " ", "*)"}], "\n", "\t", 
       RowBox[{"SparseArray", "[", 
        RowBox[{"ngrams", ",", " ", 
         RowBox[{"Table", "[", 
          RowBox[{
           RowBox[{"Length", "[", "characters1", "]"}], ",", "n"}], "]"}]}], 
        "]"}]}]}], "\n", "]"}]}], ";"}], "\n"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"findEuclideanDistance", "[", 
    RowBox[{"ngram1_", ",", "ngram2_"}], "]"}], ":=", " ", 
   RowBox[{"EuclideanDistance", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", "ngram1"}], ",", 
     RowBox[{"Flatten", "@", "ngram2"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"DistancesofNgrams", "[", 
    RowBox[{"generator_", ",", " ", "dataset_"}], "]"}], ":=", " ", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"findEuclideanDistance", "[", 
      RowBox[{
       RowBox[{"computeNGrams", "[", 
        RowBox[{
         RowBox[{"generator", "@", 
          RowBox[{"latentGeneration", "[", "500", "]"}]}], ",", "n"}], "]"}], 
       ",", " ", 
       RowBox[{"computeNGrams", "[", 
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"dataset", ",", "500"}], "]"}], ",", "n"}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "5"}], "}"}]}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.803302072472938*^9, 3.80330207862938*^9}, {
  3.80330316114666*^9, 3.803303161784067*^9}, {3.803304510685483*^9, 
  3.8033045110606203`*^9}},
 CellLabel->
  "In[2510]:=",ExpressionUUID->"befac3fa-90ed-471f-81c2-c0a7e8b8bf28"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8033020835188723`*^9, 3.8033020879659348`*^9}},
 CellLabel->
  "In[1991]:=",ExpressionUUID->"17b346e5-e607-4b3f-9ef6-837d8536c160"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", 
   RowBox[{"Generation", " ", "of", " ", "latent", " ", "random"}], "*)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"latentGeneration", "[", "batchSize_", "]"}], ":=", 
    RowBox[{"Table", "[", 
     RowBox[{
      RowBox[{"Block", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"len", "=", 
          RowBox[{"Max", "[", 
           RowBox[{"3", ",", 
            RowBox[{"RandomChoice", "[", 
             RowBox[{
              RowBox[{"Values", "[", "counts", "]"}], "\[Rule]", 
              RowBox[{"Keys", "[", "counts", "]"}]}], "]"}]}], "]"}]}], "}"}],
         ",", 
        RowBox[{
         RowBox[{
          RowBox[{"NumericArray", "[", 
           RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "@", 
         RowBox[{"Clip", "[", 
          RowBox[{
           RowBox[{"RandomVariate", "[", 
            RowBox[{
             RowBox[{"NormalDistribution", "[", "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"len", ",", "$numlatent"}], "}"}]}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}]}], "]"}], ",", 
      "batchSize"}], "]"}]}], ";"}]}]], "Input",
 CellLabel->
  "In[2514]:=",ExpressionUUID->"a77d607b-ac9e-46ef-992d-86a65a4d7df5"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"randomizeOnehot", "[", "onehot_", "]"}], ":=", 
   RowBox[{"If", "[", 
    RowBox[{"$discriminatorTerminalTokensQ", ",", 
     RowBox[{"Join", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"First", "@", "onehot"}], "}"}], ",", 
       RowBox[{"Map", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"#", "*", 
           RowBox[{"Clip", "[", 
            RowBox[{
             RowBox[{"RandomVariate", "[", 
              RowBox[{"NormalDistribution", "[", 
               RowBox[{"0.8", ",", "0.1"}], "]"}], "]"}], ",", 
             RowBox[{"{", 
              RowBox[{"0.55", ",", "1"}], "}"}]}], "]"}]}], "&"}], ",", 
         RowBox[{"Rest", "@", 
          RowBox[{"Most", "@", "onehot"}]}]}], "]"}], ",", 
       RowBox[{"{", 
        RowBox[{"Last", "@", "onehot"}], "}"}]}], "]"}], ",", 
     RowBox[{"Map", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"#", "*", 
         RowBox[{"Clip", "[", 
          RowBox[{
           RowBox[{"RandomVariate", "[", 
            RowBox[{"NormalDistribution", "[", 
             RowBox[{"0.8", ",", "0.1"}], "]"}], "]"}], ",", 
           RowBox[{"{", 
            RowBox[{"0.55", ",", "1"}], "}"}]}], "]"}]}], "&"}], ",", 
       "onehot"}], "]"}]}], "]"}]}], ";"}]], "Input",
 CellLabel->
  "In[2515]:=",ExpressionUUID->"785a2d6c-1cf9-4937-a17b-563e730139ae"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"sampleGeneration", "[", "batchSize_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "onehot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"normalizedChemicalNames", ",", "batchSize"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"onehot", "=", 
       RowBox[{
        RowBox[{"UnitVectorLayer", "[", 
         RowBox[{
          RowBox[{"Length", "[", "characters2", "]"}], ",", 
          RowBox[{"\"\<Input\>\"", "\[Rule]", 
           RowBox[{"{", "Automatic", "}"}]}]}], "]"}], "[", 
        RowBox[{"netpreproc", "[", "s", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"NumericArray", "[", 
         RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"Map", "[", 
        RowBox[{"randomizeOnehot", ",", "onehot"}], "]"}]}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8033021448617496`*^9, 3.803302148459516*^9}},
 CellLabel->
  "In[2235]:=",ExpressionUUID->"f3af37c8-b4a5-4b8e-a238-cfa203db4f51"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataGenerator", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Sample\>\"", "\[Rule]", 
         RowBox[{"sampleGeneration", "[", "#BatchSize", "]"}]}], ",", 
        RowBox[{"\"\<Latent\>\"", "\[Rule]", 
         RowBox[{"latentGeneration", "[", "#BatchSize", "]"}]}]}], "|>"}], 
      "]"}], ",", 
     RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
      RowBox[{"Length", "[", "normalizedChemicalNames", "]"}]}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{3.803302152546784*^9},
 CellLabel->
  "In[2236]:=",ExpressionUUID->"031e9eab-5c03-4dc9-8827-6a4964eacd76"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803302118762341*^9, 
  3.8033021203815107`*^9}},ExpressionUUID->"5b079b1d-1f9f-43d6-a1b3-\
368d2e6c6ac9"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gan", "=", 
  RowBox[{"NetGANOperator", "[", 
   RowBox[{"{", 
    RowBox[{"textGenerator", ",", "textDiscriminator"}], "}"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[2237]:=",ExpressionUUID->"2662166a-3b8e-45bc-be12-ca6921726dba"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Sample\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Latent\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossReal\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"GeneratedFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox["\"expression\"", "SummaryItem"], 
                    Annotation[#, {"Outputs", "GeneratedFake"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Generator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {16}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {16}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1726884325]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1726884325], "$Shape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1594686823]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 16, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1594686823]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1532308701]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1532308701], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1375653168]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1375653168]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1375653168], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1375653168], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1425133732]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1425133732], "$Shape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[2123566858]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{26, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2123566858],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2123566858], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1624397672]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1624397672], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1739322899]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], {
                    "Parameters", "Discriminator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 28, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1069476086]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[894211705]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[894211705], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1680694167]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1680694167]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1680694167], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 128}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], {
                    "Outputs", "GeneratedFake"} -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803302230470598*^9, 3.803302877774542*^9, 
  3.8033045193304377`*^9},
 CellLabel->
  "Out[2237]=",ExpressionUUID->"c8795f4b-85eb-4290-8e51-50c6ff796680"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"$monitoringLatent", "=", 
   RowBox[{"SortBy", "[", 
    RowBox[{
     RowBox[{"latentGeneration", "[", "10", "]"}], ",", "Length"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{
   RowBox[{"monitorGAN", "[", "gan_", "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"generator", "=", 
       RowBox[{"NetExtract", "[", 
        RowBox[{"gan", ",", "\"\<Generator\>\""}], "]"}]}], "}"}], ",", 
     RowBox[{"Framed", "@", 
      RowBox[{"Column", "[", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"Framed", "@", 
          RowBox[{"Grid", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Partition", "[", 
              RowBox[{
               RowBox[{"generator", "[", "$monitoringLatent", "]"}], ",", 
               "10"}], "]"}]}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}], ",", 
         RowBox[{"Framed", "@", 
          RowBox[{"Grid", "[", 
           RowBox[{
            RowBox[{"Transpose", "@", 
             RowBox[{"Partition", "[", 
              RowBox[{
               RowBox[{"generator", "[", 
                RowBox[{"$monitoringLatent", ",", 
                 RowBox[{"NetEvaluationMode", "\[Rule]", "\"\<Train\>\""}]}], 
                "]"}], ",", "10"}], "]"}]}], ",", 
            RowBox[{"Alignment", "\[Rule]", "Left"}]}], "]"}]}]}], "}"}], 
       "]"}]}]}], "]"}]}], "\n", "\[IndentingNewLine]", 
  RowBox[{"(*", "**********************)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{
       RowBox[{
        RowBox[{
         RowBox[{
          RowBox[{
           RowBox[{"Go", "!!"}], "!!"}], "!!"}], "!!"}], "!!"}], "!!"}], 
      "!!"}], "!!"}], "!"}], "*)"}], "\[IndentingNewLine]", 
  RowBox[{"(*", "**********************)"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"If", "[", 
    RowBox[{"$Notebooks", ",", 
     RowBox[{"Echo", "[", 
      RowBox[{"\"\<Training of\>\"", "\[Rule]", "gan"}], "]"}]}], "]"}], 
   ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"$SAVEDIR", "=!=", "None"}], ",", 
    RowBox[{"CreateDirectory", "[", 
     RowBox[{
      RowBox[{"FileNameJoin", "[", 
       RowBox[{"{", 
        RowBox[{"$SAVEDIR", ",", "\"\<monitoring\>\""}], "}"}], "]"}], ",", 
      RowBox[{"CreateIntermediateDirectories", "\[Rule]", "True"}]}], "]"}]}],
    "]"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"trained", "=", 
   RowBox[{"NetTrain", "[", 
    RowBox[{"gan", ",", "dataGenerator", ",", 
     RowBox[{"TargetDevice", "\[Rule]", "$device"}], ",", 
     RowBox[{"BatchSize", "\[Rule]", "$batchsize"}], ",", 
     RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Discriminator\>\"", "\[Rule]", "$updateDiscriminator"}], 
        ",", "\"\<Generator\>\""}], "}"}]}], ",", 
     RowBox[{"MaxTrainingRounds", "\[Rule]", "100000"}], ",", 
     RowBox[{"TrainingProgressReporting", "\[Rule]", 
      RowBox[{"Append", "[", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{"$Notebooks", ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"Function", "[", 
               RowBox[{"monitorGAN", "[", "#Net", "]"}], "]"}], ",", 
              RowBox[{"\"\<Interval\>\"", "\[Rule]", 
               RowBox[{"Quantity", "[", 
                RowBox[{"1", ",", "\"\<Seconds\>\""}], "]"}]}]}], "}"}], ",", 
            "\"\<Panel\>\""}], "}"}], ",", "\"\<Print\>\""}], "]"}], ",", 
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"$SAVEDIR", "===", "None"}], ",", "Nothing", ",", 
          RowBox[{"File", "[", 
           RowBox[{"FileNameJoin", "[", 
            RowBox[{"{", 
             RowBox[{"$SAVEDIR", ",", "\"\<training_log.csv\>\""}], "}"}], 
            "]"}], "]"}]}], "]"}]}], "]"}]}], ",", 
     RowBox[{"TrainingProgressFunction", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"Function", "@", 
         RowBox[{"Block", "[", 
          RowBox[{
           RowBox[{"{", "generator", "}"}], ",", "\[IndentingNewLine]", 
           RowBox[{
            RowBox[{"generator", "=", 
             RowBox[{"NetExtract", "[", 
              RowBox[{"#Net", ",", "\"\<Generator\>\""}], "]"}]}], ";", 
            "\[IndentingNewLine]", 
            RowBox[{"AppendTo", "[", 
             RowBox[{"ngramInfo", ",", 
              RowBox[{"DistancesofNgrams", "[", 
               RowBox[{"generator", ",", "normalizedChemicalNames"}], "]"}]}],
              "]"}]}]}], "]"}]}], ",", 
        RowBox[{"\"\<Interval\>\"", "\[Rule]", 
         RowBox[{"Quantity", "[", 
          RowBox[{"1", ",", "\"\<Rounds\>\""}], "]"}]}]}], "}"}]}], ",", 
     RowBox[{"TrainingProgressCheckpointing", "\[Rule]", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"$SAVEDIR", "===", "None"}], ",", "None", ",", 
        RowBox[{"{", 
         RowBox[{"\"\<File\>\"", ",", 
          RowBox[{"$SAVEDIR", "<>", "\"\</gan.wlnet\>\""}], ",", 
          RowBox[{"\"\<Interval\>\"", "\[Rule]", 
           RowBox[{"Quantity", "[", 
            RowBox[{"10", ",", "\"\<Rounds\>\""}], "]"}]}]}], "}"}]}], 
       "]"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{"If", "[", 
  RowBox[{
   RowBox[{"FailureQ", "[", "trained", "]"}], ",", "trained", ",", 
   RowBox[{"textGenerator", "=", 
    RowBox[{"NetExtract", "[", 
     RowBox[{"trained", ",", "\"\<Generator\>\""}], "]"}]}]}], 
  "]"}]}], "Input",
 CellChangeTimes->{{3.80330319583911*^9, 3.803303199516307*^9}},
 CellLabel->
  "In[2238]:=",ExpressionUUID->"ed5930d5-acd0-4616-9882-9d6d81a9a7f4"],

Cell[BoxData[
 RowBox[{"\<\"Training of\"\>", "\[Rule]", 
  TagBox[
   TemplateBox[{
     RowBox[{
       StyleBox[
        TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
       StyleBox["[", "NonInterpretableSummary"], 
       DynamicModuleBox[{Typeset`open = True}, 
        PanelBox[
         PaneSelectorBox[{False -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquarePlusIconMedium"], 
                  ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                 ButtonFunction :> (Typeset`open = True), Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
               
               StyleBox[
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    GrayLevel[0.6], 
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                  StyleBox[
                  "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                   FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontFamily -> "Roboto", FontSize -> 
                   8, FontColor -> RGBColor[0.66, 0, 0], Background -> 
                   GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                   Scaled[0.0001]}], CacheGraphics -> False], 
               GridBox[{{
                  StyleBox[
                   TemplateBox[{"\"Sample\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], 
                  StyleBox[
                   TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                  StyleBox[
                   TemplateBox[{"\"Latent\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], 
                  StyleBox[
                   TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                  StyleBox[
                   TemplateBox[{"\"LossReal\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], 
                  StyleBox["\"real\"", "SummaryItem"]}, {
                  StyleBox[
                   TemplateBox[{"\"LossFake\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], 
                  StyleBox["\"real\"", "SummaryItem"]}, {
                  StyleBox[
                   TemplateBox[{"\"GeneratedFake\"", "\":\""}, "RowDefault"], 
                   "SummaryItemAnnotation"], 
                  StyleBox["\"expression\"", "SummaryItem"]}}, 
                BaselinePosition -> {2, 1}, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
             BaselinePosition -> {1, 3}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {
                 Offset[0.], {
                  Offset[0.5599999999999999]}, 
                 Offset[0.]}, "Rows" -> {
                 Offset[0.], {
                  Offset[0.4]}, 
                 Offset[0.]}}], True -> GridBox[{{
               PaneBox[
                ButtonBox[
                 DynamicBox[
                  FEPrivate`FrontEndResource[
                  "FEBitmaps", "SquareMinusIconMedium"], 
                  ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                 ButtonFunction :> (Typeset`open = False), Evaluator -> 
                 Automatic, Method -> "Preemptive"], 
                Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
               
               StyleBox[
                OverlayBox[{
                  GraphicsBox[
                   
                   GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {
                    1.5, 1}, {1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    GrayLevel[0.6], 
                    AbsolutePointSize[5], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                  StyleBox[
                  "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                   FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                   RGBColor[0.66, 0, 0], GraphicsColor -> 
                   RGBColor[0.66, 0, 0], FontFamily -> "Roboto", FontSize -> 
                   8, FontColor -> RGBColor[0.66, 0, 0], Background -> 
                   GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                   Scaled[0.0001]}], CacheGraphics -> False], 
               GridBox[{{
                  
                  DynamicModuleBox[{
                   NeuralNetworks`Private`FormattingLayers`opart, 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                   DynamicBox[
                    GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox["\"expression\"", "SummaryItem"], 
                    Annotation[#, {"Outputs", "GeneratedFake"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Generator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {16}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {16}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1726884325]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1726884325], "$Shape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1594686823]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 16, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1594686823]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1532308701]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1532308701], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1375653168]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1375653168]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1375653168], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "SequenceRest", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1375653168], "$Shape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1425133732]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1425133732], "$Shape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[2123566858]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Net" -> 
                    Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{26, 128}, NeuralNetworks`RealT], 
                    "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2123566858],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2123566858], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1624397672]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1624397672], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1739322899]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> Association[
                    "Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], {
                    "Parameters", "Discriminator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Aggregation", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 28, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1069476086]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[894211705]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[894211705], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["1" -> 
                    Association["Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1680694167]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[1], {128}], 
                    "Biases" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {128}], 
                    "MovingMean" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "MovingVariance" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Parameters" -> Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1680694167]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1680694167], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 128}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association["Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], {"Outputs", "GeneratedFake"} -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                    ImageSizeCache -> {
                    179., {79.672119140625, 85.327880859375}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                   Initialization :> {NetChain}]}}, BaselinePosition -> 
                Automatic, 
                GridBoxAlignment -> {
                 "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                GridBoxSpacings -> {
                 "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
             BaselinePosition -> {1, 1}, 
             GridBoxAlignment -> {"Rows" -> {{Top}}}, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {
                 Offset[0.], {
                  Offset[0.5599999999999999]}, 
                 Offset[0.]}, "Rows" -> {
                 Offset[0.], {
                  Offset[0.4]}, 
                 Offset[0.]}}]}, 
          Dynamic[Typeset`open], ImageSize -> Automatic], 
         BaseStyle -> {
          ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
           3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
       StyleBox["]", "NonInterpretableSummary"]}]},
    "CopyTag",
    DisplayFunction->(#& ),
    InterpretationFunction->("NetGANOperator[<>]"& )],
   False,
   Editable->False,
   SelectWithContents->True,
   Selectable->False]}]], "Echo",
 CellChangeTimes->{
  3.8033045208864927`*^9},ExpressionUUID->"201497a0-922f-4bde-9bed-\
74292ff82f04"],

Cell[BoxData[
 TemplateBox[{
  "CreateDirectory", "filex", 
   "\"\\!\\(\\*RowBox[{\\\"\\\\\\\"/Users/sumansigdel/documents/ChemicalNames/\
monitoring\\\\\\\"\\\"}]\\) already exists.\"", 2, 2241, 232, 
   26207717223377046194, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803302683212335*^9, 3.803302881704928*^9, 
  3.803303097688373*^9, 3.8033031652646923`*^9, 3.803303203112048*^9, 
  3.803304520940959*^9},
 CellLabel->
  "During evaluation of \
In[2238]:=",ExpressionUUID->"f96e0122-912e-4c4f-9df1-f975c58a39f7"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.803302683273457*^9, 3.803302889545526*^9, 3.803303099254655*^9, {
   3.803303174975767*^9, 3.803303203394137*^9}, 3.8033045626146193`*^9},
 CellLabel->
  "Out[2243]=",ExpressionUUID->"151b5d31-c055-4fcb-8b23-ca3c275be378"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"characters2", " ", "//", " ", "Length"}]], "Input",
 CellChangeTimes->{{3.803302719912953*^9, 3.803302726645279*^9}},
 CellLabel->
  "In[2028]:=",ExpressionUUID->"db0c885f-598e-48fa-8129-a583664372a7"],

Cell[BoxData["28"], "Output",
 CellChangeTimes->{{3.803302721425775*^9, 3.803302727028368*^9}},
 CellLabel->
  "Out[2028]=",ExpressionUUID->"02950f67-cea5-446e-ab92-1c8474b589b1"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["netpreproc"], "Input",
 CellChangeTimes->{{3.803303040574563*^9, 3.80330304143596*^9}},
 CellLabel->
  "In[2067]:=",ExpressionUUID->"c0e826dc-9bbc-4ecb-b01e-338d5ddb4b31"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetEncoder", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "28", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Short], "SummaryItem"]}}, BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Type\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Characters\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Encoding\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   PaneBox[
                    TagBox[
                    RowBox[{"\[LeftAngleBracket]", 
                    
                    RowBox[{
                    "\"a\"", ",", "\"b\"", ",", "\"c\"", ",", "\"d\"", ",", 
                    "\"e\"", ",", "\"f\"", ",", "\"g\"", ",", "\"h\"", ",", 
                    "\"i\"", ",", "\"j\"", ",", "\"k\"", ",", "\"l\"", ",", 
                    "\"m\"", ",", "\"n\"", ",", "\"o\"", ",", "\"p\"", ",", 
                    "\"q\"", ",", "\"r\"", ",", "\"s\"", ",", "\"t\"", ",", 
                    "\"u\"", ",", "\"v\"", ",", "\"w\"", ",", "\"x\"", ",", 
                    "\"y\"", ",", "\"z\"", ",", "StartOfString", ",", 
                    "EndOfString"}], "\[RightAngleBracket]"}], Short[#, 3]& ],
                     BaseStyle -> {
                    IndentMaxFraction -> 0.1, ShowStringCharacters -> False}, 
                    ContentPadding -> False, ImageSize -> {250}], Short], 
                  "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output form\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"Index\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Ignore case\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["True", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Count\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["28", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Target length\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["All", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Output\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\"vector of \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\" indices \"", 
                    StyleBox[
                    
                    TemplateBox[{
                    "\"(\[VeryThinSpace]range: \"", "1", "\"..\"", "28", 
                    "\"\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, "RowDefault"], 
                   Short], "SummaryItem"]}}, BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetEncoder[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803303041729411*^9},
 CellLabel->
  "Out[2067]=",ExpressionUUID->"90ad006d-d8f6-43ba-940b-ac9fa493c1e6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Counts", "@", 
  RowBox[{"Flatten", "@", 
   RowBox[{"Characters", "@", "normalizedChemicalNames"}]}]}]], "Input",
 CellChangeTimes->{{3.803303236166222*^9, 3.803303277134424*^9}, 
   3.803303340593924*^9, {3.803303587461101*^9, 3.803303588895484*^9}},
 CellLabel->
  "In[2138]:=",ExpressionUUID->"e7d8323e-1a07-44f5-934b-25c321e37a85"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"h\"\>", "\[Rule]", "2672"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "2356"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "2187"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "3927"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "5980"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "469"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "7799"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "6067"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "4815"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "6153"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "1379"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "2278"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "4223"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "1020"}], ",", 
   RowBox[{"\<\"a\"\>", "\[Rule]", "5190"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "2221"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "2757"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "1730"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "16"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "766"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "656"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "753"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "67"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "312"}], ",", 
   RowBox[{"\<\"q\"\>", "\[Rule]", "105"}], ",", 
   RowBox[{"\<\"[\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"]\"\>", "\[Rule]", "12"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "17"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{{3.803303239349546*^9, 3.803303277414247*^9}, 
   3.803303341076117*^9, 3.80330358922585*^9},
 CellLabel->
  "Out[2138]=",ExpressionUUID->"ae012b9b-355a-4cde-8fbd-07267a71cb56"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Tally", "[", "%2099", "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[2100]:=",ExpressionUUID->"bb1da80f-0140-4267-a0f2-5a99540694ac"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"\<\"h\"\>", ",", "2672"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"y\"\>", ",", "2356"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"d\"\>", ",", "2187"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"r\"\>", ",", "3927"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"o\"\>", ",", "5980"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"g\"\>", ",", "469"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"e\"\>", ",", "7799"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"n\"\>", ",", "6067"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"l\"\>", ",", "4815"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"i\"\>", ",", "6153"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"u\"\>", ",", "1379"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"m\"\>", ",", "2278"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"t\"\>", ",", "4223"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"b\"\>", ",", "1020"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"a\"\>", ",", "5190"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"p\"\>", ",", "2221"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"c\"\>", ",", "2757"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"s\"\>", ",", "1730"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"w\"\>", ",", "16"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"f\"\>", ",", "766"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"z\"\>", ",", "656"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"x\"\>", ",", "753"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"k\"\>", ",", "67"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"v\"\>", ",", "312"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"q\"\>", ",", "105"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"[\"\>", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"]\"\>", ",", "12"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"\<\"j\"\>", ",", "17"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8033033441150084`*^9},
 CellLabel->
  "Out[2100]=",ExpressionUUID->"4394f06e-c9ba-49d2-b6c8-4dda5b62ac0a"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"<|", 
    RowBox[{
     RowBox[{"\"\<h\>\"", "\[Rule]", "2672"}], ",", 
     RowBox[{"\"\<y\>\"", "\[Rule]", "2356"}], ",", 
     RowBox[{"\"\<d\>\"", "\[Rule]", "2187"}], ",", 
     RowBox[{"\"\<r\>\"", "\[Rule]", "3927"}], ",", 
     RowBox[{"\"\<o\>\"", "\[Rule]", "5980"}], ",", 
     RowBox[{"\"\<g\>\"", "\[Rule]", "469"}], ",", 
     RowBox[{"\"\<e\>\"", "\[Rule]", "7799"}], ",", 
     RowBox[{"\"\<n\>\"", "\[Rule]", "6067"}], ",", 
     RowBox[{"\"\<l\>\"", "\[Rule]", "4815"}], ",", 
     RowBox[{"\"\<i\>\"", "\[Rule]", "6153"}], ",", 
     RowBox[{"\"\<u\>\"", "\[Rule]", "1379"}], ",", 
     RowBox[{"\"\<m\>\"", "\[Rule]", "2278"}], ",", 
     RowBox[{"\"\<t\>\"", "\[Rule]", "4223"}], ",", 
     RowBox[{"\"\<b\>\"", "\[Rule]", "1020"}]}], "|>"}], ",", " ", 
   "\"\<m\>\""}], "]"}]], "Input",
 CellChangeTimes->{{3.8033036775723658`*^9, 3.803303712037466*^9}},
 CellLabel->
  "In[2139]:=",ExpressionUUID->"58ed1fb4-edab-42ff-8f18-49c52e91fdf8"],

Cell[BoxData[
 TemplateBox[{
  "Drop", "seqs", 
   "\"Sequence specification (+n, -n, {+n}, {-n}, {m, n}, or {m, n, s}) \
expected at position \\!\\(\\*RowBox[{\\\"2\\\"}]\\) in \
\\!\\(\\*RowBox[{\\\"Drop\\\", \\\"[\\\", RowBox[{RowBox[{\\\"\
\[LeftAssociation]\\\", RowBox[{RowBox[{\\\"\\\\\\\"h\\\\\\\"\\\", \
\\\"\[Rule]\\\", \\\"2672\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"y\\\\\\\"\\\", \\\"\[Rule]\\\", \\\"2356\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"d\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"2187\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"r\\\\\\\"\\\", \
\\\"\[Rule]\\\", \\\"3927\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"o\\\\\\\"\\\", \\\"\[Rule]\\\", \\\"5980\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"g\\\\\\\"\\\", \\\"\[Rule]\\\", \\\"469\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"e\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"7799\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"n\\\\\\\"\\\", \
\\\"\[Rule]\\\", \\\"6067\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"l\\\\\\\"\\\", \\\"\[Rule]\\\", \\\"4815\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"i\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"6153\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"u\\\\\\\"\\\", \
\\\"\[Rule]\\\", \\\"1379\\\"}], \\\",\\\", \
RowBox[{\\\"\\\\\\\"m\\\\\\\"\\\", \\\"\[Rule]\\\", \\\"2278\\\"}], \
\\\",\\\", RowBox[{\\\"\\\\\\\"t\\\\\\\"\\\", \\\"\[Rule]\\\", \
\\\"4223\\\"}], \\\",\\\", RowBox[{\\\"\\\\\\\"b\\\\\\\"\\\", \
\\\"\[Rule]\\\", \\\"1020\\\"}]}], \\\"\[RightAssociation]\\\"}], \\\",\\\", \
\\\"\\\\\\\"m\\\\\\\"\\\"}], \\\"]\\\"}]\\).\"", 2, 2139, 222, 
   26207717223377046194, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803303712903763*^9},
 CellLabel->
  "During evaluation of \
In[2139]:=",ExpressionUUID->"5e155bf9-71ce-470f-8ea6-46f839fe7eb7"],

Cell[BoxData[
 RowBox[{"Drop", "[", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"\<\"h\"\>", "\[Rule]", "2672"}], ",", 
     RowBox[{"\<\"y\"\>", "\[Rule]", "2356"}], ",", 
     RowBox[{"\<\"d\"\>", "\[Rule]", "2187"}], ",", 
     RowBox[{"\<\"r\"\>", "\[Rule]", "3927"}], ",", 
     RowBox[{"\<\"o\"\>", "\[Rule]", "5980"}], ",", 
     RowBox[{"\<\"g\"\>", "\[Rule]", "469"}], ",", 
     RowBox[{"\<\"e\"\>", "\[Rule]", "7799"}], ",", 
     RowBox[{"\<\"n\"\>", "\[Rule]", "6067"}], ",", 
     RowBox[{"\<\"l\"\>", "\[Rule]", "4815"}], ",", 
     RowBox[{"\<\"i\"\>", "\[Rule]", "6153"}], ",", 
     RowBox[{"\<\"u\"\>", "\[Rule]", "1379"}], ",", 
     RowBox[{"\<\"m\"\>", "\[Rule]", "2278"}], ",", 
     RowBox[{"\<\"t\"\>", "\[Rule]", "4223"}], ",", 
     RowBox[{"\<\"b\"\>", "\[Rule]", "1020"}]}], "\[RightAssociation]"}], 
   ",", "\<\"m\"\>"}], "]"}]], "Output",
 CellChangeTimes->{3.803303712949445*^9},
 CellLabel->
  "Out[2139]=",ExpressionUUID->"231c5045-98a9-4e73-a1bc-ee52478792fe"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"KeyDrop", "[", 
  RowBox[{
   RowBox[{"Counts", "@", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Characters", "@", "normalizedChemicalNames"}]}]}], ",", 
   RowBox[{"{", 
    RowBox[{"\"\<[\>\"", ",", "\"\<]\>\""}], "}"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.80330373153141*^9, 3.803303739520731*^9}},
 CellLabel->
  "In[2140]:=",ExpressionUUID->"a28cead7-e463-4039-9596-02cd3ccaf5bc"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"h\"\>", "\[Rule]", "2672"}], ",", 
   RowBox[{"\<\"y\"\>", "\[Rule]", "2356"}], ",", 
   RowBox[{"\<\"d\"\>", "\[Rule]", "2187"}], ",", 
   RowBox[{"\<\"r\"\>", "\[Rule]", "3927"}], ",", 
   RowBox[{"\<\"o\"\>", "\[Rule]", "5980"}], ",", 
   RowBox[{"\<\"g\"\>", "\[Rule]", "469"}], ",", 
   RowBox[{"\<\"e\"\>", "\[Rule]", "7799"}], ",", 
   RowBox[{"\<\"n\"\>", "\[Rule]", "6067"}], ",", 
   RowBox[{"\<\"l\"\>", "\[Rule]", "4815"}], ",", 
   RowBox[{"\<\"i\"\>", "\[Rule]", "6153"}], ",", 
   RowBox[{"\<\"u\"\>", "\[Rule]", "1379"}], ",", 
   RowBox[{"\<\"m\"\>", "\[Rule]", "2278"}], ",", 
   RowBox[{"\<\"t\"\>", "\[Rule]", "4223"}], ",", 
   RowBox[{"\<\"b\"\>", "\[Rule]", "1020"}], ",", 
   RowBox[{"\<\"a\"\>", "\[Rule]", "5190"}], ",", 
   RowBox[{"\<\"p\"\>", "\[Rule]", "2221"}], ",", 
   RowBox[{"\<\"c\"\>", "\[Rule]", "2757"}], ",", 
   RowBox[{"\<\"s\"\>", "\[Rule]", "1730"}], ",", 
   RowBox[{"\<\"w\"\>", "\[Rule]", "16"}], ",", 
   RowBox[{"\<\"f\"\>", "\[Rule]", "766"}], ",", 
   RowBox[{"\<\"z\"\>", "\[Rule]", "656"}], ",", 
   RowBox[{"\<\"x\"\>", "\[Rule]", "753"}], ",", 
   RowBox[{"\<\"k\"\>", "\[Rule]", "67"}], ",", 
   RowBox[{"\<\"v\"\>", "\[Rule]", "312"}], ",", 
   RowBox[{"\<\"q\"\>", "\[Rule]", "105"}], ",", 
   RowBox[{"\<\"j\"\>", "\[Rule]", "17"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.803303740326418*^9},
 CellLabel->
  "Out[2140]=",ExpressionUUID->"66507f8b-f4c2-450e-95b5-8ee2a6c11dba"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"chemicalGAN", " ", "=", " ", 
  RowBox[{
  "Import", "[", "\"\</Users/sumansigdel/ChemicalNamesGAN.wlnet\>\"", 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803306942645155*^9, 3.803306957409342*^9}},
 CellLabel->
  "In[2507]:=",ExpressionUUID->"cec4f689-fee5-428f-a752-547850966fb6"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Sample\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Latent\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossReal\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"GeneratedFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   AbsolutePointSize[5], 
                   RGBColor[0.33, 0.33, 0.33], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "7", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 14.25},
                     {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{8.25, 
                    12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 11.25}}, {{
                    8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25, 9.}}, {{
                    8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 6.75}}}]},
                     ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox["\"expression\"", "SummaryItem"], 
                    Annotation[#, {"Outputs", "GeneratedFake"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Generator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{16}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{16}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1726884325]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1726884325], "$Shape" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1594686823]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 16, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1594686823]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> True, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1532308701]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1532308701], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1375653168]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> True, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1375653168]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1375653168], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1375653168], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1425133732]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1425133732], "$Shape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[2123566858]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{26, 128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{26}]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[2123566858],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2123566858], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1624397672]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1624397672], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1739322899]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], {
                    "Parameters", "Discriminator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 28, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1069476086]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> True, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[894211705]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[894211705], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 128, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1680694167]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "BatchNormalization", "Arrays" -> 
                    Association["Scaling" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}], "MovingMean" -> 
                    NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["Momentum" -> 0.9, "Epsilon" -> 0.001, 
                    "Interleaving" -> True, "$Channels" -> 128, 
                    "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1680694167]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1680694167], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 128}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], {
                    "Outputs", "GeneratedFake"} -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8033069581917353`*^9, 3.803308063167376*^9, 
  3.803309251468047*^9, 3.803314690566505*^9},
 CellLabel->
  "Out[2507]=",ExpressionUUID->"573634fa-0f31-49c1-9ede-90f1483ba2c2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"chemicalGenerator", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"chemicalGAN", ",", "\"\<Generator\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803306959444179*^9, 3.8033069818756657`*^9}},
 CellLabel->
  "In[2516]:=",ExpressionUUID->"7f22fd66-c4ba-4434-b752-092e6ad04383"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "3" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1726884325]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1726884325], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1594686823]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 16, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1594686823]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1532308701]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1532308701], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1375653168]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1375653168]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1375653168], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1375653168], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1425133732]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1425133732], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2123566858]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{26, 128}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{26}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2123566858], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 2}}, "Padding" -> 0., 
                    "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2123566858], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1624397672]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1624397672], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1739322899]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos latent\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"remove eos/sos prediction\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"squash\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos onehot proba\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"expression\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.803306960909182*^9, 3.8033069824153337`*^9}, 
   3.8033080648087673`*^9, 3.803309253765851*^9, {3.8033146919782963`*^9, 
   3.803314708933444*^9}},
 CellLabel->
  "Out[2516]=",ExpressionUUID->"af70b4c5-7190-4051-97d1-b2478f2264fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"chemicalGenerator", "@", 
  RowBox[{"latentChemicalGeneration", "[", "100", "]"}]}]], "Input",
 CellChangeTimes->{{3.803306984046586*^9, 3.803306991407508*^9}, {
  3.803307053851223*^9, 3.803307055606412*^9}, {3.803308075218445*^9, 
  3.803308075353517*^9}, {3.803308200989768*^9, 3.803308201322671*^9}, {
  3.803314736484457*^9, 3.803314739314097*^9}},
 CellLabel->
  "In[2548]:=",ExpressionUUID->"6942b595-de19-4614-aec4-00f3f9836bb8"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"Etamete\"\>", ",", "\<\"Pyltafon\"\>", 
   ",", "\<\"Droechedine\"\>", ",", "\<\"Crophretae\"\>", 
   ",", "\<\"Crocathade\"\>", ",", "\<\"Fterycametiadin\"\>", 
   ",", "\<\"Sleorane\"\>", ",", "\<\"Doxin\"\>", ",", "\<\"Daniamine\"\>", 
   ",", "\<\"Dilolesenil\"\>", ",", "\<\"Omenthylameladise\"\>", 
   ",", "\<\"Nlfaninatmlose\"\>", ",", "\<\"Menocorte\"\>", 
   ",", "\<\"Fpfesmltne\"\>", ",", "\<\"Localoidenottaol\"\>", 
   ",", "\<\"Cylprapin\"\>", ",", "\<\"Cropanalolpadoamlthol\"\>", 
   ",", "\<\"Proberriieltalaoaropene\"\>", 
   ",", "\<\"Cinutrphonthylaesdine\"\>", ",", "\<\"Sinuine\"\>", 
   ",", "\<\"Prodenifopirnhyeptne\"\>", ",", "\<\"Phoperie\"\>", 
   ",", "\<\"Pronrane\"\>", ",", "\<\"Pienthadon\"\>", 
   ",", "\<\"Iephoxine\"\>", ",", "\<\"Drachone\"\>", 
   ",", "\<\"Dinougtane\"\>", ",", "\<\"Phose\"\>", 
   ",", "\<\"Dinboccanne\"\>", ",", "\<\"Amlnohyemioe\"\>", 
   ",", "\<\"Dlanenaolinlaromatin\"\>", ",", "\<\"Certphine\"\>", 
   ",", "\<\"Pisrosolthiie\"\>", ",", "\<\"Ltinthynchacoceroxte\"\>", 
   ",", "\<\"Disycaephaloe\"\>", ",", "\<\"Pinalophane\"\>", 
   ",", "\<\"Ameurnsine\"\>", ",", "\<\"Cayrane\"\>", ",", "\<\"Adimior\"\>", 
   ",", "\<\"Doramesdine\"\>", ",", "\<\"Camlorrine\"\>", 
   ",", "\<\"Felcmethil\"\>", ",", "\<\"Alisieertol\"\>", 
   ",", "\<\"Mutylone\"\>", ",", "\<\"Deinlhresine\"\>", 
   ",", "\<\"Tratricentamalon\"\>", ",", "\<\"Pmecinpacyltenie\"\>", 
   ",", "\<\"Ntrine\"\>", ",", "\<\"Dylhexamidine\"\>", 
   ",", "\<\"Seraaline\"\>", ",", "\<\"Lamotocmoprepron\"\>", 
   ",", "\<\"Ulaomenine\"\>", ",", "\<\"Mineatlroprosgltnhyfyl\"\>", 
   ",", "\<\"Oltone\"\>", ",", "\<\"Fesyltriol\"\>", ",", "\<\"Phanidpir\"\>",
    ",", "\<\"Mrucyshesolychete\"\>", ",", "\<\"Metynirine\"\>", 
   ",", "\<\"Cryrolonolon\"\>", ",", "\<\"Prmide\"\>", 
   ",", "\<\"Crtroseoctrinibil\"\>", ",", "\<\"Lepratrobazopte\"\>", 
   ",", "\<\"Acmidrodinne\"\>", ",", "\<\"Acylthinoleimidene\"\>", 
   ",", "\<\"Nlalepurae\"\>", ",", "\<\"Mideibicinanonine\"\>", 
   ",", "\<\"Ceumbacidhyn\"\>", ",", "\<\"Lopaulon\"\>", 
   ",", "\<\"Pilltesyllethinl\"\>", ",", "\<\"Trmephonyllocoxine\"\>", 
   ",", "\<\"Amine\"\>", ",", "\<\"Losolepane\"\>", ",", "\<\"Sluerion\"\>", 
   ",", "\<\"Bacynnonaiil\"\>", ",", "\<\"Suacthrisirediie\"\>", 
   ",", "\<\"Clephynhocorrodone\"\>", ",", "\<\"Cuoroctane\"\>", 
   ",", "\<\"Ciestxan\"\>", ",", "\<\"Creisolaromltraoxamenallomion\"\>", 
   ",", "\<\"Fuurosan\"\>", ",", "\<\"Meprlinhidlhose\"\>", 
   ",", "\<\"Rhylarestane\"\>", ",", "\<\"Leprine\"\>", 
   ",", "\<\"Cyraphone\"\>", ",", "\<\"Rridatoseloheptocynolane\"\>", 
   ",", "\<\"Diolamidine\"\>", ",", "\<\"Pioe\"\>", 
   ",", "\<\"Ulerhacylate\"\>", ",", "\<\"Ceete\"\>", 
   ",", "\<\"Peptrinin\"\>", ",", "\<\"Doupreetaie\"\>", 
   ",", "\<\"Inataylineane\"\>", ",", "\<\"Lreamutin\"\>", 
   ",", "\<\"Fouratin\"\>", ",", "\<\"Dricamide\"\>", 
   ",", "\<\"Contlrthil\"\>", ",", "\<\"Miteazocrboprrate\"\>", 
   ",", "\<\"Cinillthine\"\>", ",", "\<\"Lliocylloin\"\>", 
   ",", "\<\"Mrexyine\"\>"}], "}"}]], "Output",
 CellChangeTimes->{{3.8033069884042664`*^9, 3.803306991865778*^9}, {
   3.8033070482611427`*^9, 3.803307056093587*^9}, {3.80330743117806*^9, 
   3.803307435615471*^9}, 3.803307698339182*^9, {3.8033080667180243`*^9, 
   3.8033080756836*^9}, {3.803308198890135*^9, 3.803308201765913*^9}, 
   3.803309255457348*^9, {3.8033146938032227`*^9, 3.803314740488545*^9}, 
   3.80331559675117*^9},
 CellLabel->
  "Out[2548]=",ExpressionUUID->"3d58ae5c-48a3-4253-96d9-19966e110066"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"chemicalDiscriminator", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"chemicalGAN", ",", "\"\<Discriminator\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803307234118424*^9, 3.803307247754861*^9}},
 CellLabel->
  "In[2409]:=",ExpressionUUID->"f617f595-8163-490f-8c23-c92da09e1987"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 28, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1069476086]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[894211705]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[894211705], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[894211705]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1680694167]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1680694167]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1680694167], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[894211705], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1680694167], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 128}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1069476086], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"keep max only\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"aggregate\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"dropout\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 128\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"logit\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    287., {58.172119140625, 63.827880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.80330724914285*^9, 3.803309264109118*^9},
 CellLabel->
  "Out[2409]=",ExpressionUUID->"1cb34fac-9fd3-4429-976f-80ded48ab193"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Max", "@", 
  RowBox[{"chemicalDiscriminator", "@", 
   RowBox[{"sampleGeneration", "[", "1000", "]"}]}]}]], "Input",
 CellChangeTimes->{{3.803307250448072*^9, 3.803307266261422*^9}, {
   3.8033077122237587`*^9, 3.803307727066938*^9}, 3.803309268836233*^9},
 CellLabel->
  "In[2524]:=",ExpressionUUID->"2ae5b6ce-c65e-4a6f-ac6e-e430bdc73d9e"],

Cell[BoxData["0.7103054523468018`"], "Output",
 CellChangeTimes->{{3.8033072546537247`*^9, 3.80330725760746*^9}, {
  3.803307715828198*^9, 3.8033077343136263`*^9}, {3.80330926552705*^9, 
  3.803309270389709*^9}, {3.803314729987535*^9, 3.803314749821589*^9}},
 CellLabel->
  "Out[2524]=",ExpressionUUID->"87eeab58-4482-4fab-864d-b3f561c6abdc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"latentGeneration", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.8033080798331833`*^9, 3.803308081483486*^9}},
 CellLabel->
  "In[2377]:=",ExpressionUUID->"e9d994a1-218a-49f4-a11e-d317288f846b"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"7", ",", "29"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"7", ",", "29"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "0.8532386422157288`", "\", \"", "0.293785959482193`", 
                    "\", \"", "0.11968410015106201`", "\", \"", 
                    RowBox[{"-", "0.5416139960289001`"}], "\", \"", "1.`", 
                    "\", \"", "\"\[Ellipsis]\""}, "RowDefault"], 
                   "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIdiGWB+GZulL1s
9jS7DzJfbc2Xc+1nYGiwt7rwf9/ksON2IDYy5rvaZbvR3cD+oFyP7eRtiiCx
/TLnAvaB5Hq2ue73Lr20B8Te8PW43S5WI/s5B132RT/fs+/dK02QufsXhzra
vRE6Blb/9XWCLYhe/s5z/+E7e/aC2IqiXmB1f9592bfyN7v9pXLF/VC794et
zATT1l1nQfr2d0+ZDNavVxYApg95/AOZu19w2no7T0uIm85k/AfTdwwWgfVM
eMW1v0U8CayudXvlPmlmVrD5z9P89zbdLbPv/f1pX8MVM7idUAz2+7P7sfs0
zmnujzRfuo//VIX9pXyZfWq7G/Y++6qx71Xbt30zz6mD9Uz7qGvvnhlvp9S4
xq73tY39t1kR9iINensjvE7sY3Q8aw0ztzfkgN3upVb27y9p7d3+WsM+Ma12
L0zuZrnzfqMZh/d2rjpto2e6cd+F53r2Og+kkN1lzxMbZS+wL3P/tIlT9smX
3Ny77nsDWL9p7HO7G+vU7RvYG/fOa55oe+GT+n6h/cF2+Vu27FNxMwTrLdb+
BA6Phesl7HKEY/btZ38Diuv9k0JX7oO5IYRTdX/ke377m1dj9kexJtkvM5IB
h7PUuT97b+xk3IecLp7mye7P9jCx37W5e1+vKONetLAD0xN3vtq7M7pt38kT
B/b8f6hhv3xxCthOweTufbIb5GHq93NsrbVfFuG2f5NHsa3Iexu4eFoby76X
OwvAZtVV/wW7JSv1NjyNbuv32q/6LcJej8XX3n3GRbudXJ/2ecdE2T+IZrb3
/MNnHxAisb9KfZbdjIWr9pVs6gX7c06VD9i8TKOFdvt+8+xn+MVvN6P9nQ23
0eR9SG7fP733mt36v3W2ABGQXEA=
   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.803308081785913*^9},
 CellLabel->
  "Out[2377]=",ExpressionUUID->"6b5a7a42-f083-4463-8cd8-ac8be761d01b"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"latentChemicalGeneration", "[", "batchSize_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"3", ",", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{
             RowBox[{"Values", "[", "counts", "]"}], "\[Rule]", 
             RowBox[{"Keys", "[", "counts", "]"}]}], "]"}]}], "]"}]}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"NumericArray", "[", 
          RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "@", 
        RowBox[{"Clip", "[", 
         RowBox[{
          RowBox[{"RandomVariate", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"len", ",", "16"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}]}], "]"}], ",", 
     "batchSize"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8033081079545403`*^9, 3.8033081087827387`*^9}, {
  3.803314724694018*^9, 3.803314724760086*^9}},
 CellLabel->
  "In[2519]:=",ExpressionUUID->"26076724-0025-481a-9900-6dea646c3cc2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"latentChemicalGeneration", "[", "1", "]"}]], "Input",
 CellChangeTimes->{{3.80330811174993*^9, 3.803308115251432*^9}},
 CellLabel->
  "In[2520]:=",ExpressionUUID->"193ea948-9a92-4065-a506-2e542dfb32f1"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"20", ",", "16"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"20", ",", "16"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   TemplateBox[{
                    RowBox[{"-", "0.5268256664276123`"}], "\", \"", 
                    "0.031874772161245346`", "\", \"", 
                    RowBox[{"-", "0.721967339515686`"}], "\", \"", 
                    "0.27293524146080017`", "\", \"", 
                    RowBox[{"-", "1.`"}], "\", \"", "\"\[Ellipsis]\""}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxNU3lQk0cUDzjlkpmiFZFj5JBIFaFE6BBLvt0GCVZqY0NkRukIJEQo1IIm
CA3omIql8QBqQKEKotMqqYXaDIqO8dv1GK14jA1HR3BKaCkgtFZFp5RDLd+r
+YY/9nj7++17v33vbbA6PznLWSAQ6Nymp2RVkVSrVemVLpyxSbU5evlmDpw3
Pbymh2evCw2sdGZ62sU0nOxDAoGBRiWKyU7lNsrti2OPsLE3/GmC8T6H4TH6
hHBrrn8x5vC8ZUs4m7aLtgOfw5YIAwEb/XwjbqgWYC+LHOXJTyLvsLKLHJ7i
a4Y4BzRazGb6kWQPX3qz9xYTejQQl+tX0e/XWciUPg2drzlHHulMbLHaCalS
ciDOT3MsJCwujy5qvY5WjCxguuvkuK+9FfzJlJkQ/9WA/T8j/ij4kBi0bVhY
jRznu7N+ZLn112sxzKsz+ul9CxvhdAM4GWY7WZ0fAH62ztEAzmwoIg6uww+3
uiUxcEcY9ha2lkTRQ84tDLPyFjl9yQc4kk+GyAxNVH1Zhfb+UcBrfZD9v9/z
fYOk+G8f4IqS1DjkiwlC4j2AN6utE729zovqdApsbksiFV054C+gLxdJJaFo
5XgEdWm+h9anjhNbqxVVPA+ml05m0w6TFZm9e6F2BwZHSGH2NbI6QMNrL22x
kAarH/+mjWJfGjQsIal3TaRwsJ7VyRoYTU0mmSV3w3HYys58tyZWhIO2wF08
+4130d3ybVidEE9rF0fSs9v/RGd+DqA/LIin3gNC1I8K4M7SDzvJ8dp0vj5V
8rV8vVIkA6CzdO8VyIH365NktOkrUvdtBJ8r9+cUpdslJD0mh2LtZ+iwZzPk
/uAZJRmzPUOGE2EXH16W4ZKHWcDf9eIbdvjYX0xdoR8O7Vjj0E8L/30HYjQ+
XgOxEy8Mgh+PE1uIvWsrzTHKyLm5yTTh6jN2Zk/d3nEFNDqtSOd7oNbXiByc
m00HHT2CG0PieM7UYykNtemx2vYRJgPutCHchyl9quB74k61B90/3ky+npSD
fb1Uy74vCuPjqi/0IOwcjYYrp5h7TA/Zsa+PSQxS4EpbPxOR2o/aXGNwpEyE
vjTGo6XmCSRtMTCK91bRKnMJ+FCdOsJ2qg3c/6O5Dx6hfLdJpDHkUfsdPeDS
8gJe6zLZJCtdL2CeSrv4v1F/LIv673dn92iK0Nzaj+GNQfOEOPGXD+jvsmT8
W0UjstZl4PmnxHRhjZK+aWAdPY9vm0yQ2wQnCa7qboJc7dmVRvtfJgE+/3Q3
UciH0AtpNthXLUOoXQt5posm2sjuJ+5wvjNNCFp8kAx117tCXqq/ew1HpfSh
0Y5cdnaZG+DLFxtRSHQzpx3bW11xmedx8nIsHGeEn4X625oqkNemw6w9UkL/
A72uEwM=
   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{
  3.803308115540637*^9, 3.803308194003704*^9, {3.8033147139653587`*^9, 
   3.803314726816065*^9}},
 CellLabel->
  "Out[2520]=",ExpressionUUID->"b1285856-fc79-43cd-b153-c1d2551999c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["counts"], "Input",
 CellChangeTimes->{{3.803308134339693*^9, 3.803308134950124*^9}},
 CellLabel->
  "In[2380]:=",ExpressionUUID->"2374d89d-2530-4a2e-bb52-966d372c48f1"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"9", "\[Rule]", "144"}], ",", 
   RowBox[{"7", "\[Rule]", "233"}], ",", 
   RowBox[{"8", "\[Rule]", "196"}], ",", 
   RowBox[{"10", "\[Rule]", "57"}], ",", 
   RowBox[{"6", "\[Rule]", "144"}], ",", 
   RowBox[{"5", "\[Rule]", "40"}], ",", 
   RowBox[{"4", "\[Rule]", "11"}], ",", 
   RowBox[{"3", "\[Rule]", "2"}], ",", 
   RowBox[{"11", "\[Rule]", "8"}], ",", 
   RowBox[{"12", "\[Rule]", "1"}]}], "\[RightAssociation]"}]], "Output",
 CellChangeTimes->{3.8033081353443832`*^9},
 CellLabel->
  "Out[2380]=",ExpressionUUID->"d2acc741-5942-4555-bd32-de7578864e91"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["chemicalGenerator"], "Input",
 CellChangeTimes->{{3.8033115555134563`*^9, 3.80331155898458*^9}},
 CellLabel->
  "In[2445]:=",ExpressionUUID->"d987c821-bfca-4062-8942-d2a7e3784f18"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "3" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{16}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT], 
                    "$ArrayDimensions" -> {16}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1726884325]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1726884325], 
                    "$Shape" -> NeuralNetworks`TensorT[{16}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1594686823]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1726884325], 16}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{16}, NeuralNetworks`AtomT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 16, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 16, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1594686823]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, 
                    "$WeightsInputChannels" -> 16], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1532308701]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1532308701], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1594686823], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 128, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1532308701]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1375653168]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "BatchNormalization", "Arrays" -> 
                    Association[
                    "Scaling" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingMean" -> NeuralNetworks`Private`DummyArray[{128}], 
                    "MovingVariance" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "Momentum" -> 0.9, "Epsilon" -> 0.001, "Interleaving" -> 
                    True, "$Channels" -> 128, "$SpatialDimensions" -> {
                    NeuralNetworks`LengthVar[1375653168]}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association[
                    "LearningRateMultipliers" -> {
                    "Scaling" -> 0, "Biases" -> 0, Blank[] -> 1}]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1375653168], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1532308701], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1375653168], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1425133732]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1425133732], 
                    "$Shape" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2123566858]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1425133732], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1375653168], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{26, 128}],
                     "Biases" -> NeuralNetworks`Private`DummyArray[{26}]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 128, "$InputDimensions" -> {128}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[2123566858], "$InputShape" -> 
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NeuralNetworks`Private`DummyArray[{28}]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 2}}, "Padding" -> 0., 
                    "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2123566858], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[2123566858], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1624397672]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2123566858], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1624397672], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1739322899]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1624397672], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 16}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Outputs", "Output"}, 
                   NeuralNetworks`Private`NetChain`part = {
                    "Outputs", "Output"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1739322899], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[332917232], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos latent\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]16\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"remove eos/sos prediction\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"squash\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos onehot proba\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"expression\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    395., {98.172119140625, 103.827880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803311559320251*^9},
 CellLabel->
  "Out[2445]=",ExpressionUUID->"1b255a0e-b5d1-4381-8c3b-e65fbaa51fd4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Dimensions", "@", "distancesLog"}]], "Input",
 CellChangeTimes->{{3.803213569775399*^9, 3.803213573674439*^9}, {
  3.803213651796956*^9, 3.803213653932762*^9}},
 CellLabel->
  "In[1714]:=",ExpressionUUID->"8c169635-8e13-48c4-9443-66dcd5b3fb4a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"401", ",", "2"}], "}"}]], "Output",
 CellChangeTimes->{3.803213654239852*^9},
 CellLabel->
  "Out[1714]=",ExpressionUUID->"0f95ce1b-a2f8-4f13-8a9a-5b4b785f7358"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"example", " ", "=", " ", 
  RowBox[{"distancesLog", "[", 
   RowBox[{"[", "1", "]"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803213763937107*^9, 3.803213786037839*^9}, {
  3.8032138188734818`*^9, 3.803213888655376*^9}},
 CellLabel->
  "In[1722]:=",ExpressionUUID->"d87787ca-e9b7-41e6-8b81-106b5584e683"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "10", ",", "\<\"{0.32535726664229236, 0.15601058065378037, \
0.07459857317128638, 0.04126626256015905, 0.03402261102437947}\"\>"}], 
  "}"}]], "Output",
 CellChangeTimes->{{3.803213765641835*^9, 3.803213786651606*^9}, {
  3.8032138517805853`*^9, 3.803213889019145*^9}},
 CellLabel->
  "Out[1722]=",ExpressionUUID->"3d47b272-8043-46bc-bbf9-48daa5b0f009"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"example", "[", 
   RowBox[{"[", "2", "]"}], "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"distancesLog", "[", 
    RowBox[{"[", 
     RowBox[{"All", ",", "2"}], "]"}], "]"}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"toInt", "[", "n_", "]"}], " ", ":=", " ", 
    RowBox[{
     RowBox[{
      RowBox[{"ToExpression", "[", "#", "]"}], "&"}], "/@", 
     RowBox[{"StringSplit", "[", 
      RowBox[{
       RowBox[{"StringTrim", "[", 
        RowBox[{"n", ",", 
         RowBox[{"\"\<{\>\"", " ", "|", " ", "\"\<}\>\""}]}], "]"}], ",", 
       "\"\<,\>\""}], "]"}]}]}], ";"}], 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"b", " ", "=", " ", 
   RowBox[{"distancesLog", "[", 
    RowBox[{"[", 
     RowBox[{"1", ",", "2"}], "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"toInt", "[", "b", "]"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"distancesLogUpdated", " ", "=", " ", 
   RowBox[{
    RowBox[{
     RowBox[{"toInt", "[", "#", "]"}], "&"}], "/@", " ", 
    RowBox[{"distancesLog", "[", 
     RowBox[{"[", 
      RowBox[{"All", ",", "2"}], "]"}], "]"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"distancesLogUpdated", " ", "=", " ", 
  RowBox[{"MapIndexed", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"Flatten", "@", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"#2", " ", "*", " ", "10"}], "}"}], ",", 
        RowBox[{"{", "#1", "}"}]}], "]"}]}], "&"}], ",", 
    "distancesLogUpdated"}], "]"}]}], "\[IndentingNewLine]"}], "Input",
 CellChangeTimes->{{3.803213891179331*^9, 3.8032139436394444`*^9}, {
  3.803213980890193*^9, 3.803214005515738*^9}, {3.8032140632675037`*^9, 
  3.80321406375266*^9}, {3.803214166122808*^9, 3.803214373736848*^9}, {
  3.8032144087567673`*^9, 3.80321456330411*^9}, {3.803214799418621*^9, 
  3.803214802350213*^9}, {3.8032148805966587`*^9, 3.803214901503195*^9}},
 CellLabel->
  "In[2529]:=",ExpressionUUID->"22e4600f-89de-405f-b508-dc6cab62dd67"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "10", ",", "0.2260990191139683`", ",", "0.1349752326228955`", ",", 
     "0.07487194047004117`", ",", "0.04531706082055126`", ",", 
     "0.03346157738856893`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "20", ",", "0.20253169930290912`", ",", "0.11924150742082033`", ",", 
     "0.06956829122257897`", ",", "0.043207136611316595`", ",", 
     "0.03303678300962365`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "30", ",", "0.18921072865634378`", ",", "0.11336558523553047`", ",", 
     "0.06891315271472571`", ",", "0.04228979173146935`", ",", 
     "0.034545199858851`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "40", ",", "0.46800405271950724`", ",", "0.3434562304066242`", ",", 
     "0.21548530536486143`", ",", "0.14096547991729164`", ",", 
     "0.09330415256915882`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "50", ",", "0.4227155243087491`", ",", "0.3054819325337333`", ",", 
     "0.18544271773451326`", ",", "0.11192060473869134`", ",", 
     "0.07161987524278819`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "60", ",", "0.3564803778844296`", ",", "0.2295317287647981`", ",", 
     "0.1294251434083561`", ",", "0.07867923619228596`", ",", 
     "0.04571298371991774`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "70", ",", "0.28954972385316874`", ",", "0.16506854295979126`", ",", 
     "0.08510305657258711`", ",", "0.049919895512399295`", ",", 
     "0.03444308032219644`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "80", ",", "0.3121847195482494`", ",", "0.19710792700742538`", ",", 
     "0.11072920679903928`", ",", "0.0641437777587188`", ",", 
     "0.03874775752248278`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "90", ",", "0.30874407885035793`", ",", "0.17907210345336785`", ",", 
     "0.09577820899282043`", ",", "0.05486341765874425`", ",", 
     "0.036053901597993473`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "100", ",", "0.27351111768901365`", ",", "0.15967019697804205`", ",", 
     "0.09002035004390635`", ",", "0.052372083022105345`", ",", 
     "0.033396880938118136`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "110", ",", "0.14672816337168346`", ",", "0.09759812976242226`", ",", 
     "0.061149841755591884`", ",", "0.042036836978939805`", ",", 
     "0.031935476176612694`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "120", ",", "0.2795904763788539`", ",", "0.14731114091463454`", ",", 
     "0.0748005233833552`", ",", "0.04614174763671199`", ",", 
     "0.03335955988675173`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "130", ",", "0.3749625110203489`", ",", "0.22741397972119545`", ",", 
     "0.12105279593253099`", ",", "0.07288430608411044`", ",", 
     "0.04463560036414156`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "140", ",", "0.34676516793831547`", ",", "0.23597360835415346`", ",", 
     "0.14061060171881273`", ",", "0.08142920304640952`", ",", 
     "0.05440056712141058`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "150", ",", "0.285563309601295`", ",", "0.1933760926327949`", ",", 
     "0.11760562527439904`", ",", "0.06303450850861032`", ",", 
     "0.04242802605897699`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "160", ",", "0.21744143730953114`", ",", "0.16209052771924248`", ",", 
     "0.09668131414871896`", ",", "0.05485969732555146`", ",", 
     "0.03583340911643463`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "170", ",", "0.11014996256070188`", ",", "0.08868493509047824`", ",", 
     "0.061441378912044924`", ",", "0.04029180025966621`", ",", 
     "0.032704591320949904`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "180", ",", "0.1581277457941898`", ",", "0.10685901635361668`", ",", 
     "0.07062741765101753`", ",", "0.04864768033198152`", ",", 
     "0.03373626211253675`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "190", ",", "0.13523578795689067`", ",", "0.09546732392922344`", ",", 
     "0.06587699286139576`", ",", "0.044896846175707286`", ",", 
     "0.03163155270074501`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "200", ",", "0.11477929613074422`", ",", "0.08670365687885065`", ",", 
     "0.061298595962537894`", ",", "0.04138352403577516`", ",", 
     "0.03172485939081478`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "210", ",", "0.10269174465312361`", ",", "0.08192958529748573`", ",", 
     "0.06123956383706094`", ",", "0.04189847577292683`", ",", 
     "0.0327116619105401`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "220", ",", "0.11518928796925867`", ",", "0.08929914148668099`", ",", 
     "0.05861478874365655`", ",", "0.04096280967748873`", ",", 
     "0.03184770031785241`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "230", ",", "0.08838564365889366`", ",", "0.08181041261742827`", ",", 
     "0.05643976788369863`", ",", "0.03839171948669164`", ",", 
     "0.03234788119414738`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "240", ",", "0.18667755014822218`", ",", "0.11399201037653489`", ",", 
     "0.06842370859804356`", ",", "0.04246237630945854`", ",", 
     "0.03119803228188022`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "250", ",", "0.15945586383899568`", ",", "0.11330829579090304`", ",", 
     "0.06336125252151222`", ",", "0.04230123158072107`", ",", 
     "0.031117562139521878`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "260", ",", "0.1765650230757286`", ",", "0.10169676748393319`", ",", 
     "0.06340800429248078`", ",", "0.04049510061618469`", ",", 
     "0.03223961186856923`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "270", ",", "0.3815809151964511`", ",", "0.1956399932453236`", ",", 
     "0.10216798435733945`", ",", "0.06117936848873423`", ",", 
     "0.041068027755003546`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "280", ",", "0.3384959111509623`", ",", "0.1958785801406675`", ",", 
     "0.13031889599611554`", ",", "0.0701570339373712`", ",", 
     "0.05145007905149691`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "290", ",", "0.36253659788464315`", ",", "0.23827409799050858`", ",", 
     "0.17340474764809713`", ",", "0.10563346637260793`", ",", 
     "0.06984867697244232`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "300", ",", "0.22688151527328299`", ",", "0.13749288378219512`", ",", 
     "0.08957741413188883`", ",", "0.05264309229949257`", ",", 
     "0.034816615813014734`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "310", ",", "0.22858954560843747`", ",", "0.16465669068397282`", ",", 
     "0.09408973756602138`", ",", "0.05713520212311275`", ",", 
     "0.03659378010387918`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "320", ",", "0.18775048064443683`", ",", "0.13336414589328027`", ",", 
     "0.0763755147420896`", ",", "0.048553092857306156`", ",", 
     "0.03518178418401488`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "330", ",", "0.2117820339671984`", ",", "0.14175161690903887`", ",", 
     "0.08387256467469348`", ",", "0.04747516009042695`", ",", 
     "0.03323941475060554`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "340", ",", "0.22359758881133163`", ",", "0.13686450650200924`", ",", 
     "0.0759694819092513`", ",", "0.04785912938785893`", ",", 
     "0.03478507640157352`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "350", ",", "0.12947568018889893`", ",", "0.0985318966481199`", ",", 
     "0.06407214557962612`", ",", "0.04176979391293986`", ",", 
     "0.03178104670659327`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "360", ",", "0.22504932184006157`", ",", "0.14300569572525962`", ",", 
     "0.07639936077948206`", ",", "0.04833696893553188`", ",", 
     "0.034578826316577486`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "370", ",", "0.22422651571410673`", ",", "0.13423959630877733`", ",", 
     "0.07226190241465316`", ",", "0.047686463108692866`", ",", 
     "0.033608061638085905`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "380", ",", "0.0816997647640306`", ",", "0.07690549713117655`", ",", 
     "0.05478546665799976`", ",", "0.040732787815690764`", ",", 
     "0.029681903393754306`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "390", ",", "0.09594570895419179`", ",", "0.08127094413292432`", ",", 
     "0.05297287347102074`", ",", "0.03909082436756195`", ",", 
     "0.030410421721435342`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "400", ",", "0.09650768305291543`", ",", "0.08392000457737447`", ",", 
     "0.05615297178236741`", ",", "0.04074176677970945`", ",", 
     "0.030008725434297362`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "410", ",", "0.08085896563818638`", ",", "0.08242978627852325`", ",", 
     "0.05582362759772937`", ",", "0.0394334912366537`", ",", 
     "0.031171984539092267`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "420", ",", "0.1623580362878938`", ",", "0.10721421831707606`", ",", 
     "0.06253712547077456`", ",", "0.0412373029163375`", ",", 
     "0.030645384621098636`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "430", ",", "0.11091704330692936`", ",", "0.07893573049492215`", ",", 
     "0.05527230154977369`", ",", "0.04004646901981357`", ",", 
     "0.030539848565837815`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "440", ",", "0.2614617342522637`", ",", "0.1403581007083411`", ",", 
     "0.08174120571424438`", ",", "0.05216280234912912`", ",", 
     "0.034784051494829465`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "450", ",", "0.18121573563963786`", ",", "0.10964529958713486`", ",", 
     "0.06387116107176373`", ",", "0.04356070301965822`", ",", 
     "0.03166181264833953`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "460", ",", "0.18877014718628415`", ",", "0.12016410109516913`", ",", 
     "0.06902474342938712`", ",", "0.0420727295278639`", ",", 
     "0.032114911443905644`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "470", ",", "0.23253147824923875`", ",", "0.146858958109986`", ",", 
     "0.0784662821038265`", ",", "0.04484574987706554`", ",", 
     "0.031391132552007234`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "480", ",", "0.20376906258681324`", ",", "0.12735169387734027`", ",", 
     "0.07488396992092762`", ",", "0.04581215702522994`", ",", 
     "0.03240513983887187`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "490", ",", "0.16483961499909952`", ",", "0.1257164831601369`", ",", 
     "0.07350363953169373`", ",", "0.04584780884067616`", ",", 
     "0.03434136709910393`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "500", ",", "0.11330369499513628`", ",", "0.10577643847640555`", ",", 
     "0.06369116059206388`", ",", "0.042506564829515384`", ",", 
     "0.03110766239627177`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "510", ",", "0.1091072271035063`", ",", "0.09473135855684964`", ",", 
     "0.05985800635576963`", ",", "0.04296697830917137`", ",", 
     "0.03233520825403282`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "520", ",", "0.11391034467111409`", ",", "0.08745519378041869`", ",", 
     "0.05596276564050951`", ",", "0.039907656845163064`", ",", 
     "0.03279224953561227`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "530", ",", "0.10790184527936009`", ",", "0.08766065430762748`", ",", 
     "0.05723779523997169`", ",", "0.04157355528505487`", ",", 
     "0.030234205441819956`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "540", ",", "0.09268379715068112`", ",", "0.08339167017744184`", ",", 
     "0.05981574894736591`", ",", "0.0425103722279816`", ",", 
     "0.03193044153124211`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "550", ",", "0.09534661851238066`", ",", "0.08215658108675356`", ",", 
     "0.05906554904632571`", ",", "0.04073440438358297`", ",", 
     "0.030869476349024462`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "560", ",", "0.07485007425789553`", ",", "0.07977734350737385`", ",", 
     "0.05646257367557849`", ",", "0.03930146254849528`", ",", 
     "0.03149653928653313`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "570", ",", "0.08956286061943879`", ",", "0.08376219912228526`", ",", 
     "0.057312599905777806`", ",", "0.040506843383768275`", ",", 
     "0.030847295769754354`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "580", ",", "0.07312978942183657`", ",", "0.07742688019769936`", ",", 
     "0.05674078447261452`", ",", "0.041026573972902075`", ",", 
     "0.030898946869968788`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "590", ",", "0.06275144545602505`", ",", "0.07124338085054509`", ",", 
     "0.05131402560671502`", ",", "0.04113053577001693`", ",", 
     "0.0322595527041488`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "600", ",", "0.06750498058470948`", ",", "0.06861414819926244`", ",", 
     "0.05083199517853387`", ",", "0.0389572439194453`", ",", 
     "0.03182242180354616`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "610", ",", "0.12743369017067505`", ",", "0.08227536876538162`", ",", 
     "0.05774361476304803`", ",", "0.040475065074524454`", ",", 
     "0.030827865028904104`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "620", ",", "0.09435515619002882`", ",", "0.08008037718264699`", ",", 
     "0.05206164885295837`", ",", "0.03951345070665832`", ",", 
     "0.029882364907934077`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "630", ",", "0.06410744263637294`", ",", "0.06628208715418783`", ",", 
     "0.04950757963249531`", ",", "0.03828553471273261`", ",", 
     "0.03423687905870378`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "640", ",", "0.0708110800431565`", ",", "0.07100460337891458`", ",", 
     "0.0514202816079105`", ",", "0.036853597715387786`", ",", 
     "0.030616454301195094`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "650", ",", "0.07000902090913438`", ",", "0.07018794415540311`", ",", 
     "0.0504715075920537`", ",", "0.03863315104614294`", ",", 
     "0.03233961703593922`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "660", ",", "0.1274839657019334`", ",", "0.09557270264358231`", ",", 
     "0.06044332213582357`", ",", "0.04117415278663936`", ",", 
     "0.032579884423607194`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "670", ",", "0.10488339599829334`", ",", "0.08130239450490025`", ",", 
     "0.0543630010351693`", ",", "0.040685724707240044`", ",", 
     "0.03182189168468402`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "680", ",", "0.07529291697493688`", ",", "0.07001661588396245`", ",", 
     "0.052880272836672654`", ",", "0.03823481295484302`", ",", 
     "0.032330636854363354`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "690", ",", "0.1600540394520527`", ",", "0.10254430856789688`", ",", 
     "0.05934383748858547`", ",", "0.04141392398438351`", ",", 
     "0.033105952524816726`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "700", ",", "0.06840029224612587`", ",", "0.06782429859601663`", ",", 
     "0.04707977250534982`", ",", "0.03741193541833488`", ",", 
     "0.0320602090573387`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "710", ",", "0.0796810863353715`", ",", "0.07258256802326087`", ",", 
     "0.05066632141111601`", ",", "0.037584624620960856`", ",", 
     "0.03074793817203588`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "720", ",", "0.05704695044403355`", ",", "0.0682265316165619`", ",", 
     "0.044642299508447496`", ",", "0.03747739495999405`", ",", 
     "0.03061994728943909`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "730", ",", "0.058144610544401704`", ",", "0.06569241536359019`", ",", 
     "0.04626357476606558`", ",", "0.03732718109335447`", ",", 
     "0.029936507197373636`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "740", ",", "0.2205655219828913`", ",", "0.1412114268227961`", ",", 
     "0.08304366987478538`", ",", "0.05281377342055156`", ",", 
     "0.035191666248184504`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "750", ",", "0.06354698564408667`", ",", "0.06375571563117942`", ",", 
     "0.04769521398805454`", ",", "0.03954225618353168`", ",", 
     "0.029266232301679813`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "760", ",", "0.04561686751588875`", ",", "0.06051281869992653`", ",", 
     "0.04274339859746595`", ",", "0.035553037999463986`", ",", 
     "0.029895089971193372`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "770", ",", "0.054850043233989045`", ",", "0.05604053601905548`", ",", 
     "0.04522630659826739`", ",", "0.03779869576648989`", ",", 
     "0.030398006286715643`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "780", ",", "0.053601507267618136`", ",", "0.06169503061659669`", ",", 
     "0.04336464559557746`", ",", "0.03630446253846374`", ",", 
     "0.031768336779038384`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "790", ",", "0.04942141127392938`", ",", "0.05644957573220762`", ",", 
     "0.04348117957439264`", ",", "0.035687918350159886`", ",", 
     "0.03052697826310049`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "800", ",", "0.051587362621811364`", ",", "0.06254466878485346`", ",", 
     "0.04561065055720517`", ",", "0.036484166226168464`", ",", 
     "0.0304350224730493`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "810", ",", "0.06016468601284189`", ",", "0.06222787421437302`", ",", 
     "0.046523156974089305`", ",", "0.035497042621849925`", ",", 
     "0.03146944356148529`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "820", ",", "0.05161217215771282`", ",", "0.0601907877396688`", ",", 
     "0.04563852913979929`", ",", "0.036206822000262796`", ",", 
     "0.029635418876540243`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "830", ",", "0.04583862734585243`", ",", "0.05914844429761116`", ",", 
     "0.04646075366057432`", ",", "0.03662451666088728`", ",", 
     "0.029868544036767593`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "840", ",", "0.048146727850996975`", ",", "0.0625772783731192`", ",", 
     "0.047699320551546694`", ",", "0.036888360497555756`", ",", 
     "0.02976440054404366`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "850", ",", "0.04442569213611189`", ",", "0.05915954565471058`", ",", 
     "0.045919735092545225`", ",", "0.035740130354998914`", ",", 
     "0.03209103094874269`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "860", ",", "0.04572459655207778`", ",", "0.05860699283749094`", ",", 
     "0.047272199156261505`", ",", "0.037939377960565984`", ",", 
     "0.029741967339599478`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "870", ",", "0.03860011785293409`", ",", "0.057685509041885984`", ",", 
     "0.047549485357370185`", ",", "0.03840624916061662`", ",", 
     "0.029822485575767572`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "880", ",", "0.029194427868261347`", ",", "0.055033217813479`", ",", 
     "0.04454504066403361`", ",", "0.03449516341167247`", ",", 
     "0.03192122346614008`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "890", ",", "0.03622800503778334`", ",", "0.050329861172780044`", ",", 
     "0.04327967452929167`", ",", "0.034539174548975614`", ",", 
     "0.02966285324351635`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "900", ",", "0.03980947062550356`", ",", "0.051306664768100835`", ",", 
     "0.04265883930291046`", ",", "0.03674179125700795`", ",", 
     "0.030410564586922584`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "910", ",", "0.06308776306077961`", ",", "0.05401636625161495`", ",", 
     "0.04285822188342867`", ",", "0.03463959802806357`", ",", 
     "0.02980882771413505`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "920", ",", "0.05253179172665827`", ",", "0.051192472227344236`", ",", 
     "0.04072745017711165`", ",", "0.03311333599718305`", ",", 
     "0.029272003757702374`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "930", ",", "0.02906755854673425`", ",", "0.0449381978179438`", ",", 
     "0.03748732483990152`", ",", "0.034705733110963935`", ",", 
     "0.029539237236556413`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "940", ",", "0.02577084002023037`", ",", "0.041441882665467444`", ",", 
     "0.03715484960457078`", ",", "0.032271375083586185`", ",", 
     "0.029988596717829444`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "950", ",", "0.02303028752791385`", ",", "0.03551197032411619`", ",", 
     "0.03556355608586026`", ",", "0.03499956070856947`", ",", 
     "0.030220976495709193`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "960", ",", "0.02253816436591295`", ",", "0.04029735621542498`", ",", 
     "0.035570363103008984`", ",", "0.03282224568117721`", ",", 
     "0.03055561786174279`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "970", ",", "0.028841925535236533`", ",", "0.03934829195381182`", ",", 
     "0.03666712724918114`", ",", "0.03232768798754673`", ",", 
     "0.02987466998747676`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "980", ",", "0.028869804038361833`", ",", "0.035897923049679245`", ",", 
     "0.037200419882499385`", ",", "0.0314875350005371`", ",", 
     "0.030426958757613143`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "990", ",", "0.029958559743509666`", ",", "0.03722448875670839`", ",", 
     "0.038709198216593625`", ",", "0.03171432452007653`", ",", 
     "0.03074397269219056`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1000", ",", "0.023994006887698295`", ",", "0.03850679368073357`", ",", 
     "0.03798477218541669`", ",", "0.03362605954499189`", ",", 
     "0.028103269713189986`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1010", ",", "0.020275605434479954`", ",", "0.03296436152653801`", ",", 
     "0.033140450860064556`", ",", "0.03133896441132809`", ",", 
     "0.030009975819868893`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1020", ",", "0.015141471233128147`", ",", "0.034093616559967566`", ",", 
     "0.03611031272899773`", ",", "0.03296004101460407`", ",", 
     "0.029355476364998467`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1030", ",", "0.027712744971398227`", ",", "0.0336757724297444`", ",", 
     "0.034448788356860584`", ",", "0.0312408062859815`", ",", 
     "0.030837244173950656`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1040", ",", "0.026287533454472274`", ",", "0.03237217996437905`", ",", 
     "0.03435983904885427`", ",", "0.03256376033410424`", ",", 
     "0.031109452005803808`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1050", ",", "0.024508989450540898`", ",", "0.033665312248661344`", ",", 
     "0.036319714847003276`", ",", "0.0315335755895421`", ",", 
     "0.03123644843458071`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1060", ",", "0.02065420063141577`", ",", "0.03498779493595088`", ",", 
     "0.03522807809934446`", ",", "0.03282543746402061`", ",", 
     "0.02874211997508152`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1070", ",", "0.020018008494388197`", ",", "0.03456288215001631`", ",", 
     "0.03637711151602976`", ",", "0.03139778885528201`", ",", 
     "0.03127745767385929`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1080", ",", "0.01988269983647251`", ",", "0.0342277389675018`", ",", 
     "0.03346946392715558`", ",", "0.032329242392721336`", ",", 
     "0.03173016716326584`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1090", ",", "0.017168146373724623`", ",", "0.029414799457230932`", ",", 
     "0.03507735091737466`", ",", "0.03369933249637158`", ",", 
     "0.028974937638243176`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1100", ",", "0.022581437512579794`", ",", "0.03310223800385793`", ",", 
     "0.03657829160076169`", ",", "0.03424596519136146`", ",", 
     "0.029085183363391345`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1110", ",", "0.02453434476199337`", ",", "0.03216806115528422`", ",", 
     "0.03615378911690848`", ",", "0.032674615047307155`", ",", 
     "0.031131833407839666`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1120", ",", "0.021258317557828327`", ",", "0.032396250125031334`", ",", 
     "0.03430471757877336`", ",", "0.03256921286930313`", ",", 
     "0.029407970060114082`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1130", ",", "0.025365890041829327`", ",", "0.033650142691641995`", ",", 
     "0.03291798296691125`", ",", "0.03439534814810948`", ",", 
     "0.028100869799260214`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1140", ",", "0.017434839620395482`", ",", "0.03375611915273368`", ",", 
     "0.03430928442696952`", ",", "0.03281214959139666`", ",", 
     "0.028242714093872953`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1150", ",", "0.02224974235938938`", ",", "0.03236777774802985`", ",", 
     "0.0333211114200079`", ",", "0.03099134823344533`", ",", 
     "0.02920930609745125`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1160", ",", "0.016674120000901006`", ",", "0.03341642934386908`", ",", 
     "0.03501648925781446`", ",", "0.030954540231552582`", ",", 
     "0.029170311165316126`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1170", ",", "0.016709236314842012`", ",", "0.02999991953444249`", ",", 
     "0.03548106630299712`", ",", "0.032180935910872566`", ",", 
     "0.029582909488563434`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1180", ",", "0.020834846614038248`", ",", "0.033539729845838126`", ",", 
     "0.03418683183896304`", ",", "0.03396805791033192`", ",", 
     "0.029354263733815777`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1190", ",", "0.01773252975622349`", ",", "0.03254995749697309`", ",", 
     "0.035136217598978274`", ",", "0.030732310286448954`", ",", 
     "0.02873977393706839`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1200", ",", "0.019461968615779014`", ",", "0.03199308104837557`", ",", 
     "0.03652948709377921`", ",", "0.032285232046666584`", ",", 
     "0.02984704659944654`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1210", ",", "0.023376373446697463`", ",", "0.035081675188062704`", ",", 
     "0.033344781596600426`", ",", "0.03219590671831215`", ",", 
     "0.028831077699531363`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1220", ",", "0.026087061441821366`", ",", "0.03479202795619458`", ",", 
     "0.03713992786181765`", ",", "0.0335539421889057`", ",", 
     "0.030197490018664515`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1230", ",", "0.02008353753612021`", ",", "0.031533875011935414`", ",", 
     "0.03444673245549329`", ",", "0.03093883558232754`", ",", 
     "0.029824250752123863`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1240", ",", "0.017952834248730842`", ",", "0.03713724273597801`", ",", 
     "0.03604441844749905`", ",", "0.03384648564688611`", ",", 
     "0.02976225398572467`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1250", ",", "0.021642555746110865`", ",", "0.03330250295129575`", ",", 
     "0.03508564070493795`", ",", "0.03140425942321998`", ",", 
     "0.030039301372362315`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1260", ",", "0.024107321598322802`", ",", "0.03348970634295209`", ",", 
     "0.03584740659138122`", ",", "0.03229329972692072`", ",", 
     "0.029787897481365958`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1270", ",", "0.021895975225462865`", ",", "0.03107782547467`", ",", 
     "0.03343158116312118`", ",", "0.03258988857632836`", ",", 
     "0.029156724049775994`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1280", ",", "0.0207025661499185`", ",", "0.03209458837232058`", ",", 
     "0.035837754652980766`", ",", "0.031288488486381195`", ",", 
     "0.028689139574687328`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1290", ",", "0.023152738866478402`", ",", "0.03333094454096196`", ",", 
     "0.03485408704766881`", ",", "0.032687244367866575`", ",", 
     "0.030629873264038817`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1300", ",", "0.027400146208057075`", ",", "0.03182545550860567`", ",", 
     "0.03707363030110236`", ",", "0.031407216763406194`", ",", 
     "0.02841199265227463`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1310", ",", "0.025767137399939417`", ",", "0.03425090549164783`", ",", 
     "0.035412728135892434`", ",", "0.03245866044149853`", ",", 
     "0.028505949608660142`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1320", ",", "0.022002159888652735`", ",", "0.036078321575339724`", ",", 
     "0.034765380545711974`", ",", "0.03494853587456945`", ",", 
     "0.029115507656186496`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1330", ",", "0.026929868836665673`", ",", "0.032042672145394205`", ",", 
     "0.03603413468086788`", ",", "0.03249661405707732`", ",", 
     "0.02804100578424975`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1340", ",", "0.019055561001656326`", ",", "0.03266852100917197`", ",", 
     "0.03438762801226243`", ",", "0.03146253034843086`", ",", 
     "0.03088886378566609`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1350", ",", "0.025703997047290556`", ",", "0.032376396553125956`", ",", 
     "0.034724790028691006`", ",", "0.03231058282476354`", ",", 
     "0.029355163001964578`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1360", ",", "0.025892574855938752`", ",", "0.03348838483429138`", ",", 
     "0.03559438654493117`", ",", "0.03175211756852098`", ",", 
     "0.03013697978298463`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1370", ",", "0.021581007042409305`", ",", "0.03234330089535489`", ",", 
     "0.03384036761819077`", ",", "0.032137865251628914`", ",", 
     "0.029299238425651433`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1380", ",", "0.02622707014819192`", ",", "0.033533773109957414`", ",", 
     "0.03365517769078291`", ",", "0.03253649586296913`", ",", 
     "0.029820823830647235`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1390", ",", "0.02491175205148258`", ",", "0.03102504387606776`", ",", 
     "0.03216635958574468`", ",", "0.03136868602575874`", ",", 
     "0.029493234831452383`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1400", ",", "0.020075744325146593`", ",", "0.03354300163851221`", ",", 
     "0.03383778338276234`", ",", "0.032830506682478146`", ",", 
     "0.030837892362766475`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1410", ",", "0.019143154601518414`", ",", "0.031657724649447994`", ",", 
     "0.03412130180961454`", ",", "0.03153961899552619`", ",", 
     "0.029269105589492615`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1420", ",", "0.02604760458832023`", ",", "0.032285194983283694`", ",", 
     "0.03278015637537693`", ",", "0.030251684021920747`", ",", 
     "0.030835969960672185`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1430", ",", "0.021588604399987887`", ",", "0.03232025545204776`", ",", 
     "0.0333307512489825`", ",", "0.03199769551169304`", ",", 
     "0.029931462888847765`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1440", ",", "0.026955402330747724`", ",", "0.03498763750634795`", ",", 
     "0.035261209742824276`", ",", "0.03246170365088866`", ",", 
     "0.030543243978972283`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1450", ",", "0.024227506129894726`", ",", "0.03417797822099392`", ",", 
     "0.03499127573669736`", ",", "0.03125631267634888`", ",", 
     "0.029014492248418636`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1460", ",", "0.023859178077814357`", ",", "0.03019892520054436`", ",", 
     "0.03452330574417484`", ",", "0.02974532727478411`", ",", 
     "0.02942857140305676`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1470", ",", "0.023690888783325318`", ",", "0.03245850476923566`", ",", 
     "0.03554440218691045`", ",", "0.03203633386584933`", ",", 
     "0.031022093989520785`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1480", ",", "0.02438349382731007`", ",", "0.036156284878987234`", ",", 
     "0.0385421256655185`", ",", "0.032308226663868275`", ",", 
     "0.031030714952024783`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1490", ",", "0.027016049299651776`", ",", "0.03604302105546247`", ",", 
     "0.03468271368074372`", ",", "0.03247627108860119`", ",", 
     "0.028588529005055926`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1500", ",", "0.030156562849712465`", ",", "0.033193034807862246`", ",", 
     "0.03699374430598007`", ",", "0.033361124187894164`", ",", 
     "0.029590432974236545`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1510", ",", "0.027237283785854344`", ",", "0.03603019773304493`", ",", 
     "0.03582945886905743`", ",", "0.032722039266060717`", ",", 
     "0.030618746035450232`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1520", ",", "0.029439066110058573`", ",", "0.034720216860172286`", ",", 
     "0.03371338238638647`", ",", "0.033217210765380624`", ",", 
     "0.03155288774647003`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1530", ",", "0.025640595963014674`", ",", "0.03406788113690092`", ",", 
     "0.03634865691674813`", ",", "0.031995801814663744`", ",", 
     "0.028995875986834698`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1540", ",", "0.025440309420594578`", ",", "0.03580970618652639`", ",", 
     "0.036793006818970415`", ",", "0.032263952402128517`", ",", 
     "0.028727941130709422`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1550", ",", "0.03166272149119649`", ",", "0.035119234692853586`", ",", 
     "0.033332301887068275`", ",", "0.031829811701632627`", ",", 
     "0.029768383166353368`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1560", ",", "0.027329108155425476`", ",", "0.037609118001689604`", ",", 
     "0.036197524997247967`", ",", "0.03132184270095438`", ",", 
     "0.029856595301724395`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1570", ",", "0.030977218375823182`", ",", "0.03533870246405336`", ",", 
     "0.035629637850960155`", ",", "0.032695072294146886`", ",", 
     "0.031410904068983336`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1580", ",", "0.02987832773571725`", ",", "0.03420807062415829`", ",", 
     "0.03481135395013867`", ",", "0.031868088441487315`", ",", 
     "0.028422595659556477`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1590", ",", "0.0310391846593195`", ",", "0.03457439469227859`", ",", 
     "0.0379390296982067`", ",", "0.03207937971057152`", ",", 
     "0.028529763384350412`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1600", ",", "0.02674318145615775`", ",", "0.036465824463617236`", ",", 
     "0.03601643043881596`", ",", "0.03236062781113223`", ",", 
     "0.029933241766825488`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1610", ",", "0.021477087273271165`", ",", "0.03534827193167381`", ",", 
     "0.033235113635282754`", ",", "0.032442345204231546`", ",", 
     "0.028474232065537758`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1620", ",", "0.027384747774059512`", ",", "0.035625743776918364`", ",", 
     "0.03698059767500192`", ",", "0.03219796163139765`", ",", 
     "0.028685239689547375`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1630", ",", "0.03038689501150321`", ",", "0.03210099251807633`", ",", 
     "0.03746811243874976`", ",", "0.0328165644919462`", ",", 
     "0.029477434057575483`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1640", ",", "0.033166941334917543`", ",", "0.03785315878137831`", ",", 
     "0.036045571705581196`", ",", "0.033679376005801016`", ",", 
     "0.029986348584806165`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1650", ",", "0.029884188759427333`", ",", "0.0360082830159145`", ",", 
     "0.03502294210380727`", ",", "0.03274038787733047`", ",", 
     "0.029252679784346914`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1660", ",", "0.029729954131720037`", ",", "0.034648156180019866`", ",", 
     "0.03675111256486913`", ",", "0.03276281057983295`", ",", 
     "0.028818122669784632`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1670", ",", "0.02229070920833671`", ",", "0.03709363833808162`", ",", 
     "0.03519012628009504`", ",", "0.03030368495195365`", ",", 
     "0.028282579153549894`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1680", ",", "0.02848735949306258`", ",", "0.03530100877176512`", ",", 
     "0.03461810827431559`", ",", "0.029847150862337985`", ",", 
     "0.02977928352565663`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1690", ",", "0.028620848070154793`", ",", "0.038401252160774155`", ",", 
     "0.035859863456670374`", ",", "0.03306686697864809`", ",", 
     "0.030944532103348334`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1700", ",", "0.026243558466384233`", ",", "0.038941589152470646`", ",", 
     "0.03639284825544827`", ",", "0.033051013670014104`", ",", 
     "0.02938775131085925`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1710", ",", "0.026280017487308963`", ",", "0.03600457327163764`", ",", 
     "0.0365023084287228`", ",", "0.031806002521526135`", ",", 
     "0.03068757281572933`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1720", ",", "0.020855191066426925`", ",", "0.03272913679607486`", ",", 
     "0.03736017581452018`", ",", "0.031227658784393368`", ",", 
     "0.03141382402519286`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1730", ",", "0.023652863295699624`", ",", "0.03727683694277461`", ",", 
     "0.03676803896198553`", ",", "0.03365769273725587`", ",", 
     "0.030727910948793364`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1740", ",", "0.032992037932814994`", ",", "0.03355821363187624`", ",", 
     "0.03511105756711392`", ",", "0.034922370413265576`", ",", 
     "0.02937742315469747`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1750", ",", "0.028069859290420333`", ",", "0.03304436710021935`", ",", 
     "0.03604070889927255`", ",", "0.032379760750567275`", ",", 
     "0.029044772651579606`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1760", ",", "0.029434849783220553`", ",", "0.0392968639439163`", ",", 
     "0.03404085118710244`", ",", "0.030979786173046007`", ",", 
     "0.03029678450903406`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1770", ",", "0.02733041601367903`", ",", "0.038053353202564644`", ",", 
     "0.032938698650382445`", ",", "0.03174161465684565`", ",", 
     "0.03064396084741945`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1780", ",", "0.030581422952557114`", ",", "0.03379784343684112`", ",", 
     "0.03560653161741409`", ",", "0.03270329545924322`", ",", 
     "0.029473236723054456`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1790", ",", "0.026154282958817398`", ",", "0.03542837129682884`", ",", 
     "0.036157404691020696`", ",", "0.03294072803509969`", ",", 
     "0.02818412469027578`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1800", ",", "0.03468225097962705`", ",", "0.03634189740431577`", ",", 
     "0.03389795051999374`", ",", "0.03184273177406037`", ",", 
     "0.029547436415658452`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1810", ",", "0.03075913238708865`", ",", "0.03523101701759599`", ",", 
     "0.03474654208853105`", ",", "0.031759643679270394`", ",", 
     "0.029907977732412574`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1820", ",", "0.03335405043135939`", ",", "0.038961682265711464`", ",", 
     "0.03582675581196056`", ",", "0.03430318702901859`", ",", 
     "0.030060512629245025`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1830", ",", "0.03336371488124037`", ",", "0.03514784694424433`", ",", 
     "0.0345466737312246`", ",", "0.033216942430210755`", ",", 
     "0.028392573146736027`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1840", ",", "0.028604762322051128`", ",", "0.037730443710000824`", ",", 
     "0.03547909650121857`", ",", "0.03307804715404555`", ",", 
     "0.0296474626382872`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1850", ",", "0.02702636405418534`", ",", "0.03418601338728452`", ",", 
     "0.0313425042806435`", ",", "0.03034166608363965`", ",", 
     "0.027648561745496174`"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1860", ",", "0.02760081923191458`", ",", "0.03456099070632693`", ",", 
     "0.035908827698970434`", ",", "0.03303607257769543`", ",", 
     "0.028798672695045564`"}], "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.803314983621376*^9},
 CellLabel->
  "Out[2535]=",ExpressionUUID->"dea6f593-f3fc-4f98-8f5f-734ef399f880"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ToExpression", "[", "b", "]"}]], "Input",
 CellChangeTimes->{{3.803214030957144*^9, 3.803214092695044*^9}},
 CellLabel->
  "In[2536]:=",ExpressionUUID->"e0be400d-b1de-455d-9af4-84fbeaec74bf"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.2260990191139683`", ",", "0.1349752326228955`", ",", 
   "0.07487194047004117`", ",", "0.04531706082055126`", ",", 
   "0.03346157738856893`"}], "}"}]], "Output",
 CellChangeTimes->{3.803315015102009*^9},
 CellLabel->
  "Out[2536]=",ExpressionUUID->"b31cea23-1ce5-4889-af2d-207dfef54b5f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"{", 
   RowBox[{
   "0.32535726664229236`", ",", "0.15601058065378037`", ",", 
    "0.07459857317128638`", ",", "0.04126626256015905`", ",", 
    "0.03402261102437947`"}], "}"}], "\[IndentingNewLine]", 
  "\[IndentingNewLine]"}], "\[IndentingNewLine]", 
 RowBox[{"BarChart", "@", 
  RowBox[{"{", 
   RowBox[{
   "0.32535726664229236`", ",", "0.15601058065378037`", ",", 
    "0.07459857317128638`", ",", "0.04126626256015905`", ",", 
    "0.03402261102437947`"}], "}"}]}]}], "Input",
 CellChangeTimes->{{3.8032963946981487`*^9, 3.80329641176731*^9}},
 CellLabel->
  "In[1884]:=",ExpressionUUID->"5d4479ff-127f-466f-8966-43929ac63945"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.32535726664229236`", ",", "0.15601058065378037`", ",", 
   "0.07459857317128638`", ",", "0.04126626256015905`", ",", 
   "0.03402261102437947`"}], "}"}]], "Output",
 CellChangeTimes->{{3.803296403864071*^9, 3.803296412209304*^9}},
 CellLabel->
  "Out[1884]=",ExpressionUUID->"5fad0290-f7f4-412a-a0ad-49089f121409"],

Cell[BoxData[
 GraphicsBox[{
   {Opacity[0], 
    PointBox[{{0.45075018208302986`, 0.}, {5.451201747997087, 0.}}]}, {{}, 
    {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
     0.6649999999999999], Thickness[Small]}], 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{0.5487982520029133, 0.}, {1.4512017479970867`, 
             0.32535726664229236`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{28.096067838900264`, 
            87.00327369536609}, {-99.12359927506557, 99.02745420871454}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.32535726664229236`]& ,
         TagBoxNote->"0.32535726664229236"],
        StyleBox["0.32535726664229236`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.32535726664229236`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{1.5487982520029133`, 0.}, {2.4512017479970867`, 
             0.15601058065378037`}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{92.82011436103713, 151.72732021750292`}, {
            3.752698018198629, 99.02745420871454}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.15601058065378037`]& ,
         TagBoxNote->"0.15601058065378037"],
        StyleBox["0.15601058065378037`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.15601058065378037`, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{2.5487982520029133`, 0.}, {3.4512017479970867`, 
             0.07459857317128638}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{157.544160883174, 216.45136673963978`}, {
            53.20962028462351, 99.02745420871454}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.07459857317128638]& ,
         TagBoxNote->"0.07459857317128638"],
        StyleBox["0.07459857317128638`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.07459857317128638, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{3.5487982520029133`, 0.}, {4.451201747997087, 
             0.04126626256015905}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{222.26820740531085`, 281.17541326177667`}, {
            73.45864184583895, 99.02745420871454}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.04126626256015905]& ,
         TagBoxNote->"0.04126626256015905"],
        StyleBox["0.04126626256015905`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.04126626256015905, {}], "Tooltip"]& ]}, 
     {RGBColor[0.982864, 0.7431472, 0.3262672], EdgeForm[{Opacity[
      0.6649999999999999], Thickness[Small]}], 
      TagBox[
       TooltipBox[
        TagBox[
         TagBox[
          DynamicBox[{
            FEPrivate`If[
             CurrentValue["MouseOver"], 
             EdgeForm[{
               GrayLevel[0.5], 
               AbsoluteThickness[1.5], 
               Opacity[0.66]}], {}, {}], 
            
            RectangleBox[{4.548798252002913, 0.}, {5.451201747997087, 
             0.03402261102437947}, "RoundingRadius" -> 0]},
           
           ImageSizeCache->{{286.99225392744773`, 345.8994597839135}, {
            77.85908254258942, 99.02745420871454}}],
          "DelayedMouseEffectStyle"],
         StatusArea[#, 0.03402261102437947]& ,
         TagBoxNote->"0.03402261102437947"],
        StyleBox["0.03402261102437947`", {}, StripOnInput -> False]],
       Annotation[#, 
        Style[0.03402261102437947, {}], 
        "Tooltip"]& ]}}, {}, {}}, {}, {}, {}, {}, 
   StyleBox[{
     {Thickness[Tiny], 
      LineBox[{{0.45075018208302986`, 0.}, {5.551210779315368, 0.}}], 
      StyleBox[{}, "GraphicsLabel",
       StripOnInput->False]}, 
     StyleBox[{
       {Thickness[Tiny], 
        LineBox[{{0.5487982520029133, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {0.5487982520029133, 0.}]}], 
        LineBox[{{5.451201747997087, 0.}, 
          Offset[{-1.102182119232618*^-15, -6.}, {5.451201747997087, 
           0.}]}], {{}, {}, {}, {}, {}, {}, {}}}, 
       StyleBox[{}, "GraphicsLabel",
        StripOnInput->False]}, "GraphicsTicks",
      StripOnInput->False]}, "GraphicsAxes",
    StripOnInput->False,
    Antialiasing->False]},
  AspectRatio->NCache[GoldenRatio^(-1), 0.6180339887498948],
  Axes->{False, True},
  AxesLabel->{None, None},
  AxesOrigin->{0.45075018208302986`, 0.},
  CoordinatesToolOptions:>{"DisplayFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& ), "CopiedValueFunction" -> ({
      Identity[
       Part[#, 1]], 
      Identity[
       Part[#, 2]]}& )},
  DisplayFunction->Identity,
  FrameLabel->{{None, None}, {None, None}},
  FrameTicks->{{Automatic, Automatic}, {Automatic, Automatic}},
  GridLines->{None, None},
  GridLinesStyle->Directive[
    GrayLevel[0.5, 0.4]],
  PlotRange->{{All, All}, {All, All}},
  PlotRangePadding->{{
     Scaled[0.02], 
     Scaled[0.02]}, {
     Scaled[0.02], 
     Scaled[0.05]}},
  Ticks->{None, Automatic}]], "Output",
 CellChangeTimes->{{3.803296403864071*^9, 3.803296412644021*^9}},
 CellLabel->
  "Out[1885]=",ExpressionUUID->"5d100045-2e71-4966-a189-5e14fe0de2c4"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"StringSplit", "[", 
  RowBox[{
   RowBox[{"example", "\[LeftDoubleBracket]", "2", "\[RightDoubleBracket]"}], 
   ",", "\"\<,\>\""}], "]"}]], "Input",
 NumberMarks->False,
 CellLabel->
  "In[1724]:=",ExpressionUUID->"4f1d1054-ec2b-4934-9ad2-f925e7beb109"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"{0.32535726664229236\"\>", ",", "\<\" 0.15601058065378037\"\>",
    ",", "\<\" 0.07459857317128638\"\>", ",", "\<\" 0.04126626256015905\"\>", 
   ",", "\<\" 0.03402261102437947}\"\>"}], "}"}]], "Output",
 CellChangeTimes->{3.80321391055828*^9},
 CellLabel->
  "Out[1724]=",ExpressionUUID->"ed12af26-ee3e-46e7-abc6-841056b993bc"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"dAWS", " ", "=", " ", 
  RowBox[{"Flatten", "/@", "distancesLog"}]}]], "Input",
 CellChangeTimes->{{3.803213479966332*^9, 3.803213550963554*^9}, 
   3.803213591558504*^9, 3.803213642257453*^9},
 CellLabel->
  "In[2537]:=",ExpressionUUID->"7c49a379-5ac0-45dc-85e7-fa634daec502"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "10", ",", "\<\"{0.2260990191139683, 0.1349752326228955, \
0.07487194047004117, 0.04531706082055126, 0.03346157738856893}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "20", ",", "\<\"{0.20253169930290912, 0.11924150742082033, \
0.06956829122257897, 0.043207136611316595, 0.03303678300962365}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "30", ",", "\<\"{0.18921072865634378, 0.11336558523553047, \
0.06891315271472571, 0.04228979173146935, 0.034545199858851}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "40", ",", "\<\"{0.46800405271950724, 0.3434562304066242, \
0.21548530536486143, 0.14096547991729164, 0.09330415256915882}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "50", ",", "\<\"{0.4227155243087491, 0.3054819325337333, \
0.18544271773451326, 0.11192060473869134, 0.07161987524278819}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "60", ",", "\<\"{0.3564803778844296, 0.2295317287647981, \
0.1294251434083561, 0.07867923619228596, 0.04571298371991774}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "70", ",", "\<\"{0.28954972385316874, 0.16506854295979126, \
0.08510305657258711, 0.049919895512399295, 0.03444308032219644}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "80", ",", "\<\"{0.3121847195482494, 0.19710792700742538, \
0.11072920679903928, 0.0641437777587188, 0.03874775752248278}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "90", ",", "\<\"{0.30874407885035793, 0.17907210345336785, \
0.09577820899282043, 0.05486341765874425, 0.036053901597993473}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "100", ",", "\<\"{0.27351111768901365, 0.15967019697804205, \
0.09002035004390635, 0.052372083022105345, 0.033396880938118136}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "110", ",", "\<\"{0.14672816337168346, 0.09759812976242226, \
0.061149841755591884, 0.042036836978939805, 0.031935476176612694}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "120", ",", "\<\"{0.2795904763788539, 0.14731114091463454, \
0.0748005233833552, 0.04614174763671199, 0.03335955988675173}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "130", ",", "\<\"{0.3749625110203489, 0.22741397972119545, \
0.12105279593253099, 0.07288430608411044, 0.04463560036414156}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "140", ",", "\<\"{0.34676516793831547, 0.23597360835415346, \
0.14061060171881273, 0.08142920304640952, 0.05440056712141058}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "150", ",", "\<\"{0.285563309601295, 0.1933760926327949, \
0.11760562527439904, 0.06303450850861032, 0.04242802605897699}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "160", ",", "\<\"{0.21744143730953114, 0.16209052771924248, \
0.09668131414871896, 0.05485969732555146, 0.03583340911643463}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "170", ",", "\<\"{0.11014996256070188, 0.08868493509047824, \
0.061441378912044924, 0.04029180025966621, 0.032704591320949904}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "180", ",", "\<\"{0.1581277457941898, 0.10685901635361668, \
0.07062741765101753, 0.04864768033198152, 0.03373626211253675}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "190", ",", "\<\"{0.13523578795689067, 0.09546732392922344, \
0.06587699286139576, 0.044896846175707286, 0.03163155270074501}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "200", ",", "\<\"{0.11477929613074422, 0.08670365687885065, \
0.061298595962537894, 0.04138352403577516, 0.03172485939081478}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "210", ",", "\<\"{0.10269174465312361, 0.08192958529748573, \
0.06123956383706094, 0.04189847577292683, 0.0327116619105401}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "220", ",", "\<\"{0.11518928796925867, 0.08929914148668099, \
0.05861478874365655, 0.04096280967748873, 0.03184770031785241}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "230", ",", "\<\"{0.08838564365889366, 0.08181041261742827, \
0.05643976788369863, 0.03839171948669164, 0.03234788119414738}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "240", ",", "\<\"{0.18667755014822218, 0.11399201037653489, \
0.06842370859804356, 0.04246237630945854, 0.03119803228188022}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "250", ",", "\<\"{0.15945586383899568, 0.11330829579090304, \
0.06336125252151222, 0.04230123158072107, 0.031117562139521878}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "260", ",", "\<\"{0.1765650230757286, 0.10169676748393319, \
0.06340800429248078, 0.04049510061618469, 0.03223961186856923}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "270", ",", "\<\"{0.3815809151964511, 0.1956399932453236, \
0.10216798435733945, 0.06117936848873423, 0.041068027755003546}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "280", ",", "\<\"{0.3384959111509623, 0.1958785801406675, \
0.13031889599611554, 0.0701570339373712, 0.05145007905149691}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "290", ",", "\<\"{0.36253659788464315, 0.23827409799050858, \
0.17340474764809713, 0.10563346637260793, 0.06984867697244232}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "300", ",", "\<\"{0.22688151527328299, 0.13749288378219512, \
0.08957741413188883, 0.05264309229949257, 0.034816615813014734}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "310", ",", "\<\"{0.22858954560843747, 0.16465669068397282, \
0.09408973756602138, 0.05713520212311275, 0.03659378010387918}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "320", ",", "\<\"{0.18775048064443683, 0.13336414589328027, \
0.0763755147420896, 0.048553092857306156, 0.03518178418401488}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "330", ",", "\<\"{0.2117820339671984, 0.14175161690903887, \
0.08387256467469348, 0.04747516009042695, 0.03323941475060554}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "340", ",", "\<\"{0.22359758881133163, 0.13686450650200924, \
0.0759694819092513, 0.04785912938785893, 0.03478507640157352}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "350", ",", "\<\"{0.12947568018889893, 0.0985318966481199, \
0.06407214557962612, 0.04176979391293986, 0.03178104670659327}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "360", ",", "\<\"{0.22504932184006157, 0.14300569572525962, \
0.07639936077948206, 0.04833696893553188, 0.034578826316577486}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "370", ",", "\<\"{0.22422651571410673, 0.13423959630877733, \
0.07226190241465316, 0.047686463108692866, 0.033608061638085905}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "380", ",", "\<\"{0.0816997647640306, 0.07690549713117655, \
0.05478546665799976, 0.040732787815690764, 0.029681903393754306}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "390", ",", "\<\"{0.09594570895419179, 0.08127094413292432, \
0.05297287347102074, 0.03909082436756195, 0.030410421721435342}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "400", ",", "\<\"{0.09650768305291543, 0.08392000457737447, \
0.05615297178236741, 0.04074176677970945, 0.030008725434297362}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "410", ",", "\<\"{0.08085896563818638, 0.08242978627852325, \
0.05582362759772937, 0.0394334912366537, 0.031171984539092267}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "420", ",", "\<\"{0.1623580362878938, 0.10721421831707606, \
0.06253712547077456, 0.0412373029163375, 0.030645384621098636}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "430", ",", "\<\"{0.11091704330692936, 0.07893573049492215, \
0.05527230154977369, 0.04004646901981357, 0.030539848565837815}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "440", ",", "\<\"{0.2614617342522637, 0.1403581007083411, \
0.08174120571424438, 0.05216280234912912, 0.034784051494829465}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "450", ",", "\<\"{0.18121573563963786, 0.10964529958713486, \
0.06387116107176373, 0.04356070301965822, 0.03166181264833953}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "460", ",", "\<\"{0.18877014718628415, 0.12016410109516913, \
0.06902474342938712, 0.0420727295278639, 0.032114911443905644}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "470", ",", "\<\"{0.23253147824923875, 0.146858958109986, \
0.0784662821038265, 0.04484574987706554, 0.031391132552007234}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "480", ",", "\<\"{0.20376906258681324, 0.12735169387734027, \
0.07488396992092762, 0.04581215702522994, 0.03240513983887187}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "490", ",", "\<\"{0.16483961499909952, 0.1257164831601369, \
0.07350363953169373, 0.04584780884067616, 0.03434136709910393}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "500", ",", "\<\"{0.11330369499513628, 0.10577643847640555, \
0.06369116059206388, 0.042506564829515384, 0.03110766239627177}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "510", ",", "\<\"{0.1091072271035063, 0.09473135855684964, \
0.05985800635576963, 0.04296697830917137, 0.03233520825403282}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "520", ",", "\<\"{0.11391034467111409, 0.08745519378041869, \
0.05596276564050951, 0.039907656845163064, 0.03279224953561227}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "530", ",", "\<\"{0.10790184527936009, 0.08766065430762748, \
0.05723779523997169, 0.04157355528505487, 0.030234205441819956}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "540", ",", "\<\"{0.09268379715068112, 0.08339167017744184, \
0.05981574894736591, 0.0425103722279816, 0.03193044153124211}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "550", ",", "\<\"{0.09534661851238066, 0.08215658108675356, \
0.05906554904632571, 0.04073440438358297, 0.030869476349024462}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "560", ",", "\<\"{0.07485007425789553, 0.07977734350737385, \
0.05646257367557849, 0.03930146254849528, 0.03149653928653313}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "570", ",", "\<\"{0.08956286061943879, 0.08376219912228526, \
0.057312599905777806, 0.040506843383768275, 0.030847295769754354}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "580", ",", "\<\"{0.07312978942183657, 0.07742688019769936, \
0.05674078447261452, 0.041026573972902075, 0.030898946869968788}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "590", ",", "\<\"{0.06275144545602505, 0.07124338085054509, \
0.05131402560671502, 0.04113053577001693, 0.0322595527041488}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "600", ",", "\<\"{0.06750498058470948, 0.06861414819926244, \
0.05083199517853387, 0.0389572439194453, 0.03182242180354616}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "610", ",", "\<\"{0.12743369017067505, 0.08227536876538162, \
0.05774361476304803, 0.040475065074524454, 0.030827865028904104}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "620", ",", "\<\"{0.09435515619002882, 0.08008037718264699, \
0.05206164885295837, 0.03951345070665832, 0.029882364907934077}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "630", ",", "\<\"{0.06410744263637294, 0.06628208715418783, \
0.04950757963249531, 0.03828553471273261, 0.03423687905870378}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "640", ",", "\<\"{0.0708110800431565, 0.07100460337891458, \
0.0514202816079105, 0.036853597715387786, 0.030616454301195094}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "650", ",", "\<\"{0.07000902090913438, 0.07018794415540311, \
0.0504715075920537, 0.03863315104614294, 0.03233961703593922}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "660", ",", "\<\"{0.1274839657019334, 0.09557270264358231, \
0.06044332213582357, 0.04117415278663936, 0.032579884423607194}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "670", ",", "\<\"{0.10488339599829334, 0.08130239450490025, \
0.0543630010351693, 0.040685724707240044, 0.03182189168468402}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "680", ",", "\<\"{0.07529291697493688, 0.07001661588396245, \
0.052880272836672654, 0.03823481295484302, 0.032330636854363354}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "690", ",", "\<\"{0.1600540394520527, 0.10254430856789688, \
0.05934383748858547, 0.04141392398438351, 0.033105952524816726}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "700", ",", "\<\"{0.06840029224612587, 0.06782429859601663, \
0.04707977250534982, 0.03741193541833488, 0.0320602090573387}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "710", ",", "\<\"{0.0796810863353715, 0.07258256802326087, \
0.05066632141111601, 0.037584624620960856, 0.03074793817203588}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "720", ",", "\<\"{0.05704695044403355, 0.0682265316165619, \
0.044642299508447496, 0.03747739495999405, 0.03061994728943909}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "730", ",", "\<\"{0.058144610544401704, 0.06569241536359019, \
0.04626357476606558, 0.03732718109335447, 0.029936507197373636}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "740", ",", "\<\"{0.2205655219828913, 0.1412114268227961, \
0.08304366987478538, 0.05281377342055156, 0.035191666248184504}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "750", ",", "\<\"{0.06354698564408667, 0.06375571563117942, \
0.04769521398805454, 0.03954225618353168, 0.029266232301679813}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "760", ",", "\<\"{0.04561686751588875, 0.06051281869992653, \
0.04274339859746595, 0.035553037999463986, 0.029895089971193372}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "770", ",", "\<\"{0.054850043233989045, 0.05604053601905548, \
0.04522630659826739, 0.03779869576648989, 0.030398006286715643}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "780", ",", "\<\"{0.053601507267618136, 0.06169503061659669, \
0.04336464559557746, 0.03630446253846374, 0.031768336779038384}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "790", ",", "\<\"{0.04942141127392938, 0.05644957573220762, \
0.04348117957439264, 0.035687918350159886, 0.03052697826310049}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "800", ",", "\<\"{0.051587362621811364, 0.06254466878485346, \
0.04561065055720517, 0.036484166226168464, 0.0304350224730493}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "810", ",", "\<\"{0.06016468601284189, 0.06222787421437302, \
0.046523156974089305, 0.035497042621849925, 0.03146944356148529}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "820", ",", "\<\"{0.05161217215771282, 0.0601907877396688, \
0.04563852913979929, 0.036206822000262796, 0.029635418876540243}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "830", ",", "\<\"{0.04583862734585243, 0.05914844429761116, \
0.04646075366057432, 0.03662451666088728, 0.029868544036767593}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "840", ",", "\<\"{0.048146727850996975, 0.0625772783731192, \
0.047699320551546694, 0.036888360497555756, 0.02976440054404366}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "850", ",", "\<\"{0.04442569213611189, 0.05915954565471058, \
0.045919735092545225, 0.035740130354998914, 0.03209103094874269}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "860", ",", "\<\"{0.04572459655207778, 0.05860699283749094, \
0.047272199156261505, 0.037939377960565984, 0.029741967339599478}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "870", ",", "\<\"{0.03860011785293409, 0.057685509041885984, \
0.047549485357370185, 0.03840624916061662, 0.029822485575767572}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "880", ",", "\<\"{0.029194427868261347, 0.055033217813479, \
0.04454504066403361, 0.03449516341167247, 0.03192122346614008}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "890", ",", "\<\"{0.03622800503778334, 0.050329861172780044, \
0.04327967452929167, 0.034539174548975614, 0.02966285324351635}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "900", ",", "\<\"{0.03980947062550356, 0.051306664768100835, \
0.04265883930291046, 0.03674179125700795, 0.030410564586922584}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "910", ",", "\<\"{0.06308776306077961, 0.05401636625161495, \
0.04285822188342867, 0.03463959802806357, 0.02980882771413505}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "920", ",", "\<\"{0.05253179172665827, 0.051192472227344236, \
0.04072745017711165, 0.03311333599718305, 0.029272003757702374}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "930", ",", "\<\"{0.02906755854673425, 0.0449381978179438, \
0.03748732483990152, 0.034705733110963935, 0.029539237236556413}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "940", ",", "\<\"{0.02577084002023037, 0.041441882665467444, \
0.03715484960457078, 0.032271375083586185, 0.029988596717829444}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "950", ",", "\<\"{0.02303028752791385, 0.03551197032411619, \
0.03556355608586026, 0.03499956070856947, 0.030220976495709193}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "960", ",", "\<\"{0.02253816436591295, 0.04029735621542498, \
0.035570363103008984, 0.03282224568117721, 0.03055561786174279}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "970", ",", "\<\"{0.028841925535236533, 0.03934829195381182, \
0.03666712724918114, 0.03232768798754673, 0.02987466998747676}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "980", ",", "\<\"{0.028869804038361833, 0.035897923049679245, \
0.037200419882499385, 0.0314875350005371, 0.030426958757613143}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "990", ",", "\<\"{0.029958559743509666, 0.03722448875670839, \
0.038709198216593625, 0.03171432452007653, 0.03074397269219056}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1000", ",", "\<\"{0.023994006887698295, 0.03850679368073357, \
0.03798477218541669, 0.03362605954499189, 0.028103269713189986}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1010", ",", "\<\"{0.020275605434479954, 0.03296436152653801, \
0.033140450860064556, 0.03133896441132809, 0.030009975819868893}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1020", ",", "\<\"{0.015141471233128147, 0.034093616559967566, \
0.03611031272899773, 0.03296004101460407, 0.029355476364998467}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1030", ",", "\<\"{0.027712744971398227, 0.0336757724297444, \
0.034448788356860584, 0.0312408062859815, 0.030837244173950656}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1040", ",", "\<\"{0.026287533454472274, 0.03237217996437905, \
0.03435983904885427, 0.03256376033410424, 0.031109452005803808}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1050", ",", "\<\"{0.024508989450540898, 0.033665312248661344, \
0.036319714847003276, 0.0315335755895421, 0.03123644843458071}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1060", ",", "\<\"{0.02065420063141577, 0.03498779493595088, \
0.03522807809934446, 0.03282543746402061, 0.02874211997508152}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1070", ",", "\<\"{0.020018008494388197, 0.03456288215001631, \
0.03637711151602976, 0.03139778885528201, 0.03127745767385929}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1080", ",", "\<\"{0.01988269983647251, 0.0342277389675018, \
0.03346946392715558, 0.032329242392721336, 0.03173016716326584}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1090", ",", "\<\"{0.017168146373724623, 0.029414799457230932, \
0.03507735091737466, 0.03369933249637158, 0.028974937638243176}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1100", ",", "\<\"{0.022581437512579794, 0.03310223800385793, \
0.03657829160076169, 0.03424596519136146, 0.029085183363391345}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1110", ",", "\<\"{0.02453434476199337, 0.03216806115528422, \
0.03615378911690848, 0.032674615047307155, 0.031131833407839666}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1120", ",", "\<\"{0.021258317557828327, 0.032396250125031334, \
0.03430471757877336, 0.03256921286930313, 0.029407970060114082}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1130", ",", "\<\"{0.025365890041829327, 0.033650142691641995, \
0.03291798296691125, 0.03439534814810948, 0.028100869799260214}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1140", ",", "\<\"{0.017434839620395482, 0.03375611915273368, \
0.03430928442696952, 0.03281214959139666, 0.028242714093872953}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1150", ",", "\<\"{0.02224974235938938, 0.03236777774802985, \
0.0333211114200079, 0.03099134823344533, 0.02920930609745125}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1160", ",", "\<\"{0.016674120000901006, 0.03341642934386908, \
0.03501648925781446, 0.030954540231552582, 0.029170311165316126}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1170", ",", "\<\"{0.016709236314842012, 0.02999991953444249, \
0.03548106630299712, 0.032180935910872566, 0.029582909488563434}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1180", ",", "\<\"{0.020834846614038248, 0.033539729845838126, \
0.03418683183896304, 0.03396805791033192, 0.029354263733815777}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1190", ",", "\<\"{0.01773252975622349, 0.03254995749697309, \
0.035136217598978274, 0.030732310286448954, 0.02873977393706839}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1200", ",", "\<\"{0.019461968615779014, 0.03199308104837557, \
0.03652948709377921, 0.032285232046666584, 0.02984704659944654}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1210", ",", "\<\"{0.023376373446697463, 0.035081675188062704, \
0.033344781596600426, 0.03219590671831215, 0.028831077699531363}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1220", ",", "\<\"{0.026087061441821366, 0.03479202795619458, \
0.03713992786181765, 0.0335539421889057, 0.030197490018664515}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1230", ",", "\<\"{0.02008353753612021, 0.031533875011935414, \
0.03444673245549329, 0.03093883558232754, 0.029824250752123863}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1240", ",", "\<\"{0.017952834248730842, 0.03713724273597801, \
0.03604441844749905, 0.03384648564688611, 0.02976225398572467}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1250", ",", "\<\"{0.021642555746110865, 0.03330250295129575, \
0.03508564070493795, 0.03140425942321998, 0.030039301372362315}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1260", ",", "\<\"{0.024107321598322802, 0.03348970634295209, \
0.03584740659138122, 0.03229329972692072, 0.029787897481365958}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1270", ",", "\<\"{0.021895975225462865, 0.03107782547467, \
0.03343158116312118, 0.03258988857632836, 0.029156724049775994}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1280", ",", "\<\"{0.0207025661499185, 0.03209458837232058, \
0.035837754652980766, 0.031288488486381195, 0.028689139574687328}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1290", ",", "\<\"{0.023152738866478402, 0.03333094454096196, \
0.03485408704766881, 0.032687244367866575, 0.030629873264038817}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1300", ",", "\<\"{0.027400146208057075, 0.03182545550860567, \
0.03707363030110236, 0.031407216763406194, 0.02841199265227463}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1310", ",", "\<\"{0.025767137399939417, 0.03425090549164783, \
0.035412728135892434, 0.03245866044149853, 0.028505949608660142}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1320", ",", "\<\"{0.022002159888652735, 0.036078321575339724, \
0.034765380545711974, 0.03494853587456945, 0.029115507656186496}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1330", ",", "\<\"{0.026929868836665673, 0.032042672145394205, \
0.03603413468086788, 0.03249661405707732, 0.02804100578424975}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1340", ",", "\<\"{0.019055561001656326, 0.03266852100917197, \
0.03438762801226243, 0.03146253034843086, 0.03088886378566609}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1350", ",", "\<\"{0.025703997047290556, 0.032376396553125956, \
0.034724790028691006, 0.03231058282476354, 0.029355163001964578}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1360", ",", "\<\"{0.025892574855938752, 0.03348838483429138, \
0.03559438654493117, 0.03175211756852098, 0.03013697978298463}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1370", ",", "\<\"{0.021581007042409305, 0.03234330089535489, \
0.03384036761819077, 0.032137865251628914, 0.029299238425651433}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1380", ",", "\<\"{0.02622707014819192, 0.033533773109957414, \
0.03365517769078291, 0.03253649586296913, 0.029820823830647235}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1390", ",", "\<\"{0.02491175205148258, 0.03102504387606776, \
0.03216635958574468, 0.03136868602575874, 0.029493234831452383}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1400", ",", "\<\"{0.020075744325146593, 0.03354300163851221, \
0.03383778338276234, 0.032830506682478146, 0.030837892362766475}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1410", ",", "\<\"{0.019143154601518414, 0.031657724649447994, \
0.03412130180961454, 0.03153961899552619, 0.029269105589492615}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1420", ",", "\<\"{0.02604760458832023, 0.032285194983283694, \
0.03278015637537693, 0.030251684021920747, 0.030835969960672185}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1430", ",", "\<\"{0.021588604399987887, 0.03232025545204776, \
0.0333307512489825, 0.03199769551169304, 0.029931462888847765}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1440", ",", "\<\"{0.026955402330747724, 0.03498763750634795, \
0.035261209742824276, 0.03246170365088866, 0.030543243978972283}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1450", ",", "\<\"{0.024227506129894726, 0.03417797822099392, \
0.03499127573669736, 0.03125631267634888, 0.029014492248418636}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1460", ",", "\<\"{0.023859178077814357, 0.03019892520054436, \
0.03452330574417484, 0.02974532727478411, 0.02942857140305676}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1470", ",", "\<\"{0.023690888783325318, 0.03245850476923566, \
0.03554440218691045, 0.03203633386584933, 0.031022093989520785}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1480", ",", "\<\"{0.02438349382731007, 0.036156284878987234, \
0.0385421256655185, 0.032308226663868275, 0.031030714952024783}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1490", ",", "\<\"{0.027016049299651776, 0.03604302105546247, \
0.03468271368074372, 0.03247627108860119, 0.028588529005055926}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1500", ",", "\<\"{0.030156562849712465, 0.033193034807862246, \
0.03699374430598007, 0.033361124187894164, 0.029590432974236545}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1510", ",", "\<\"{0.027237283785854344, 0.03603019773304493, \
0.03582945886905743, 0.032722039266060717, 0.030618746035450232}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1520", ",", "\<\"{0.029439066110058573, 0.034720216860172286, \
0.03371338238638647, 0.033217210765380624, 0.03155288774647003}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1530", ",", "\<\"{0.025640595963014674, 0.03406788113690092, \
0.03634865691674813, 0.031995801814663744, 0.028995875986834698}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1540", ",", "\<\"{0.025440309420594578, 0.03580970618652639, \
0.036793006818970415, 0.032263952402128517, 0.028727941130709422}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1550", ",", "\<\"{0.03166272149119649, 0.035119234692853586, \
0.033332301887068275, 0.031829811701632627, 0.029768383166353368}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1560", ",", "\<\"{0.027329108155425476, 0.037609118001689604, \
0.036197524997247967, 0.03132184270095438, 0.029856595301724395}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1570", ",", "\<\"{0.030977218375823182, 0.03533870246405336, \
0.035629637850960155, 0.032695072294146886, 0.031410904068983336}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1580", ",", "\<\"{0.02987832773571725, 0.03420807062415829, \
0.03481135395013867, 0.031868088441487315, 0.028422595659556477}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1590", ",", "\<\"{0.0310391846593195, 0.03457439469227859, \
0.0379390296982067, 0.03207937971057152, 0.028529763384350412}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1600", ",", "\<\"{0.02674318145615775, 0.036465824463617236, \
0.03601643043881596, 0.03236062781113223, 0.029933241766825488}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1610", ",", "\<\"{0.021477087273271165, 0.03534827193167381, \
0.033235113635282754, 0.032442345204231546, 0.028474232065537758}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1620", ",", "\<\"{0.027384747774059512, 0.035625743776918364, \
0.03698059767500192, 0.03219796163139765, 0.028685239689547375}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1630", ",", "\<\"{0.03038689501150321, 0.03210099251807633, \
0.03746811243874976, 0.0328165644919462, 0.029477434057575483}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1640", ",", "\<\"{0.033166941334917543, 0.03785315878137831, \
0.036045571705581196, 0.033679376005801016, 0.029986348584806165}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1650", ",", "\<\"{0.029884188759427333, 0.0360082830159145, \
0.03502294210380727, 0.03274038787733047, 0.029252679784346914}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1660", ",", "\<\"{0.029729954131720037, 0.034648156180019866, \
0.03675111256486913, 0.03276281057983295, 0.028818122669784632}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1670", ",", "\<\"{0.02229070920833671, 0.03709363833808162, \
0.03519012628009504, 0.03030368495195365, 0.028282579153549894}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1680", ",", "\<\"{0.02848735949306258, 0.03530100877176512, \
0.03461810827431559, 0.029847150862337985, 0.02977928352565663}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1690", ",", "\<\"{0.028620848070154793, 0.038401252160774155, \
0.035859863456670374, 0.03306686697864809, 0.030944532103348334}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1700", ",", "\<\"{0.026243558466384233, 0.038941589152470646, \
0.03639284825544827, 0.033051013670014104, 0.02938775131085925}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1710", ",", "\<\"{0.026280017487308963, 0.03600457327163764, \
0.0365023084287228, 0.031806002521526135, 0.03068757281572933}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1720", ",", "\<\"{0.020855191066426925, 0.03272913679607486, \
0.03736017581452018, 0.031227658784393368, 0.03141382402519286}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1730", ",", "\<\"{0.023652863295699624, 0.03727683694277461, \
0.03676803896198553, 0.03365769273725587, 0.030727910948793364}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1740", ",", "\<\"{0.032992037932814994, 0.03355821363187624, \
0.03511105756711392, 0.034922370413265576, 0.02937742315469747}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1750", ",", "\<\"{0.028069859290420333, 0.03304436710021935, \
0.03604070889927255, 0.032379760750567275, 0.029044772651579606}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1760", ",", "\<\"{0.029434849783220553, 0.0392968639439163, \
0.03404085118710244, 0.030979786173046007, 0.03029678450903406}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1770", ",", "\<\"{0.02733041601367903, 0.038053353202564644, \
0.032938698650382445, 0.03174161465684565, 0.03064396084741945}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1780", ",", "\<\"{0.030581422952557114, 0.03379784343684112, \
0.03560653161741409, 0.03270329545924322, 0.029473236723054456}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1790", ",", "\<\"{0.026154282958817398, 0.03542837129682884, \
0.036157404691020696, 0.03294072803509969, 0.02818412469027578}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1800", ",", "\<\"{0.03468225097962705, 0.03634189740431577, \
0.03389795051999374, 0.03184273177406037, 0.029547436415658452}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1810", ",", "\<\"{0.03075913238708865, 0.03523101701759599, \
0.03474654208853105, 0.031759643679270394, 0.029907977732412574}\"\>"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1820", ",", "\<\"{0.03335405043135939, 0.038961682265711464, \
0.03582675581196056, 0.03430318702901859, 0.030060512629245025}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1830", ",", "\<\"{0.03336371488124037, 0.03514784694424433, \
0.0345466737312246, 0.033216942430210755, 0.028392573146736027}\"\>"}], "}"}],
    ",", 
   RowBox[{"{", 
    RowBox[{
    "1840", ",", "\<\"{0.028604762322051128, 0.037730443710000824, \
0.03547909650121857, 0.03307804715404555, 0.0296474626382872}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1850", ",", "\<\"{0.02702636405418534, 0.03418601338728452, \
0.0313425042806435, 0.03034166608363965, 0.027648561745496174}\"\>"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "1860", ",", "\<\"{0.02760081923191458, 0.03456099070632693, \
0.035908827698970434, 0.03303607257769543, 0.028798672695045564}\"\>"}], 
    "}"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8033150271956987`*^9},
 CellLabel->
  "Out[2537]=",ExpressionUUID->"f4685a22-a618-477e-82d6-f1c896bcb6cb"]
}, Closed]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Export", "[", 
  RowBox[{
  "\"\<DistanceLogAWS.csv\>\"", ",", " ", "distancesLogUpdated", ",", 
   RowBox[{"TableHeadings", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{
     "\"\<Round\>\"", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
     "}"}]}]}], " ", "]"}]], "Input",
 CellChangeTimes->{{3.8032133446087837`*^9, 3.803213345275094*^9}, {
  3.803213394709559*^9, 3.8032134022814007`*^9}, {3.803213448052971*^9, 
  3.8032134700823383`*^9}, {3.803213594441486*^9, 3.8032136067384872`*^9}, {
  3.80321508688664*^9, 3.803215089683614*^9}},
 CellLabel->
  "In[2538]:=",ExpressionUUID->"11191a4b-5421-4796-9d5d-17b55018ee2c"],

Cell[BoxData["\<\"DistanceLogAWS.csv\"\>"], "Output",
 CellChangeTimes->{
  3.803213345585703*^9, {3.803213396965876*^9, 3.803213414016452*^9}, 
   3.803213607609069*^9, 3.803215090563081*^9, 3.803315033332625*^9},
 CellLabel->
  "Out[2538]=",ExpressionUUID->"fe73fc37-2056-4371-b3f7-5424f68cefb1"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"ImportedDistance", " ", "=", " ", 
   RowBox[{"Import", "[", "\"\<DistanceLogAWS.csv\>\"", "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8032151119546537`*^9, 3.803215124001297*^9}},
 NumberMarks->False,
 CellLabel->
  "In[2539]:=",ExpressionUUID->"b77af124-82be-4006-aee4-3e333f015703"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"data", " ", "=", " ", 
  RowBox[{"Dataset", "@", "ImportedDistance"}]}]], "Input",
 CellChangeTimes->{{3.803215125538653*^9, 3.803215142674796*^9}},
 CellLabel->
  "In[2540]:=",ExpressionUUID->"a708172d-1b52-4c45-872e-e701049287a2"],

Cell[BoxData[
 TagBox[
  TagBox[
   DynamicModuleBox[{TypeSystem`NestedGrid`PackagePrivate`$state$$ = 
    Association[
    "InitialData" -> {{"Round", 1, 2, 3, 4, 5}, {
       10, 0.2260990191139683, 0.1349752326228955, 0.07487194047004117, 
        0.04531706082055126, 0.03346157738856893}, {
       20, 0.20253169930290912`, 0.11924150742082033`, 0.06956829122257897, 
        0.043207136611316595`, 0.03303678300962365}, {
       30, 0.18921072865634378`, 0.11336558523553047`, 0.06891315271472571, 
        0.04228979173146935, 0.034545199858851}, {
       40, 0.46800405271950724`, 0.3434562304066242, 0.21548530536486143`, 
        0.14096547991729164`, 0.09330415256915882}, {
       50, 0.4227155243087491, 0.3054819325337333, 0.18544271773451326`, 
        0.11192060473869134`, 0.07161987524278819}, {
       60, 0.3564803778844296, 0.2295317287647981, 0.1294251434083561, 
        0.07867923619228596, 0.04571298371991774}, {
       70, 0.28954972385316874`, 0.16506854295979126`, 0.08510305657258711, 
        0.049919895512399295`, 0.03444308032219644}, {
       80, 0.3121847195482494, 0.19710792700742538`, 0.11072920679903928`, 
        0.0641437777587188, 0.03874775752248278}, {
       90, 0.30874407885035793`, 0.17907210345336785`, 0.09577820899282043, 
        0.05486341765874425, 0.036053901597993473`}, {
       100, 0.27351111768901365`, 0.15967019697804205`, 0.09002035004390635, 
        0.052372083022105345`, 0.033396880938118136`}, {
       110, 0.14672816337168346`, 0.09759812976242226, 0.061149841755591884`, 
        0.042036836978939805`, 0.031935476176612694`}, {
       120, 0.2795904763788539, 0.14731114091463454`, 0.0748005233833552, 
        0.04614174763671199, 0.03335955988675173}, {
       130, 0.3749625110203489, 0.22741397972119545`, 0.12105279593253099`, 
        0.07288430608411044, 0.04463560036414156}, {
       140, 0.34676516793831547`, 0.23597360835415346`, 0.14061060171881273`, 
        0.08142920304640952, 0.05440056712141058}, {
       150, 0.285563309601295, 0.1933760926327949, 0.11760562527439904`, 
        0.06303450850861032, 0.04242802605897699}, {
       160, 0.21744143730953114`, 0.16209052771924248`, 0.09668131414871896, 
        0.05485969732555146, 0.03583340911643463}, {
       170, 0.11014996256070188`, 0.08868493509047824, 0.061441378912044924`, 
        0.04029180025966621, 0.032704591320949904`}, {
       180, 0.1581277457941898, 0.10685901635361668`, 0.07062741765101753, 
        0.04864768033198152, 0.03373626211253675}, {
       190, 0.13523578795689067`, 0.09546732392922344, 0.06587699286139576, 
        0.044896846175707286`, 0.03163155270074501}, {
       200, 0.11477929613074422`, 0.08670365687885065, 0.061298595962537894`, 
        0.04138352403577516, 0.03172485939081478}, {
       210, 0.10269174465312361`, 0.08192958529748573, 0.06123956383706094, 
        0.04189847577292683, 0.0327116619105401}, {
       220, 0.11518928796925867`, 0.08929914148668099, 0.05861478874365655, 
        0.04096280967748873, 0.03184770031785241}, {
       230, 0.08838564365889366, 0.08181041261742827, 0.05643976788369863, 
        0.03839171948669164, 0.03234788119414738}, {
       240, 0.18667755014822218`, 0.11399201037653489`, 0.06842370859804356, 
        0.04246237630945854, 0.03119803228188022}, {
       250, 0.15945586383899568`, 0.11330829579090304`, 0.06336125252151222, 
        0.04230123158072107, 0.031117562139521878`}, {
       260, 0.1765650230757286, 0.10169676748393319`, 0.06340800429248078, 
        0.04049510061618469, 0.03223961186856923}, {
       270, 0.3815809151964511, 0.1956399932453236, 0.10216798435733945`, 
        0.06117936848873423, 0.041068027755003546`}, {
       280, 0.3384959111509623, 0.1958785801406675, 0.13031889599611554`, 
        0.0701570339373712, 0.05145007905149691}, {
       290, 0.36253659788464315`, 0.23827409799050858`, 0.17340474764809713`, 
        0.10563346637260793`, 0.06984867697244232}, {
       300, 0.22688151527328299`, 0.13749288378219512`, 0.08957741413188883, 
        0.05264309229949257, 0.034816615813014734`}, {
       310, 0.22858954560843747`, 0.16465669068397282`, 0.09408973756602138, 
        0.05713520212311275, 0.03659378010387918}, {
       320, 0.18775048064443683`, 0.13336414589328027`, 0.0763755147420896, 
        0.048553092857306156`, 0.03518178418401488}, {
       330, 0.2117820339671984, 0.14175161690903887`, 0.08387256467469348, 
        0.04747516009042695, 0.03323941475060554}, {
       340, 0.22359758881133163`, 0.13686450650200924`, 0.0759694819092513, 
        0.04785912938785893, 0.03478507640157352}, {
       350, 0.12947568018889893`, 0.0985318966481199, 0.06407214557962612, 
        0.04176979391293986, 0.03178104670659327}, {
       360, 0.22504932184006157`, 0.14300569572525962`, 0.07639936077948206, 
        0.04833696893553188, 0.034578826316577486`}, {
       370, 0.22422651571410673`, 0.13423959630877733`, 0.07226190241465316, 
        0.047686463108692866`, 0.033608061638085905`}, {
       380, 0.0816997647640306, 0.07690549713117655, 0.05478546665799976, 
        0.040732787815690764`, 0.029681903393754306`}, {
       390, 0.09594570895419179, 0.08127094413292432, 0.05297287347102074, 
        0.03909082436756195, 0.030410421721435342`}, {
       400, 0.09650768305291543, 0.08392000457737447, 0.05615297178236741, 
        0.04074176677970945, 0.030008725434297362`}, {
       410, 0.08085896563818638, 0.08242978627852325, 0.05582362759772937, 
        0.0394334912366537, 0.031171984539092267`}, {
       420, 0.1623580362878938, 0.10721421831707606`, 0.06253712547077456, 
        0.0412373029163375, 0.030645384621098636`}, {
       430, 0.11091704330692936`, 0.07893573049492215, 0.05527230154977369, 
        0.04004646901981357, 0.030539848565837815`}, {
       440, 0.2614617342522637, 0.1403581007083411, 0.08174120571424438, 
        0.05216280234912912, 0.034784051494829465`}, {
       450, 0.18121573563963786`, 0.10964529958713486`, 0.06387116107176373, 
        0.04356070301965822, 0.03166181264833953}, {
       460, 0.18877014718628415`, 0.12016410109516913`, 0.06902474342938712, 
        0.0420727295278639, 0.032114911443905644`}, {
       470, 0.23253147824923875`, 0.146858958109986, 0.0784662821038265, 
        0.04484574987706554, 0.031391132552007234`}, {
       480, 0.20376906258681324`, 0.12735169387734027`, 0.07488396992092762, 
        0.04581215702522994, 0.03240513983887187}, {
       490, 0.16483961499909952`, 0.1257164831601369, 0.07350363953169373, 
        0.04584780884067616, 0.03434136709910393}, {
       500, 0.11330369499513628`, 0.10577643847640555`, 0.06369116059206388, 
        0.042506564829515384`, 0.03110766239627177}, {
       510, 0.1091072271035063, 0.09473135855684964, 0.05985800635576963, 
        0.04296697830917137, 0.03233520825403282}, {
       520, 0.11391034467111409`, 0.08745519378041869, 0.05596276564050951, 
        0.039907656845163064`, 0.03279224953561227}, {
       530, 0.10790184527936009`, 0.08766065430762748, 0.05723779523997169, 
        0.04157355528505487, 0.030234205441819956`}, {
       540, 0.09268379715068112, 0.08339167017744184, 0.05981574894736591, 
        0.0425103722279816, 0.03193044153124211}, {
       550, 0.09534661851238066, 0.08215658108675356, 0.05906554904632571, 
        0.04073440438358297, 0.030869476349024462`}, {
       560, 0.07485007425789553, 0.07977734350737385, 0.05646257367557849, 
        0.03930146254849528, 0.03149653928653313}, {
       570, 0.08956286061943879, 0.08376219912228526, 0.057312599905777806`, 
        0.040506843383768275`, 0.030847295769754354`}, {
       580, 0.07312978942183657, 0.07742688019769936, 0.05674078447261452, 
        0.041026573972902075`, 0.030898946869968788`}, {
       590, 0.06275144545602505, 0.07124338085054509, 0.05131402560671502, 
        0.04113053577001693, 0.0322595527041488}, {
       600, 0.06750498058470948, 0.06861414819926244, 0.05083199517853387, 
        0.0389572439194453, 0.03182242180354616}, {
       610, 0.12743369017067505`, 0.08227536876538162, 0.05774361476304803, 
        0.040475065074524454`, 0.030827865028904104`}, {
       620, 0.09435515619002882, 0.08008037718264699, 0.05206164885295837, 
        0.03951345070665832, 0.029882364907934077`}, {
       630, 0.06410744263637294, 0.06628208715418783, 0.04950757963249531, 
        0.03828553471273261, 0.03423687905870378}, {
       640, 0.0708110800431565, 0.07100460337891458, 0.0514202816079105, 
        0.036853597715387786`, 0.030616454301195094`}, {
       650, 0.07000902090913438, 0.07018794415540311, 0.0504715075920537, 
        0.03863315104614294, 0.03233961703593922}, {
       660, 0.1274839657019334, 0.09557270264358231, 0.06044332213582357, 
        0.04117415278663936, 0.032579884423607194`}, {
       670, 0.10488339599829334`, 0.08130239450490025, 0.0543630010351693, 
        0.040685724707240044`, 0.03182189168468402}, {
       680, 0.07529291697493688, 0.07001661588396245, 0.052880272836672654`, 
        0.03823481295484302, 0.032330636854363354`}, {
       690, 0.1600540394520527, 0.10254430856789688`, 0.05934383748858547, 
        0.04141392398438351, 0.033105952524816726`}, {
       700, 0.06840029224612587, 0.06782429859601663, 0.04707977250534982, 
        0.03741193541833488, 0.0320602090573387}, {
       710, 0.0796810863353715, 0.07258256802326087, 0.05066632141111601, 
        0.037584624620960856`, 0.03074793817203588}, {
       720, 0.05704695044403355, 0.0682265316165619, 0.044642299508447496`, 
        0.03747739495999405, 0.03061994728943909}, {
       730, 0.058144610544401704`, 0.06569241536359019, 0.04626357476606558, 
        0.03732718109335447, 0.029936507197373636`}, {
       740, 0.2205655219828913, 0.1412114268227961, 0.08304366987478538, 
        0.05281377342055156, 0.035191666248184504`}, {
       750, 0.06354698564408667, 0.06375571563117942, 0.04769521398805454, 
        0.03954225618353168, 0.029266232301679813`}, {
       760, 0.04561686751588875, 0.06051281869992653, 0.04274339859746595, 
        0.035553037999463986`, 0.029895089971193372`}, {
       770, 0.054850043233989045`, 0.05604053601905548, 0.04522630659826739, 
        0.03779869576648989, 0.030398006286715643`}, {
       780, 0.053601507267618136`, 0.06169503061659669, 0.04336464559557746, 
        0.03630446253846374, 0.031768336779038384`}, {
       790, 0.04942141127392938, 0.05644957573220762, 0.04348117957439264, 
        0.035687918350159886`, 0.03052697826310049}, {
       800, 0.051587362621811364`, 0.06254466878485346, 0.04561065055720517, 
        0.036484166226168464`, 0.0304350224730493}, {
       810, 0.06016468601284189, 0.06222787421437302, 0.046523156974089305`, 
        0.035497042621849925`, 0.03146944356148529}, {
       820, 0.05161217215771282, 0.0601907877396688, 0.04563852913979929, 
        0.036206822000262796`, 0.029635418876540243`}, {
       830, 0.04583862734585243, 0.05914844429761116, 0.04646075366057432, 
        0.03662451666088728, 0.029868544036767593`}, {
       840, 0.048146727850996975`, 0.0625772783731192, 0.047699320551546694`, 
        0.036888360497555756`, 0.02976440054404366}, {
       850, 0.04442569213611189, 0.05915954565471058, 0.045919735092545225`, 
        0.035740130354998914`, 0.03209103094874269}, {
       860, 0.04572459655207778, 0.05860699283749094, 0.047272199156261505`, 
        0.037939377960565984`, 0.029741967339599478`}, {
       870, 0.03860011785293409, 0.057685509041885984`, 0.047549485357370185`,
         0.03840624916061662, 0.029822485575767572`}, {
       880, 0.029194427868261347`, 0.055033217813479, 0.04454504066403361, 
        0.03449516341167247, 0.03192122346614008}, {
       890, 0.03622800503778334, 0.050329861172780044`, 0.04327967452929167, 
        0.034539174548975614`, 0.02966285324351635}, {
       900, 0.03980947062550356, 0.051306664768100835`, 0.04265883930291046, 
        0.03674179125700795, 0.030410564586922584`}, {
       910, 0.06308776306077961, 0.05401636625161495, 0.04285822188342867, 
        0.03463959802806357, 0.02980882771413505}, {
       920, 0.05253179172665827, 0.051192472227344236`, 0.04072745017711165, 
        0.03311333599718305, 0.029272003757702374`}, {
       930, 0.02906755854673425, 0.0449381978179438, 0.03748732483990152, 
        0.034705733110963935`, 0.029539237236556413`}, {
       940, 0.02577084002023037, 0.041441882665467444`, 0.03715484960457078, 
        0.032271375083586185`, 0.029988596717829444`}, {
       950, 0.02303028752791385, 0.03551197032411619, 0.03556355608586026, 
        0.03499956070856947, 0.030220976495709193`}, {
       960, 0.02253816436591295, 0.04029735621542498, 0.035570363103008984`, 
        0.03282224568117721, 0.03055561786174279}, {
       970, 0.028841925535236533`, 0.03934829195381182, 0.03666712724918114, 
        0.03232768798754673, 0.02987466998747676}, {
       980, 0.028869804038361833`, 0.035897923049679245`, 
        0.037200419882499385`, 0.0314875350005371, 0.030426958757613143`}, {
       990, 0.029958559743509666`, 0.03722448875670839, 0.038709198216593625`,
         0.03171432452007653, 0.03074397269219056}, {
       1000, 0.023994006887698295`, 0.03850679368073357, 0.03798477218541669, 
        0.03362605954499189, 0.028103269713189986`}, {
       1010, 0.020275605434479954`, 0.03296436152653801, 
        0.033140450860064556`, 0.03133896441132809, 0.030009975819868893`}, {
       1020, 0.015141471233128147`, 0.034093616559967566`, 
        0.03611031272899773, 0.03296004101460407, 0.029355476364998467`}, {
       1030, 0.027712744971398227`, 0.0336757724297444, 0.034448788356860584`,
         0.0312408062859815, 0.030837244173950656`}, {
       1040, 0.026287533454472274`, 0.03237217996437905, 0.03435983904885427, 
        0.03256376033410424, 0.031109452005803808`}, {
       1050, 0.024508989450540898`, 0.033665312248661344`, 
        0.036319714847003276`, 0.0315335755895421, 0.03123644843458071}, {
       1060, 0.02065420063141577, 0.03498779493595088, 0.03522807809934446, 
        0.03282543746402061, 0.02874211997508152}, {
       1070, 0.020018008494388197`, 0.03456288215001631, 0.03637711151602976, 
        0.03139778885528201, 0.03127745767385929}, {
       1080, 0.01988269983647251, 0.0342277389675018, 0.03346946392715558, 
        0.032329242392721336`, 0.03173016716326584}, {
       1090, 0.017168146373724623`, 0.029414799457230932`, 
        0.03507735091737466, 0.03369933249637158, 0.028974937638243176`}, {
       1100, 0.022581437512579794`, 0.03310223800385793, 0.03657829160076169, 
        0.03424596519136146, 0.029085183363391345`}, {
       1110, 0.02453434476199337, 0.03216806115528422, 0.03615378911690848, 
        0.032674615047307155`, 0.031131833407839666`}, {
       1120, 0.021258317557828327`, 0.032396250125031334`, 
        0.03430471757877336, 0.03256921286930313, 0.029407970060114082`}, {
       1130, 0.025365890041829327`, 0.033650142691641995`, 
        0.03291798296691125, 0.03439534814810948, 0.028100869799260214`}, {
       1140, 0.017434839620395482`, 0.03375611915273368, 0.03430928442696952, 
        0.03281214959139666, 0.028242714093872953`}, {
       1150, 0.02224974235938938, 0.03236777774802985, 0.0333211114200079, 
        0.03099134823344533, 0.02920930609745125}, {
       1160, 0.016674120000901006`, 0.03341642934386908, 0.03501648925781446, 
        0.030954540231552582`, 0.029170311165316126`}, {
       1170, 0.016709236314842012`, 0.02999991953444249, 0.03548106630299712, 
        0.032180935910872566`, 0.029582909488563434`}, {
       1180, 0.020834846614038248`, 0.033539729845838126`, 
        0.03418683183896304, 0.03396805791033192, 0.029354263733815777`}, {
       1190, 0.01773252975622349, 0.03254995749697309, 0.035136217598978274`, 
        0.030732310286448954`, 0.02873977393706839}, {
       1200, 0.019461968615779014`, 0.03199308104837557, 0.03652948709377921, 
        0.032285232046666584`, 0.02984704659944654}, {
       1210, 0.023376373446697463`, 0.035081675188062704`, 
        0.033344781596600426`, 0.03219590671831215, 0.028831077699531363`}, {
       1220, 0.026087061441821366`, 0.03479202795619458, 0.03713992786181765, 
        0.0335539421889057, 0.030197490018664515`}, {
       1230, 0.02008353753612021, 0.031533875011935414`, 0.03444673245549329, 
        0.03093883558232754, 0.029824250752123863`}, {
       1240, 0.017952834248730842`, 0.03713724273597801, 0.03604441844749905, 
        0.03384648564688611, 0.02976225398572467}, {
       1250, 0.021642555746110865`, 0.03330250295129575, 0.03508564070493795, 
        0.03140425942321998, 0.030039301372362315`}, {
       1260, 0.024107321598322802`, 0.03348970634295209, 0.03584740659138122, 
        0.03229329972692072, 0.029787897481365958`}, {
       1270, 0.021895975225462865`, 0.03107782547467, 0.03343158116312118, 
        0.03258988857632836, 0.029156724049775994`}, {
       1280, 0.0207025661499185, 0.03209458837232058, 0.035837754652980766`, 
        0.031288488486381195`, 0.028689139574687328`}, {
       1290, 0.023152738866478402`, 0.03333094454096196, 0.03485408704766881, 
        0.032687244367866575`, 0.030629873264038817`}, {
       1300, 0.027400146208057075`, 0.03182545550860567, 0.03707363030110236, 
        0.031407216763406194`, 0.02841199265227463}, {
       1310, 0.025767137399939417`, 0.03425090549164783, 
        0.035412728135892434`, 0.03245866044149853, 0.028505949608660142`}, {
       1320, 0.022002159888652735`, 0.036078321575339724`, 
        0.034765380545711974`, 0.03494853587456945, 0.029115507656186496`}, {
       1330, 0.026929868836665673`, 0.032042672145394205`, 
        0.03603413468086788, 0.03249661405707732, 0.02804100578424975}, {
       1340, 0.019055561001656326`, 0.03266852100917197, 0.03438762801226243, 
        0.03146253034843086, 0.03088886378566609}, {
       1350, 0.025703997047290556`, 0.032376396553125956`, 
        0.034724790028691006`, 0.03231058282476354, 0.029355163001964578`}, {
       1360, 0.025892574855938752`, 0.03348838483429138, 0.03559438654493117, 
        0.03175211756852098, 0.03013697978298463}, {
       1370, 0.021581007042409305`, 0.03234330089535489, 0.03384036761819077, 
        0.032137865251628914`, 0.029299238425651433`}, {
       1380, 0.02622707014819192, 0.033533773109957414`, 0.03365517769078291, 
        0.03253649586296913, 0.029820823830647235`}, {
       1390, 0.02491175205148258, 0.03102504387606776, 0.03216635958574468, 
        0.03136868602575874, 0.029493234831452383`}, {
       1400, 0.020075744325146593`, 0.03354300163851221, 0.03383778338276234, 
        0.032830506682478146`, 0.030837892362766475`}, {
       1410, 0.019143154601518414`, 0.031657724649447994`, 
        0.03412130180961454, 0.03153961899552619, 0.029269105589492615`}, {
       1420, 0.02604760458832023, 0.032285194983283694`, 0.03278015637537693, 
        0.030251684021920747`, 0.030835969960672185`}, {
       1430, 0.021588604399987887`, 0.03232025545204776, 0.0333307512489825, 
        0.03199769551169304, 0.029931462888847765`}, {
       1440, 0.026955402330747724`, 0.03498763750634795, 
        0.035261209742824276`, 0.03246170365088866, 0.030543243978972283`}, {
       1450, 0.024227506129894726`, 0.03417797822099392, 0.03499127573669736, 
        0.03125631267634888, 0.029014492248418636`}, {
       1460, 0.023859178077814357`, 0.03019892520054436, 0.03452330574417484, 
        0.02974532727478411, 0.02942857140305676}, {
       1470, 0.023690888783325318`, 0.03245850476923566, 0.03554440218691045, 
        0.03203633386584933, 0.031022093989520785`}, {
       1480, 0.02438349382731007, 0.036156284878987234`, 0.0385421256655185, 
        0.032308226663868275`, 0.031030714952024783`}, {
       1490, 0.027016049299651776`, 0.03604302105546247, 0.03468271368074372, 
        0.03247627108860119, 0.028588529005055926`}, {
       1500, 0.030156562849712465`, 0.033193034807862246`, 
        0.03699374430598007, 0.033361124187894164`, 0.029590432974236545`}, {
       1510, 0.027237283785854344`, 0.03603019773304493, 0.03582945886905743, 
        0.032722039266060717`, 0.030618746035450232`}, {
       1520, 0.029439066110058573`, 0.034720216860172286`, 
        0.03371338238638647, 0.033217210765380624`, 0.03155288774647003}, {
       1530, 0.025640595963014674`, 0.03406788113690092, 0.03634865691674813, 
        0.031995801814663744`, 0.028995875986834698`}, {
       1540, 0.025440309420594578`, 0.03580970618652639, 
        0.036793006818970415`, 0.032263952402128517`, 
        0.028727941130709422`}, {
       1550, 0.03166272149119649, 0.035119234692853586`, 
        0.033332301887068275`, 0.031829811701632627`, 
        0.029768383166353368`}, {
       1560, 0.027329108155425476`, 0.037609118001689604`, 
        0.036197524997247967`, 0.03132184270095438, 0.029856595301724395`}, {
       1570, 0.030977218375823182`, 0.03533870246405336, 
        0.035629637850960155`, 0.032695072294146886`, 
        0.031410904068983336`}, {
       1580, 0.02987832773571725, 0.03420807062415829, 0.03481135395013867, 
        0.031868088441487315`, 0.028422595659556477`}, {
       1590, 0.0310391846593195, 0.03457439469227859, 0.0379390296982067, 
        0.03207937971057152, 0.028529763384350412`}, {
       1600, 0.02674318145615775, 0.036465824463617236`, 0.03601643043881596, 
        0.03236062781113223, 0.029933241766825488`}, {
       1610, 0.021477087273271165`, 0.03534827193167381, 
        0.033235113635282754`, 0.032442345204231546`, 
        0.028474232065537758`}, {
       1620, 0.027384747774059512`, 0.035625743776918364`, 
        0.03698059767500192, 0.03219796163139765, 0.028685239689547375`}, {
       1630, 0.03038689501150321, 0.03210099251807633, 0.03746811243874976, 
        0.0328165644919462, 0.029477434057575483`}, {
       1640, 0.033166941334917543`, 0.03785315878137831, 
        0.036045571705581196`, 0.033679376005801016`, 
        0.029986348584806165`}, {
       1650, 0.029884188759427333`, 0.0360082830159145, 0.03502294210380727, 
        0.03274038787733047, 0.029252679784346914`}, {
       1660, 0.029729954131720037`, 0.034648156180019866`, 
        0.03675111256486913, 0.03276281057983295, 0.028818122669784632`}, {
       1670, 0.02229070920833671, 0.03709363833808162, 0.03519012628009504, 
        0.03030368495195365, 0.028282579153549894`}, {
       1680, 0.02848735949306258, 0.03530100877176512, 0.03461810827431559, 
        0.029847150862337985`, 0.02977928352565663}, {
       1690, 0.028620848070154793`, 0.038401252160774155`, 
        0.035859863456670374`, 0.03306686697864809, 0.030944532103348334`}, {
       1700, 0.026243558466384233`, 0.038941589152470646`, 
        0.03639284825544827, 0.033051013670014104`, 0.02938775131085925}, {
       1710, 0.026280017487308963`, 0.03600457327163764, 0.0365023084287228, 
        0.031806002521526135`, 0.03068757281572933}, {
       1720, 0.020855191066426925`, 0.03272913679607486, 0.03736017581452018, 
        0.031227658784393368`, 0.03141382402519286}, {
       1730, 0.023652863295699624`, 0.03727683694277461, 0.03676803896198553, 
        0.03365769273725587, 0.030727910948793364`}, {
       1740, 0.032992037932814994`, 0.03355821363187624, 0.03511105756711392, 
        0.034922370413265576`, 0.02937742315469747}, {
       1750, 0.028069859290420333`, 0.03304436710021935, 0.03604070889927255, 
        0.032379760750567275`, 0.029044772651579606`}, {
       1760, 0.029434849783220553`, 0.0392968639439163, 0.03404085118710244, 
        0.030979786173046007`, 0.03029678450903406}, {
       1770, 0.02733041601367903, 0.038053353202564644`, 
        0.032938698650382445`, 0.03174161465684565, 0.03064396084741945}, {
       1780, 0.030581422952557114`, 0.03379784343684112, 0.03560653161741409, 
        0.03270329545924322, 0.029473236723054456`}, {
       1790, 0.026154282958817398`, 0.03542837129682884, 
        0.036157404691020696`, 0.03294072803509969, 0.02818412469027578}, {
       1800, 0.03468225097962705, 0.03634189740431577, 0.03389795051999374, 
        0.03184273177406037, 0.029547436415658452`}, {
       1810, 0.03075913238708865, 0.03523101701759599, 0.03474654208853105, 
        0.031759643679270394`, 0.029907977732412574`}, {
       1820, 0.03335405043135939, 0.038961682265711464`, 0.03582675581196056, 
        0.03430318702901859, 0.030060512629245025`}, {
       1830, 0.03336371488124037, 0.03514784694424433, 0.0345466737312246, 
        0.033216942430210755`, 0.028392573146736027`}, {
       1840, 0.028604762322051128`, 0.037730443710000824`, 
        0.03547909650121857, 0.03307804715404555, 0.0296474626382872}, {
       1850, 0.02702636405418534, 0.03418601338728452, 0.0313425042806435, 
        0.03034166608363965, 0.027648561745496174`}, {
       1860, 0.02760081923191458, 0.03456099070632693, 0.035908827698970434`, 
        0.03303607257769543, 0.028798672695045564`}}, "InitialShape" -> 
     TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60]}], 
         DirectedInfinity[1], 6, {All}]], 20, 
       DirectedInfinity[1], {}], "InitialType" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 187], "Meta" -> 
     Association["ID" -> 63497002281502], "RowTarget" -> 20, "ColumnTarget" -> 
     10, "Shape" -> TypeSystem`PackageScope`Limited[
       TypeSystem`PackageScope`ColumnShape[
        TypeSystem`PackageScope`Limited[
         TypeSystem`PackageScope`RowShape[{
           TypeSystem`PackageScope`UnknownShape[False], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60], 
           TypeSystem`PackageScope`AtomShape[60]}], 
         DirectedInfinity[1], 6, {All}]], 20, 
       DirectedInfinity[1], {}], "Type" -> TypeSystem`Vector[
       TypeSystem`Tuple[{TypeSystem`AnyType, 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real], 
         TypeSystem`Atom[Real]}], 187], "Path" -> {}, "BaseIndices" -> {}, 
     "DisplayedRowCount" -> 20, "DisplayedColumnCount" -> 6, "DataRowCount" -> 
     187, "DataColumnCount" -> 6, "SortPaths" -> {}, "SortDirections" -> {}, 
     "HiddenItemsMap" -> Null, "UpdateType" -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`$outputID$$, 
    TypeSystem`NestedGrid`PackagePrivate`$path$$ = {}, 
    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$hPos$$ = 1, 
    TypeSystem`NestedGrid`PackagePrivate`$grid$$ = 
    DynamicModule[{
     TypeSystem`NestedGrid`PackagePrivate`renderedGrid = Deploy[
        Style[
         Grid[{{
            Item[
             Pane[
              Annotation["Round", 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 1}, "Item", False],
                "Mouse"], ImageSize -> {{48.00000000000001, Full}, Automatic},
               ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["1"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["2"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["3"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["4"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["5"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{1, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["10"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.226099"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.134975"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0748719"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0453171"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0334616"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{2, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["20"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.202532"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.119242"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0695683"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0432071"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0330368"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{3, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["30"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.189211"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.113366"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0689132"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0422898"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0345452"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{4, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["40"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.468004"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.343456"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.215485"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.140965"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0933042"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{5, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["50"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.422716"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.305482"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.185443"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.111921"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0716199"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{6, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["60"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.35648"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.229532"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.129425"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0786792"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.045713"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{7, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["70"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.28955"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.165069"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0851031"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0499199"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0344431"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{8, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["80"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 1}, "Item", False],
                "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.312185"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 2}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.197108"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 3}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.110729"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 4}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0641438"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 5}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0387478"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{9, 6}, "Item", False],
                "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["90"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.308744"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.179072"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0957782"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0548634"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0360539"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{10, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["100"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.273511"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.15967"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0900204"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0523721"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0333969"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{11, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["110"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.146728"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0975981"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0611498"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0420368"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0319355"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{12, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["120"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.27959"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.147311"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0748005"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0461417"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0333596"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{13, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["130"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.374963"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.227414"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.121053"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0728843"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0446356"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{14, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["140"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.346765"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.235974"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.140611"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0814292"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0544006"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{15, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["150"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.285563"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.193376"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.117606"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0630345"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.042428"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{16, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["160"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.217441"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.162091"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0966813"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0548597"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0358334"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{17, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["170"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.11015"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0886849"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0614414"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0402918"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0327046"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{18, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["180"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.158128"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.106859"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0706274"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0486477"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0337363"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{19, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Pane[
              Annotation[
               RawBoxes["190"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 1}, "Item", 
                False], "Mouse"], ImageSize -> {{34, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.135236"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 2}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0954673"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 3}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.065877"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 4}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0448968"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 5}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}], 
            Item[
             Pane[
              Annotation[
               RawBoxes["0.0316316"], 
               TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
               "ef89b2fc-32ad-45b9-9abb-61cdaa3fff4e"][{20, 6}, "Item", 
                False], "Mouse"], ImageSize -> {{60, Full}, Automatic}, 
              ImageMargins -> {{5, 3}, {4, 5}}], 
             ItemSize -> {Full, Automatic}]}, {
            Item[
             Deploy[
              Pane[
               Row[{
                 Spacer[2], 
                 Style[
                  Row[{
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[True, 187, 1], {1, 187 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 0, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ - 20 
                    If[False, 187, 1], {1, 187 - -20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], " ", 
                    Style[
                    Mouseover[
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    187, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}], 
                    Row[{"rows ", 1, "\[Dash]", 20, " of ", 
                    Style[
                    187, FontColor -> GrayLevel[0], FontWeight -> "Medium"]}, 
                    BaseStyle -> {
                    FontSize -> 8., FontColor -> 
                    RGBColor[
                    0.5098039215686274, 0.5098039215686274, 
                    0.5098039215686274]}]], ContextMenu -> {
                    MenuItem["Hide", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}, "Rows",
                     1, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 10 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}, "Rows",
                     10, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 30 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}, "Rows",
                     30, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show up to 100 Rows", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}, "Rows",
                     100, {}]], MenuEvaluator -> Automatic], 
                    MenuItem["Show All", 
                    KernelExecute[
                    
                    TypeSystem`NestedGrid`PackagePrivate`adjustLimits[{
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$}, "Rows",
                     100000000, {}]], MenuEvaluator -> Automatic]}], " ", 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}]}, {5, 6.5}], 180 Degree, {
                    9, 9}]}, ImageSize -> (1 -> 1), 
                    ImagePadding -> {{0, 1}, {1, 0}}, BaselinePosition -> 
                    Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[False, 187, 1], {1, 187 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None], 
                    Button[
                    MouseAppearance[
                    Mouseover[
                    Graphics[{{
                    EdgeForm[None], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]], 
                    Graphics[{{
                    EdgeForm[
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549]], 
                    FaceForm[None], 
                    Rectangle[{0, 0}, {18, 18}, RoundingRadius -> 2]}, 
                    Rotate[
                    Translate[{
                    CapForm[Round], 
                    RGBColor[
                    0.27450980392156865`, 0.5411764705882353, 
                    0.796078431372549], 
                    Line[{{0, 0}, {4, 5}, {8, 0}}], 
                    Line[{{0, 5}, {8, 5}}]}, {5, 6.5}], 180 Degree, {9, 9}]}, 
                    ImageSize -> (1 -> 1), ImagePadding -> {{0, 1}, {1, 0}}, 
                    BaselinePosition -> Scaled[0.35]]], "LinkHand"], 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$ = 
                    Clip[TypeSystem`NestedGrid`PackagePrivate`$vPos$$ + 
                    20 If[True, 187, 1], {1, 187 - 20 + 1}]; 
                    TypeSystem`NestedGrid`PackagePrivate`updateState[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$], True][
                    TypeSystem`NestedGrid`PackagePrivate`$path$$], Appearance -> 
                    None]}], ContextMenu -> {}], 
                 Graphics[{
                   RGBColor[
                   0.8196078431372549, 0.8196078431372549, 
                    0.8196078431372549], 
                   Line[{{0, 0}, {0, 19}}]}, ImageSize -> (1 -> 1), 
                  ImagePadding -> {{0, 0}, {0, 0}}, BaselinePosition -> 
                  Scaled[0.35]]}], ImageMargins -> {{0, -1}, {-1, 1}}]], 
             Background -> 
             RGBColor[
              0.9764705882352941, 0.9764705882352941, 0.9764705882352941], 
             Alignment -> {Left, Top}], SpanFromLeft, SpanFromLeft, 
            SpanFromLeft, SpanFromLeft, SpanFromLeft}}, 
          BaseStyle -> {
           ContextMenu -> 
            Dynamic[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
              Which[
               TypeSystem`NestedGrid`PackagePrivate`$lastOutputID =!= 
                TypeSystem`NestedGrid`PackagePrivate`$outputID$$, {}, 
                TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger === 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu, True, 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenuTrigger = 
                 TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger; 
                TypeSystem`NestedGrid`PackagePrivate`$lastContextMenu = 
                 Block[{TypeSystem`NestedGrid`PackagePrivate`$globalScrollPos = \
{TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$}}, 
                   
                   With[{TypeSystem`NestedGrid`PackagePrivate`lastPath$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$ = 
                    TypeSystem`NestedGrid`PackagePrivate`$\
lastPathIsLeafHeader, TypeSystem`NestedGrid`PackagePrivate`headerHidden$ = And[
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`$lastPathType, 
                    Alternatives["RowHeader", "ColumnHeader"]], 
                    TypeSystem`NestedGrid`PackagePrivate`headerHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]], 
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`allHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`anyHidden$ = 
                    TypeSystem`NestedGrid`PackagePrivate`anyHiddenQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ = 
                    TypeSystem`NestedGrid`PackagePrivate`columnSortDirection[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortPaths"], 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$[
                    "SortDirections"]], 
                    TypeSystem`NestedGrid`PackagePrivate`haveData$ = Not[
                    FailureQ[
                    TypeSystem`NestedGrid`PackagePrivate`datasetInitialData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$]]], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$ = Not[
                    FreeQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, Keys]]}, 
                    Join[{
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    Not[TypeSystem`NestedGrid`PackagePrivate`anyHidden$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Show ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "remove"]], MenuEvaluator -> Automatic]], 
                    If[
                    Or[
                    Not[TypeSystem`NestedGrid`PackagePrivate`haveData$], 
                    TypeSystem`NestedGrid`PackagePrivate`pathEmptyQ[
                    TypeSystem`NestedGrid`PackagePrivate`$lastPath, 
                    TypeSystem`NestedGrid`PackagePrivate`$state$$], 
                    TypeSystem`NestedGrid`PackagePrivate`isKeyDummy$, 
                    And[
                    TypeSystem`NestedGrid`PackagePrivate`allHidden$, 
                    TypeSystem`NestedGrid`PackagePrivate`headerHidden$]], 
                    Nothing, 
                    MenuItem[
                    StringJoin["Hide ", 
                    Which[
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "Item", "", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "RowHeader", "Row", 
                    TypeSystem`NestedGrid`PackagePrivate`lastPathType$ == 
                    "ColumnHeader", "Column", True, ""]], 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateHiddenItems[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`localHold[
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, "add"]], 
                    MenuEvaluator -> Automatic]], Delimiter}, 
                    If[
                    And[TypeSystem`NestedGrid`PackagePrivate`haveData$, 
                    MatchQ[TypeSystem`NestedGrid`PackagePrivate`lastPathType$, 
                    Alternatives["ColumnHeader", "KeyDummy"]], 
                    TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
                    Not[TypeSystem`NestedGrid`PackagePrivate`allHidden$]], {
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Ascending", 
                    MenuItem["Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Ascending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    "Descending", 
                    MenuItem["Reverse Sort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, 
                    "Descending"]], MenuEvaluator -> Automatic], Nothing], 
                    If[
                    TypeSystem`NestedGrid`PackagePrivate`sortDirection$ =!= 
                    None, 
                    MenuItem["Unsort", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`updateSort[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$path$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
                    TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
                    TypeSystem`NestedGrid`PackagePrivate`lastPath$, None]], 
                    MenuEvaluator -> Automatic], Nothing], Delimiter}, {}], {
                    MenuItem["Copy Position to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Copy Data to Clipboard", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`copyClip]], 
                    MenuEvaluator -> Automatic], Delimiter, 
                    MenuItem["Paste Position in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentPosition[
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic], 
                    MenuItem["Paste Data in New Cell", 
                    KernelExecute[
                    TypeSystem`NestedGrid`PackagePrivate`toCurrentData[
                    TypeSystem`NestedGrid`PackagePrivate`$state$$, 
                    TypeSystem`NestedGrid`PackagePrivate`cellPaste]], 
                    MenuEvaluator -> Automatic]}]]]]], FontFamily -> 
            "Verdana", FontSize -> 12}, Spacings -> {0, 0}, Alignment -> Left,
           Dividers -> All, FrameStyle -> GrayLevel[0.7490196078431373], 
          BaseStyle -> {FontFamily -> "Verdana", FontSize -> 12}], 
         LineBreakWithin -> False, ContextMenu -> {}, NumberMarks -> False, 
         ShowAutoStyles -> False]], 
      TypeSystem`NestedGrid`PackagePrivate`initialQ = True}, 
     Dynamic[
      TypeSystem`NestedGrid`PackagePrivate`setupViewPath[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, If[
         Not[TypeSystem`NestedGrid`PackagePrivate`initialQ], 
         Module[{
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = $Failed, 
           TypeSystem`NestedGrid`PackagePrivate`tmpData$ = 
           TypeSystem`NestedGrid`PackagePrivate`datasetData[
            TypeSystem`NestedGrid`PackagePrivate`$state$$]}, 
          TypeSystem`NestedGrid`PackagePrivate`tmpGrid$ = If[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpData$], 
             TypeSystem`NestedGrid`PackagePrivate`renderedGrid, 
             TypeSystem`NestedGrid`PackagePrivate`renderGrid[
             TypeSystem`NestedGrid`PackagePrivate`$state$$, 
              TypeSystem`NestedGrid`PackagePrivate`$path$$, 
              TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
              TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
              TypeSystem`NestedGrid`PackagePrivate`localHold[
              TypeSystem`NestedGrid`PackagePrivate`$outputID$$]][
             TypeSystem`NestedGrid`PackagePrivate`tmpData$]]; If[
            Not[
             FailureQ[TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]], 
            TypeSystem`NestedGrid`PackagePrivate`renderedGrid = 
            TypeSystem`NestedGrid`PackagePrivate`tmpGrid$]; Null]]; 
       TypeSystem`NestedGrid`PackagePrivate`initialQ = False; 
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$; 
       TypeSystem`NestedGrid`PackagePrivate`$hPos$$; If[
         FailureQ[TypeSystem`NestedGrid`PackagePrivate`renderedGrid], 
         TypeSystem`SparseGrid[
          TypeSystem`H["(data no longer present)"]], 
         If[GeneralUtilities`$DebugMode, 
          Row[{TypeSystem`NestedGrid`PackagePrivate`renderedGrid, "  ", 
            TypeSystem`NestedGrid`PackagePrivate`formatState[
            TypeSystem`NestedGrid`PackagePrivate`$state$$, 
             TypeSystem`NestedGrid`PackagePrivate`$path$$, 
             TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
             TypeSystem`NestedGrid`PackagePrivate`$hPos$$]}], 
          TypeSystem`NestedGrid`PackagePrivate`renderedGrid]]], 
      TrackedSymbols :> {
       TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$}], 
     DynamicModuleValues :> {}], 
    TypeSystem`NestedGrid`PackagePrivate`$topBar$$ = Dynamic[
     TypeSystem`NestedGrid`PackagePrivate`makeFramedBar[
      TypeSystem`PackageScope`SubViewPathbar[
      TypeSystem`NestedGrid`PackagePrivate`$path$$, 
       TypeSystem`NestedGrid`PackagePrivate`updateState[
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$path$$, 
        TypeSystem`NestedGrid`PackagePrivate`$vPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$hPos$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$, 
        TypeSystem`NestedGrid`PackagePrivate`localHold[
        TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]]], 
     TrackedSymbols :> {TypeSystem`NestedGrid`PackagePrivate`$path$$}], 
    TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$ = Style[
     Framed[
      Dynamic[
       Replace[
       TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$, {
        TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$][Null, 
           Blank[]] -> "", 
         TypeSystem`NestedGrid`PackagePrivate`$SliceMarker[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$][
           Pattern[TypeSystem`NestedGrid`PackagePrivate`path$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`pathType$, 
            Blank[]], 
           Pattern[TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$, 
            Blank[]]] :> (
          Increment[TypeSystem`NestedGrid`PackagePrivate`$contextMenuTrigger]; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPath = 
           TypeSystem`NestedGrid`PackagePrivate`path$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathType = 
           TypeSystem`NestedGrid`PackagePrivate`pathType$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastPathIsLeafHeader = 
           TypeSystem`NestedGrid`PackagePrivate`isLeafHeader$; 
          TypeSystem`NestedGrid`PackagePrivate`$lastOutputID = 
           TypeSystem`NestedGrid`PackagePrivate`$outputID$$; 
          TypeSystem`NestedGrid`PackagePrivate`makePathTrail[
           TypeSystem`NestedGrid`PackagePrivate`path$, 
            TypeSystem`NestedGrid`PackagePrivate`makePathElements]), Null :> 
         Spacer[10], Blank[] :> Spacer[10]}], 
       TrackedSymbols :> {
        TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$}], FrameStyle -> 
      None, ImageMargins -> 0, FrameMargins -> 0, Alignment -> Top, 
      ImageSize -> {Automatic, 15}], FontSize -> 1], 
    TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = Null}, 
    DynamicWrapperBox[
     DynamicBox[ToBoxes[
       Dataset`DatasetContent[
       2, "Path" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$path$$], 
        "Grid" -> Hold[TypeSystem`NestedGrid`PackagePrivate`$grid$$], "State" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$state$$], "VPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$vPos$$], "HPos" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$hPos$$], "TopBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$topBar$$], "BottomBar" -> 
        Hold[TypeSystem`NestedGrid`PackagePrivate`$bottomBar$$], "OutputID" -> 
        Hold[
          TypeSystem`NestedGrid`PackagePrivate`localHold[
          TypeSystem`NestedGrid`PackagePrivate`$outputID$$]]], StandardForm],
      ImageSizeCache->{454., {274.634033203125, 280.365966796875}},
      TrackedSymbols:>{
       TypeSystem`NestedGrid`PackagePrivate`$state$$, 
        TypeSystem`NestedGrid`PackagePrivate`$grid$$}], 
     TypeSystem`NestedGrid`PackagePrivate`mouseAnnotation$$ = 
     MouseAnnotation[],
     ImageSizeCache->{454., {274.634033203125, 280.365966796875}}],
    BaseStyle->{LineBreakWithin -> False},
    DynamicModuleValues:>{},
    Initialization:>
     Block[{$ContextPath = $ContextPath}, Needs["TypeSystem`"]; 
      Needs["Dataset`"]; 
      TypeSystem`NestedGrid`PackagePrivate`$outputID$$ = CreateUUID[]],
    UnsavedVariables:>{TypeSystem`NestedGrid`PackagePrivate`$outputID$$}],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  Dataset`InterpretDataset[1],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.803215128745328*^9, 3.803215155818286*^9}, 
   3.803315037804907*^9},
 CellLabel->
  "Out[2540]=",ExpressionUUID->"1023c6aa-bf7c-46b0-8201-47aa8fa89987"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"ListLinePlot", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"Transpose", "[", "distancesLogUpdated", "]"}], "[", 
    RowBox[{"[", 
     RowBox[{"2", ";;"}], "]"}], "]"}], ",", " ", 
   RowBox[{"PlotLegends", "\[Rule]", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]}], ",", 
   RowBox[{"PlotRange", "\[Rule]", "All"}]}], "]"}]], "Input",
 CellChangeTimes->{{3.803215163856392*^9, 3.803215194413219*^9}, {
  3.803215243763152*^9, 3.8032152582748423`*^9}, {3.803215301082975*^9, 
  3.803215302766589*^9}, {3.803215339761105*^9, 3.80321536994958*^9}, {
  3.803215508925284*^9, 3.8032155351848497`*^9}, {3.803315087626617*^9, 
  3.803315110127841*^9}, {3.80331540084626*^9, 3.803315401195356*^9}},
 CellLabel->
  "In[2547]:=",ExpressionUUID->"041063f4-6fd8-40db-9860-c820c7d464bc"],

Cell[BoxData[
 TemplateBox[{
   GraphicsBox[{{}, {{{}, {}, {
        Hue[0.67, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 120], 0.008333333333333333]], 
         RGBColor[0.368417, 0.506779, 0.709798], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1lAk4lfkex48WdW25j0gxOlKWaCZbopl87VpkPYiDszinDFepM9V40hwZ
9GiSJaTNibmoTmVrGZQTymFMTI3GTUpHzdx23aYhmunOfe7v73k8no/v+/3t
72sp2hImmcbhcJr/+v3f3///jHk6BQh0+sd6PekfGBfLZh983k08G8F9/ScN
VqqJDTE16OLX9WaYeC6+/G7B59f1h4hNkZxub1Tcf4fYHKMTioKp3FvEXOwP
czwxMHmbeBH4VxJydrQzXgwbv8QbLpk/EltjvC5P94+udmJbqPfMlfU9YvpS
bL+S1S768DOxA2ZMPMuVOrL8H6PM5VnEGX+WfzmeG82cshj4ntgRjiV3L3Y7
tRI7wYAvVuZ+1knsjL3aPtM3B18jdsHlBivdZaIrxK44cvHuIa21zcQrsGjr
2QLdDKa7YUvym9lpiovEK3EoJrFH73EXsTtSZjq06iWxfB4oth7uOFd+g3gV
Jt5pYm8lDxJ/io0BBteenhog/gzzLR829jqz/lfjjouxqUznB2JPLPdaPy/F
mzFwer/JJ66zaZ9ywHePZofSjM3DCy7xTdmDJ+ge5F6IfDOjubZIRbo3LLn/
zPv8JtO9cf/s6yhZI7sfH5QeV5X7P20i3QdZ0daaxwcvk+6Lq9Kc1c1NxHJf
eHK1eA6N9DzHD4ILes+XqGkecj90yosc50jYfvzx1DXtQ3dLP+n+aHmoe93I
ic0zACttQjpP2LH+ArAt45Pksg7WfyBajj7oXmDcQ3ogsvtVT3bMv076GnhZ
ZRfs0qL9ydegvnHp19tftpC+FlX3/vaFhx3T16JucU2BrILp67Do6EljbvMl
0tfBeve6/srNrP/1mCHTGU6wayR9PXx+W/dF2Qt2H0FQWLz0q7zcQHoQaqqn
5acb1pG+AeJzL6q0AutJ34Ch3EG/tmC2n2Ao83Xv1Nqw+QajR3kgKTqJ+UMw
cntSreRSfIQg9abHTvPnLF4IRhc1T5eEUjxVCCzbm8RV/2L3HYpLH83aJ/Gn
+hGKdO3sw9W72b5CEf1oVfq5vRRPFYqdBc++n5Sw/YahRPV+hrfrWfKHwddG
JrS8TiwPw7TI640Zq+ieVGGo656fedyX1R+OlgeYaxpbQ/5wGBe36W4wVpI/
HG2WOyxr086QPxx6RWtEHUGnyB8Bnbf11bVJp8kfARf38uFffzhH/gjYx723
eJJCuioCmeZ1C+x2UT4ODzyjOWZ11bXk56E1qGb496vV5Odhl0oxvCKJnlfx
IK0unyXpqCJ/JGzPnx1d/Pg4+SOxPEppmf5NJfkjEdrQ7/Bv4bfkj0R408JZ
2das/yhEtr5M3faY1R+FYzciBjQdFE8ehTzH4N4z4iPkj4L+8IdUlJSRPxpW
jrKjq+cSIxoXOy8Mte5j/mhIHdpUugXEqmhc/pb3RHb2BPk3omcwd7+m8DD5
N0Jd+ccgt+MQ+Tci85zR/YxpB8m/EaeKIgeaBcfIH4OGiaeZFs+oPsTgbmXZ
Vo1pOfljoKn6z1iCdQn5Y5D7p1df+VcUnxMLL66b1JJPjFiYGA/05hwqJH8s
uE+3nyhdSP2pYmF7IUdr30KKz+FjYMmlvCudFB98aLJqDL9+x/LzEWf1PGDr
XYqn4mNUaf6qUl1K/jgsq0/ATCPSEYfpTfr33c1Z/jhoe68fbeax+uNgsjnr
xZe2ReSPx+mfHx6586KY/PEwzOobfveK6pXHY7ftuEHhRba/eJjwK8RdBaz/
BHDnjAR7iCgeEpCdnxOx047qkyfgVsGW8dLztB9VAnQLZ2n/kszqF0D+jUeD
vjPVxxWg0m2SE3OB3YMAV4zTz6sNaF8CATRjN0IbRVSP/K/ndWp+a8mleAoB
xkuu/SovPkr5BOjd8al+UBb1NyJAtk+XjnUY+TlCmJ+6F1iSRcwVonpycDhi
PsWDEJ6t7hrfIdIFQnTvFQt37mX7EWJUO0DSmk/zUAixr+VWrM8RyqcSwitA
ZOOuJP+IEIoJ2aUwM9a/CCHWg/9wOkL1ckUo5o0nmfaxexahY2xFZF4qsUCE
1zLryhRvYrkIZs3ORe/HiRUiKJfcEZieZv2LwPl7r5L/kN6XERGyw+Md5j0i
nSNGr/xMoP8S0rlilHSk+eZ6sfdBjPHqQR9tfda/GDquxytNVygovxh5B7Q3
2b2neAoxXu8Rvsq4XEH5xUirf3Uy5TDLL8ZPqdoprWrSOYmQGk3lFIhY/4l4
orn5wuRP9j4kgr9UEtKmw/afiDkKF62rH5FfnoiV08+PeE1RPYpEKIry374t
p3yqRBit+2lbbhrLn4jwdjcHwW02fwnkszJ4Pfb0feFKsEzdVa7ewL6HEozP
FkjKHrD+JajvK7GwfsLuTwJns4iPDWOpXoUEuX6e3bKV7N4l4If8Mo/3iOob
keDHpIr46Kvs+yNFze/fRdgvZvOXQjg1ZJ/J5gkpxky6D7SGUL8CKaxkA27L
1Sy/FEHzklc9uHaS8kuhX1GRGvYVm78U95JK3NRGpI9I4SwrlusZE3M2oVPW
sqBwLet/EywiJ0p7lSz/JrTsu1Eh9jnm+V9nPXeG
         "]]}, {
        Hue[0.9060679774997897, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 120], 0.008333333333333333]], 
         RGBColor[0.880722, 0.611041, 0.142051], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw1VAlYjYkaLmGKoVRa1DRR4TrJkiRKb6FSp7Sc0qqzn2e6k0oGo9LvlmY0
aRqS9Y4ITc1Ni0gLzqDEbYwtZq6i+7hCMZOlzZI797nfd57nPOd5z/u93/tt
/z9VnhSqGqWjo9Pw5/d/v///9HmuC30RfN/nJ0/6A70NNTkHc84R1sdtC9On
OWPOEjZCwceBd+e8bSdsimrTZPPRO24RtoDpwkU1AbKfCVtj96xr4kHbZsK2
iD9nN6198RXC05B69E1Fe28LYXt8Gjq52jj5EuHpUAxvfjz33RnCM7EhwC/B
/N4FwrPwzbTLDd1W7OcIzS2xpXzBNcJO+PnmXfc8bSvhuei41fxIdp7zz4Mm
t2PVxNrThOejc+u2NuuYRsLOuHnHuuebZPZfgPkfmt64zOd4FwipiVERw7WE
F8JqjOe7oA7mXdGqVz6Q84L5RRhdsLOw0Inn6Yb8wivaZl3Gi2FxI/VIm34D
4SVwKlYsbBzH83KH9ItfD+UZM/ZAuvNs3UuZ3O9SzMgoeRy3j/fpiU3Gl9du
MuH5A20G23NNjIkXgJZLivM99jxPL3goa6tbspn3QvDauqdyt3rivRFkaF8/
KojiBW+kNbyLuujEfsuw+pChnWnVSeKXoTtt1hzHa9z/chTfsRvfmnaK+OWo
DPOT2EwhrLMCjrkRlsp1NH9hBdpnDrRNdWG9D6yrppl5DXJ9Pqg0ePjg9KQm
4n1xTBFjanKR7lfwxYXMKUt82rg/P3y5wyHZMFBLvB/y79wP2GxOWGcllLkv
ZswyZf+VmOjzZEMweP/+8B6eXrFBQfsV/BFcpWp8nsz7DsD0CyKjmVHcXwBM
XXprF+pzf2IYJofVr/yc+hHE2DXuwdbkFOYD4XTVd4vnTZ5fIHZ5/lKk61FD
fBAe6X8rrymoJj4IiRafHPlgyPpVsB414YqDwPlXodq/5D8dg1XEByPqrPS7
mNmUD8HoyT8jvjPI+YLRundpV+pG6lcbjDhRevuS6zz/EPi+UD088IziEQLL
0iq9SNC9CiGINY588nss8doQ9Cf0/rW5kOsPxT53Pe+AjawPhX9/4V3XG1Sf
EIpt0AtyNaF9aUORVPbdZwGhXH8Y+uwOem9/e4L0YTgqPI6OrP4H6cOQ8/DY
qYyiStKHwUq0MrW/m3gdCUIjhxKej6J8kCB/SDws6aB4QYLDOfXVYTcov1aC
FaKm1Fo/wjrhGLwxOdtoDOvDEbiv/NVMf+KFcFQftIpp0mV9OBQbdmW8/rqC
9BF4VqOJC55N9SACxccyH7dfKiN9BNw7M0Y6l5eTPgKz6j6k6//wI+lXw3Oq
gaTbhXishsir76TdqFLSr4Z00cb2+67HSL8abgtCRg45HSF9JLLe2nT/6/BR
0kdix4m5RV84EBYi0eL9LmGhjOK1kbA3OLrLzLCE9FEwqDDa85c6wohCp68s
sbarmPRRuO7h1Ve3/jDpoxBcuTXhlQdhnWhk795ibbaL4hGN227uawvdiRei
MVgyuqj3Keuj8ebKmy63GtbHYDBzIEKcQxgxaKk53/LU5nvSx0A3MPCfLS8p
vzYGogyfMeGbCOvEouDQvmaPIvaPRVxB4+d7FrN/LCrH79ek+bF/LFrXn1P9
bSfr41BWERvUb8X+cRh9b+o28Rn2j8PA8wO7bRxZH4cq4wfhinLWr8FKu/1l
Khn7r0HmiqWVbgPsvwb16RubvK+zfg2ye1qXuTiwPh6Xt3xkVqrH84/Hx+8t
d46dwPp4iC+8Ny5wYH08/HbOLui8eYj0UkyY0nXi5FrKZyvFfbPMp1oj7keK
ff2zJycGEC+V4smvDyvCt3N+Kf6+flvRvU10H8VSjNP+u+yRhuctRdYPleXP
6wl3STFHXLe3hPetI0NQWkijguuzlSHb2ck88FuehwzxziWnIkTES2XQe++a
+lEz1S/IkGJlsSaP51ssw6YPk4aSXdhfhq9XzJdVfsX+MsxLklz3zWN/OSR+
pwK7+b5s5XCo0xxryeT+5VgemVKw8RntUyrH8ZHeKvX3fN9y7PBy3m+Sxf3L
MbgqznLJen5e5Bh350lixQj7yxE0pfNG3jp+/hS4G/bbjN9a2F8BUWKpOjKF
/RXoLu2OOh5O8VIFJrT8PuTwluevwNWsmj2CF+2/WIGU9EazHnP2V6DDzEl2
JoviuxTwfz3g2HSSnx8ljOLfjT3+I8XbKnE0rH2OyJIwlLh6uX3vdg/2V+J1
3qSduUncvxLrovWXZsjYX4mMLV1pFUnsr8RXHSHOmrPsr8T4zVMG/3jP/asg
5MvEw8bsr8L9e6sWSMr4nlVYlNTweHofYakKxfkJuvM4v6CC+WnJ3gc/UT3F
KvxSOM381WSK16og8v20LdeJ/f/MJxs7NLeX969GyB8vX9bZ0PvOVg3BcXRp
Qxr7q7HV5svkV4F8f2qcm2jfVW7H/mqUDx+v1xzg/avxScrVi20G3L8aixu8
bK68pHxdamiHxeO6R3j+GqiL9h7QhBBvq4EI/d63Bd6/BvZT93/2pvqw538B
WYpz4A==
         "]]}, {
        Hue[0.1421359549995791, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 120], 0.008333333333333333]], 
         RGBColor[0.560181, 0.691569, 0.194885], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw9lAs0FegahneNa2VS0qlU5HSwdEWKNvVGhgibLbbrvtiXFLmcLhzNspMR
NXWiGWp2o52UnKQLSgZtMhl0YbpKRrVKjXuKOYXmdNb5v2Mty3q83/t/3/v9
/94LJLH+sokcDqfy8+9///7vZ3DtzpGyq3esS9eyf+DgT6fWrr57ibEevA8s
bvMsIDbE7huFtdrfNzOegbjqD645VQ2MZ2Gx3txmTpaG8Vwce1gfxmssZ2yG
T+9/b70uqGJsjiRrr9KetArGC1FQHdWePfkqYwsYdI6v0PO9wNgKjZWFmWYW
NK813h/Pe80br2G8GNPt+1bt+7OW8VKopok/yk1IX44NSxWeJhrqZ4PO+lnZ
a3bQ+bYYMP4i/tSMy4ztEK3dlcnruMh4BTJ8urL2SajeHj2Hbjc0hRCvRErW
tre1E0sYr8Id+9SQ4lfFjB2gY1IauCqN9umI00+itsY70PmrsaKw+pc9XGIu
mgL2BpVYVjJ2wt6AJeaeJbRfZxT5T91uZnuT8RrYzrdSH+i/wngtfuBWtbnO
pLyAvo9equAg258SCHTwNS9OpPtZh3lBXpurEkhfB53QNkc9Bc3jgopLo0fe
HCLdBbZmeQdqU2hfrp/zLlv1aArLq3TF0uXrS1xMzzF9PUYbaqcba0hfjy0l
mnnd39F+3FBwu+Tptomsn9INdx9MvXBmI+lf4bmze8d4bxnTv8K64WHXp8E0
nzuudxToqs6x/SrdEZCadCN8JqvneCBr5p3Mo4tofg8MveuNNW+l+TfgwTeN
oYY+1H8D5vopFOWn6T49cXJ3XItFIc3vibMO3uVuPueZ7oWMNN3kRWpWr/SC
e+vQ0ENn8m+Eb3d9TtEb8m/Em3e7q4wE5PfGlAN+zWYGjJXe4Fr9OHrf7V9M
9wGn7Ma1MzqMlT4w+q7HJvsw+X2Rpy//8l4h6b5Y8K7typfBRUznYeTelaA6
PtPBg+7lD/XyR0xX8uCUci4oZojNq+HBa2DeiV0P6P78sLChM83UiDH8MHv2
rjqehPL64UxYjM6jOWeZ3w+jvMH8gUHq748GaQsntP0M8/tjwrfcD+0XCpnf
HyfSkBPswt6jxh8tLqkte7ay8zh86FrZ7Nz54jTz8/EDL033tSX5+dBPcDN4
acfO1/AxqTfdw9qVMScAkRZjie4hrB4BGLm61eRFK/kDYKda1tsfzlgTgHCj
SXZljYw5mxD/PE81OZrNg03w9+pTN6WSfxPkZT83TV1B+TfhtWTOB4WA5g/E
oorSTNUdyh8Iz/yIVxorxspAnH8vNhU/Yvk0gYhZX+659y1jThDu3p6/Y/WT
AuYPgqVI8TLT5hTzB+HD2LPOYW3GmiBgIL9XYp/P/AIYDu0KcF/JGAI85l5X
691krBTAvfv74f7J5Bfg6tQmq0utjDnBSDpyeHt1AmME40Sd04TGP9TMHwwP
/zg9g6/ZeZpgePPr0t1OnWT+EHhu135xPJcxQnD/yIA85Sj1D4HP02KLLfrk
D8G9Q1k8bTXNH4q04pG2N+bkD4Xxrkk5Z4cZK0MxEht4K7KS/KHIUtS3X08l
fxgqO2x5kYfJHwbunBwH9ROaPwz668wOjpGuCUNz7Mk/dk6l+cORXhG+uaSP
/OG4Mv2WzhFrmj8ciemKawNK8ofj9YaxX4Xj5I9AjKpl+adS2n8E9FZ3rcia
TvNHwLzIeNkELdp/BASbS/dz/r8/ITpf/TYWtZ38QpTPvllTM0J+IV4W/x6e
G0L5hXh+JOXq23nkF6H/nFTJD2a6mQh72zmzZI8pjwhpT4Uq3ijTRSJwI6I+
/riA8olQY/7+aP0tVq8Wob1nrMfw79RPhP1Ocv46FdOfiRCPaaqEBuovxpIo
1+gYR+ovRvb9zbx0PvUXw6F+shBcxiIxFipf95ok0v2IsUfnz2PLqF4thr5B
dZcgkfYtRr3x0n3//IXVP/usZyyIqTSk/hJMiuB31BpQfwkMt/0mFnVTfwkG
/+3crX+e+kuQV/7K8Zkt5Zfg03OlefNP7H7UEohV47X9tdRfgs3NXUaPB1n9
Mwkud1ksdBbQ+4vE30azZc9dWL1ZJI5PjM70PE73GYmoY1oJGQ9p/5GwrZm4
o5/mV0biG+F8aXIG09WRcLI67zJlDe0/EkLV1/bNv9L+P+uxubk10fT5lSKi
r6yjJo7ySxHX5RFmo0X5pTi+3+7d/AHqL8XZBHOu9jL6fpEixdnjwmF6f+rP
9aYv+9L7Kb8USYfmlU9qpfxS5FbrlsZpUX4ZumJvDu+8RvllsP1rdrBjGOWX
IXnPghDjfOovQ8dfnjpuu0j7l8G6IPcfnWa0fxmqE+qKXO5RfhkaTYZzjT5S
fhm+nTErrY/eJ0cOc0fLmNsx1F+ObXff+Qd1sPcCOaqcC95qcam/HCeHfZc4
7qX+cmzR+jlpeii9PzlWXn6YvLGJ8svRkzwt/kUQ5ZfDsr/iizkX6f0psNoy
oJ9H3xdmCmQIK/pMp1B/Bfin7f0KJPlr/wMyfnub
         "]]}, {
        Hue[0.37820393249936934`, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 120], 0.008333333333333333]], 
         RGBColor[0.922526, 0.385626, 0.209179], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw9lAs01ekah7csIZ2YqJFMyKUMJ5coYfgRJRG27bJd970GQ0K5lX2mcQYp
l+M0zSgUCk04TUy5ZBepNUMoZyQqTZdR0pBqOhnTmVnzvWMty/p5/8/3vO/7
//Y2EiVwpfM4HE7L779//P3zZ8pVt4bv3LP2lCv7B6Z1ZZMuBidZVkPNzP0p
pVPVLGthkcaiVas1LrOsg/ony8wHT7axrItHMwF5XJNzLOvjxV7v9mUFtSwb
4q71t8otsY0sr4RW1ZqBRe9/zbIJvP1Ks/b317FshqRcPevb2eRfjZmp1Ssf
llO/H8LvjkrHgZqzLFtCpjmfd+AW+degPaKwUNWYfNZIje+cLVpKPhs81ryZ
ani8imVb3GvQ8+KP17C8Fo5cdcvzv9I+7BAdearKwZr6sYfRsOTQt0mU14Gf
/98+7f/ReethfGdjiE5NJcsOGM9aMVHRTs9vgGbWzp5/1FB2xGfjh5d1txLv
BIfms68ecxtYdsbGmNDmvlf/Yfkj1P8Sn/H9glaWXWB5qVhT/SXtzxXFYmO3
mzjDMmBs82PSzAibTw5Y/TShWreN5nVDa/Tin+bkVHeDj8WJpmER9ecOHaOc
3PIOqrujU13VKiKG+I3wtVhaMHmb9S/fiMZfdu9oVqZ5PCAZ6RnSG6W6B54q
pcgqrKnuiVaP3k2LPmA+uSe0/LOz38ipvgmhWf52S5rYfPJNWBt3vvqwL72f
zUjkKvIO5RG/GSNBlnUqr6nuBdWMyPHGZHZ/5F4Y7TC0ikyj+7QFda3HKmM7
id+C/Drvg13vaH5vQE/lcnc89e+Nt32n1Iy2UH0rxuQTkom/+K14dsin13iE
+vfBSGgtuAbE+6B13MbAv53qvnBWfy1KUCLeF5Ul7zo1Nen8bYhbvMrG7gW7
T/Jt+GD0yIDpBeL9cHShtnS5E53vh+E8TrT5V3T//BH46HZu2t0Tf2b4o/58
0c4LV+k8fxxLDfC7qsN8Cn8st9cSXR6k8wOQLIyN3/8v9jx+z9wNZ+3sqN8A
XDK0c6lZxeqKAHzcsLrV24X8XHTmiL5xtiaei6uZuhH5+uTnwtH1I4sdC04z
nouOEucX913IHwhx6OvflOyo/0AMavh08cOID8Rz6VdlWYdZXREIXZewwQZP
ljk8THf9M+1v9cTzcLGLp3fakmU5D2fsu0K/ySWeh4Kqktu7FMQHocTv/qzq
A+KD4K6n2f25D/FBsNxtsvm7OJo/CPHn143N1tL8wSgM2nWMX3uc8cEQdzmL
VjSwLA+GbU/jzwN95A9GREOYulcbq3NCkNwcvMbpZQXjQ3BiTmw+00V8CHJ2
mdfey2Z1RQiKXJ2FuyeID0Uxv7BP+zrxoTC5xbV3O8iyPBRbrVeErTQgPhQp
V9xMR51Z5vCRpKzDS1hP/fPh+0maWa0G8Xw80tyTbDxGPB9qxrYqX8yVMz4M
iqfBGbZfkz8Mpvpd6y1MiQ/DkYVXxvdRf4ow2J758k2UNvnDce1NQWQK9Ytw
NC6beqXuRvOH43qF2pOGHJYV4bjjrG3W0kJ8BH4rc9/55C9/BDTko1EeR4mP
wD2j/gWXesgfgdj9mZa2bdR/JPzsB1Xzz7KMSEwl/Hu+Sjr1H4lrl+oeuEvI
H4l9GYnx3qnER8Fuf1F54+fkj0Kr2VDEbAbxURgdPpc6+3fiozCUNk8/vp74
aFTZj30ZyKP9RyNzYfhSBx3io7F3XgyvI4f6j0aPjdPa8gaaX4CD5SUpGios
GwqQM6w/IWyjfgQoetgcUErnCQS4NrHyaWwZnS/As9Ount0Pmb9CALV16z6R
VpJPgCtN3wWNLGd5TAAdXV035QPkF2LcdrFnvxv5hXhsuLM/Opn8QlgN+VeW
15BfiGqFbeIhTfILYRo4X8m8j+UKIaQfO3Je0/1RCPHe8ffNfN6WMb8Qz7zy
sjgi8otgZ7Jc9QbNYyhCkW76wE0O+UX4/tMYg4IUxgtEyDie9qvWdvKL8MPe
mzbn8sgvwnRi4mBLBflFqMhtLG7SYfsZE2HDKuXEaQX5xZis6q28pcTqhmJk
pl9/qRCSX4wzvv1HHn9G84vh0PoF3m0lvxjPjfWqYtTJL0bstcySHe3kFyN3
wKtUOYD2L8YNxz2RTXHkl8B3GpnFRTS/BJsU/nu8jpJfgqz+Hf7IJL8ER/Sz
1wT1kl+CXOc5XpwLvX8JxhaIVvA7yS+Bo8/zrC3d5JdgKMfj3qQq3V8plsh5
YhSy/RpKUef96ZTxc/JLcXiyfE7zGfml8Jz15o95kV+Ki9U/nDN5y86rkGJ+
klFniRN9XqSovVLtG3qf9i+FdtNMuk4JzS/DE/1etw8vMN5Qhn2WHcMJIL8M
Aq0peeZF8suQ/s4ptvQO+WUo221xtdGX9i9D2+W7vT3uNL8MxRFjL60KyS9D
fuSNE330vjnbMT6XsaT0Z9r/djxwMrn443v0fbIdLcllJ/WeVrj+H4ZjadM=

         "]]}, {
        Hue[0.6142719099991583, 0.6, 0.6], 
        Directive[
         PointSize[
          NCache[
           Rational[1, 120], 0.008333333333333333]], 
         RGBColor[0.528488, 0.470624, 0.701351], 
         AbsoluteThickness[1.6]], 
        LineBox[CompressedData["
1:eJw9Vgs41PkanmrRHva0tYkTamxtyTmr3CPM65pcJ7cxrjPGjN0ubBeJEWOj
1tkcSiiRCZukOBXabYVKG9Xabpwi25R1cjvVsQpFrfOc39c8j2ee1/t7/+/3
ft/3/z1jGBXnJ53J4XAuTP/97/v/nxe8rwf1bVSGx3jsH1C2mewyG1QyPBsL
fByz+2uI/xiJuT1D156cZ3g++nwHDKoDzzKsi94WI4szMRUM6+NtiMG7jFLS
czGxufZtY2cZw5/ibcTuVSfiSxleiro7HRHSv9D5ZchMzbhyX0j1GCF0ZIt2
2nzijXHdtdA6qes4w3+DprnAMLqrimET+HbX87k/fMfwKpxpSv/npWDyM8UN
HZ/JikZ6vhkaeob1H7vS881hYtTYOtOMeAt0peuV2TsQtoTjbEu7vCbCVhhq
L00R+BC2RsyV7679O5vwaiwqlaWJRkoYtgGv7bGDew9hW9iOru6pS6PzayDt
twv+VZ3qt8OMNe2fnxScZNgeQePOgsLHZxh2QNhX+1rkd6l+HjImc9I2NlBe
4F78eGvwLIYVwJyMvOpLH9B5RxyymisX/sKwwhE2eYnjha5UjxOe3/dX8WuJ
d4Lm53YbP7EkvTMu3o27/Sz6KOOd8cpoRnf/EsrnAvepoMQjF4h3wTlB/s59
Q8S7Isj5yYhCzLDCFeVKp287XYl3Q8vWlTrW7+tzg9ax+iWvLam+tXBY+mNR
+BaGFWtR+1pSkjqPeHeo6VbO+aKAeHc0iEzmmuZR/euwck/+k5ou8l8H84ah
b+3/QXoPjJ8q9fnsOuk9cF8aaXL+JcvD8cQpB969lbSvCk/Yxm3fxSui+r0g
TAlO5nOJ94LXihmvY/OJ94aW4zKbiTLy98Z/uGfH/NLJ3wcVbx6s0/AkvQ8W
GW3kCPaT3hduKvUc+WHqry8kRU0aqXspHx+zmq4mDAnZefDx0em58tuUT8GH
rM4q3bea4WY++t2MFS89yH89LLL6lpdnMYz1aHS9Eev8O+nXQzjSvtBsA+nX
49WKRHNJMtXnh71pXaqOEPL3Q4ZW0tSpCqrXD3fFjpHlH7D9bPZDX/a2wrGx
Yqb3h3xkZM/tInYe/ihvj6+q4FK//GHF10h94Uz+/jieu7RjhxP5B0A0drY1
1Jj8A9A82el9RZ/qD8DP83Z7NgWz5zcHYGuly5yHeTTfQPh01OhlJ5F/IA4O
d/LtYkkfiI2efy0/vZ30gbAcfcZtyyR9ELrqqzJeC6h/QUj+UBj1IpLyB+Gi
9YYtI/S+NAdBjhM5FntIL4Bmvu9Q0gTrBwT4cCC94hse6QUwvVRyIqCO/AXQ
1/9FxhshfTDUE879PL6O8gdjdbuXcUIB6YPB2by4zMGI/IOxN1xLWyin/gnR
WMdPW3itiOmFaOu9GfX8/fsshFLVWhU2h/yF8PR5uulmLulDUCC//2Z5N/mH
oGtStX/rJM0vBO1LHNRyY1m+5hB8Flbif3gW7V8ofj+wp+E53b8IRUeA/bIj
Vey8IhSjJqLitFbSh+Lq0ZgJtcfkH4bFmYd3LDag+YWhtURvW+JPLI8iDJtO
fhN/Yojh5jB8dLJOqDlA+xeO1jjVlju/Uv/DIZTrbnvjQfnDwcl84aH5Pn84
RP8qPvhyM+kjsH67XrRNDvlH4PZ130e/ZVD9EdhaYwGdYdJPn6+Kzef9neYX
ieE03T+/SyR9JOy/H5WUXCb/SOzXfPfyvIL0kegNmnnMqZv8RVBo9OXUiBjm
ilCz4+a7uHCahwj+D9SyZusyXiTC1DyHvspVVJ8I2vzL5dtvMawUwc1lhWZr
PfVLhNHd87MDjrHnqUR4dZpXvpb6wRHjqxbXJNuHDHPFuPZCcOQoh/KIoa6M
KBLS+yIS41GZdXKiOeUTo7zn3PAY7ZNSjErOis3fj9O8xWj504LBHcSrxDDK
HNwZcpz8oxCbPuuLC26M50bhYJFL8UQdzTMKBlMTbzM+Jf9pvjkr2bGF9jMK
P9zK1kj/ifyjsNh9Z62vG/lHoVN6SDDqxfSqKIgLEpwz6L7jSGDq+8zm3HK2
v1wJErwDvHTPkL8E3EVZKd0bqP8S3JgsFhXKKb8Em0xzTC8cYFgpwc4jmzV1
tOm+k8BytrferYVMr5LAzvjGzH4rmn80so+2P7hN/eBGY7UFJ0JoRP7R+PGG
6EFlJPlH4571lH7gSvKPRv3yt20Xa8k/Gt5TE3obRin/9PkvDyWmfk3+0Rjz
0Lys94rtB0eK3lXhvfEp5C9FkipFOlxD+ydF6aDhkTs61H8p+hL2LcvZRP2X
oti6Ui2R8iqn+S6p2ZIEuq+ksG28nGKgTf2X4tSC0rMDFym/DGnK7OuL1Gn+
MuTKymSG9HsDMhy9GhC3xoT8ZZDlOxR4PaT7QTZ9nwt+q3ak/DIUWHG+NFPS
+yZDqlZul0kr+csgd4kP+O888o9BQ8yVzKehlD8G1XcG9j/1pfs0BmqPDljK
dhXz/gCygXxp
         "]]}}}, {{}, {}}}, {
    DisplayFunction -> Identity, DisplayFunction -> Identity, AspectRatio -> 
     NCache[GoldenRatio^(-1), 0.6180339887498948], Axes -> {True, True}, 
     AxesLabel -> {None, None}, AxesOrigin -> {0, 0}, DisplayFunction :> 
     Identity, Frame -> {{False, False}, {False, False}}, 
     FrameLabel -> {{None, None}, {None, None}}, 
     FrameTicks -> {{Automatic, Automatic}, {Automatic, Automatic}}, 
     GridLines -> {None, None}, GridLinesStyle -> Directive[
       GrayLevel[0.5, 0.4]], 
     Method -> {
      "OptimizePlotMarkers" -> True, "OptimizePlotMarkers" -> True, 
       "CoordinatesToolOptions" -> {"DisplayFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& ), "CopiedValueFunction" -> ({
           Identity[
            Part[#, 1]], 
           Identity[
            Part[#, 2]]}& )}}, 
     PlotRange -> {{0, 186.}, {0, 0.46800405271950724`}}, PlotRangeClipping -> 
     True, PlotRangePadding -> {{
        Scaled[0.02], 
        Scaled[0.02]}, {
        Scaled[0.02], 
        Scaled[0.05]}}, Ticks -> {Automatic, Automatic}}], 
   FormBox[
    FormBox[
     TemplateBox[{"1", "2", "3", "4", "5"}, "LineLegend", 
      DisplayFunction -> (FormBox[
        StyleBox[
         StyleBox[
          PaneBox[
           TagBox[
            GridBox[{{
               TagBox[
                GridBox[{{
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #2}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #3}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #4}, {
                   GraphicsBox[{{
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {
                    LineBox[{{0, 10}, {20, 10}}]}}, {
                    Directive[
                    EdgeForm[
                    Directive[
                    Opacity[0.3], 
                    GrayLevel[0]]], 
                    PointSize[0.5], 
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    AbsoluteThickness[1.6]], {}}}, AspectRatio -> Full, 
                    ImageSize -> {20, 10}, PlotRangePadding -> None, 
                    ImagePadding -> Automatic, 
                    BaselinePosition -> (Scaled[0.1] -> Baseline)], #5}}, 
                 GridBoxAlignment -> {
                  "Columns" -> {Center, Left}, "Rows" -> {{Baseline}}}, 
                 AutoDelete -> False, 
                 GridBoxDividers -> {
                  "Columns" -> {{False}}, "Rows" -> {{False}}}, 
                 GridBoxItemSize -> {"Columns" -> {{All}}, "Rows" -> {{All}}},
                  GridBoxSpacings -> {
                  "Columns" -> {{0.5}}, "Rows" -> {{0.8}}}], "Grid"]}}, 
             GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
             AutoDelete -> False, 
             GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{1}}, "Rows" -> {{0}}}], 
            "Grid"], Alignment -> Left, AppearanceElements -> None, 
           ImageMargins -> {{5, 5}, {5, 5}}, ImageSizeAction -> 
           "ResizeToFit"], LineIndent -> 0, StripOnInput -> False], {
         FontFamily -> "Arial"}, Background -> Automatic, StripOnInput -> 
         False], TraditionalForm]& ), 
      InterpretationFunction :> (RowBox[{"LineLegend", "[", 
         RowBox[{
           RowBox[{"{", 
             RowBox[{
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.368417, 0.506779, 0.709798], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.24561133333333335`, 0.3378526666666667, 
                    0.4731986666666667], FrameTicks -> None, PlotRangePadding -> 
                    None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.368417`", ",", "0.506779`", ",", "0.709798`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.368417, 0.506779, 0.709798]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.368417, 0.506779, 0.709798], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.880722, 0.611041, 0.142051], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.587148, 0.40736066666666665`, 0.09470066666666668], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.880722`", ",", "0.611041`", ",", "0.142051`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.880722, 0.611041, 0.142051]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.880722, 0.611041, 0.142051], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.560181, 0.691569, 0.194885], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.37345400000000006`, 0.461046, 0.12992333333333334`], 
                    FrameTicks -> None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.560181`", ",", "0.691569`", ",", "0.194885`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.560181, 0.691569, 0.194885]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.560181, 0.691569, 0.194885], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.922526, 0.385626, 0.209179], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.6150173333333333, 0.25708400000000003`, 
                    0.13945266666666667`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.922526`", ",", "0.385626`", ",", "0.209179`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.922526, 0.385626, 0.209179]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.922526, 0.385626, 0.209179], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}], 
               ",", 
               RowBox[{"Directive", "[", 
                 RowBox[{
                   RowBox[{"PointSize", "[", 
                    FractionBox["1", "120"], "]"}], ",", 
                   InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    RGBColor[0.528488, 0.470624, 0.701351], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> 
                    RGBColor[
                    0.3523253333333333, 0.3137493333333333, 
                    0.46756733333333333`], FrameTicks -> None, 
                    PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{
                    Automatic, 
                    1.35 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                    StyleBox[
                    RowBox[{"RGBColor", "[", 
                    RowBox[{"0.528488`", ",", "0.470624`", ",", "0.701351`"}],
                     "]"}], NumberMarks -> False]], Appearance -> None, 
                    BaseStyle -> {}, BaselinePosition -> Baseline, 
                    DefaultBaseStyle -> {}, ButtonFunction :> 
                    With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    RGBColor[0.528488, 0.470624, 0.701351]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["RGBColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {
                    "SelectionDeparture", "ParentChanged", 
                    "EvaluatorQuit"}]]]], BaseStyle -> Inherited, Evaluator -> 
                    Automatic, Method -> "Preemptive"], 
                    RGBColor[0.528488, 0.470624, 0.701351], Editable -> False,
                     Selectable -> False], ",", 
                   RowBox[{"AbsoluteThickness", "[", "1.6`", "]"}]}], "]"}]}],
              "}"}], ",", 
           RowBox[{"{", 
             RowBox[{#, ",", #2, ",", #3, ",", #4, ",", #5}], "}"}], ",", 
           RowBox[{"LegendMarkers", "\[Rule]", 
             RowBox[{"{", 
               RowBox[{
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}], ",", 
                 RowBox[{"{", 
                   RowBox[{"False", ",", "Automatic"}], "}"}]}], "}"}]}], ",", 
           RowBox[{"Joined", "\[Rule]", 
             RowBox[{"{", 
               
               RowBox[{
                "True", ",", "True", ",", "True", ",", "True", ",", "True"}], 
               "}"}]}], ",", 
           RowBox[{"LabelStyle", "\[Rule]", 
             RowBox[{"{", "}"}]}], ",", 
           RowBox[{"LegendLayout", "\[Rule]", "\"Column\""}]}], "]"}]& ), 
      Editable -> True], TraditionalForm], TraditionalForm]},
  "Legended",
  DisplayFunction->(GridBox[{{
      TagBox[
       ItemBox[
        PaneBox[
         TagBox[#, "SkipImageSizeLevel"], Alignment -> {Center, Baseline}, 
         BaselinePosition -> Baseline], DefaultBaseStyle -> "Labeled"], 
       "SkipImageSizeLevel"], 
      ItemBox[#2, DefaultBaseStyle -> "LabeledLabel"]}}, 
    GridBoxAlignment -> {"Columns" -> {{Center}}, "Rows" -> {{Center}}}, 
    AutoDelete -> False, GridBoxItemSize -> Automatic, 
    BaselinePosition -> {1, 1}]& ),
  Editable->True,
  InterpretationFunction->(RowBox[{"Legended", "[", 
     RowBox[{#, ",", 
       RowBox[{"Placed", "[", 
         RowBox[{#2, ",", "After"}], "]"}]}], "]"}]& )]], "Output",
 CellChangeTimes->{3.8032155372432537`*^9, 3.803315043137895*^9, 
  3.803315091278241*^9, 3.803315134027857*^9, 3.803315266899983*^9, 
  3.80331540188139*^9},
 CellLabel->
  "Out[2547]=",ExpressionUUID->"e741c3fa-b84b-49b1-a611-60dfe11446f7"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{315, Automatic}, {-94, Automatic}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (June 30, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"2b0a3768-c0a3-4062-8b5f-184faa2a7a3f"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 1862, 51, 283, "Input",ExpressionUUID->"fe8ba46c-0895-43eb-a31a-1cd28862be43"],
Cell[2423, 73, 3520, 85, 325, "Input",ExpressionUUID->"0fb83867-76af-4e40-9129-2d60b439cfd4"],
Cell[5946, 160, 509, 10, 73, "Input",ExpressionUUID->"5954d679-1f77-44d6-a97e-7bb9e55ea28b"],
Cell[6458, 172, 1507, 40, 136, "Input",ExpressionUUID->"21fbf449-f1aa-4e4a-9074-c9cde8962832"],
Cell[CellGroupData[{
Cell[7990, 216, 239, 4, 30, "Input",ExpressionUUID->"2163b6ae-0336-4400-8b10-3d84b94fb171"],
Cell[8232, 222, 7346, 156, 149, "Output",ExpressionUUID->"1132272b-0b31-4826-8036-30932d8d78fb"]
}, Open  ]],
Cell[CellGroupData[{
Cell[15615, 383, 236, 4, 30, "Input",ExpressionUUID->"b6246fb4-4675-4f3a-90a6-fb5328838d29"],
Cell[15854, 389, 816, 14, 34, "Output",ExpressionUUID->"0a85a503-cec6-40c6-9790-e1247233b4ea"]
}, Open  ]],
Cell[CellGroupData[{
Cell[16707, 408, 255, 5, 30, "Input",ExpressionUUID->"610abb73-5886-4401-8dcf-50dea13e861f"],
Cell[16965, 415, 695, 11, 34, "Output",ExpressionUUID->"34c42153-e205-4309-bbc7-54853f622cce"]
}, Open  ]],
Cell[CellGroupData[{
Cell[17697, 431, 652, 12, 30, "Input",ExpressionUUID->"b33a858e-3d77-4534-8bfd-50cbc6c2e1d1"],
Cell[18352, 445, 671, 11, 34, "Output",ExpressionUUID->"c26de99e-3ac1-47a5-9a61-5224844861c1"]
}, Open  ]],
Cell[19038, 459, 1719, 46, 136, "Input",ExpressionUUID->"00a7f7cb-aaf6-46db-87c7-782f714442c4"],
Cell[20760, 507, 266, 6, 52, "Input",ExpressionUUID->"2c77561d-6c94-47eb-b677-4a9a950a826e"],
Cell[21029, 515, 919, 24, 73, "Input",ExpressionUUID->"a0d7f61f-1a66-4225-9c0f-1f7dabd6e6a6"],
Cell[21951, 541, 2552, 65, 115, "Input",ExpressionUUID->"4ae08478-dacc-4b25-a418-a51fd3b0ac16"],
Cell[CellGroupData[{
Cell[24528, 610, 6831, 161, 304, "Input",ExpressionUUID->"e4bce7eb-3ae9-4cbc-a22d-8432ab87d54f"],
Cell[31362, 773, 903, 16, 24, "Message",ExpressionUUID->"2b196ac6-8547-4e4d-b400-cb547a357934"]
}, Open  ]],
Cell[CellGroupData[{
Cell[32302, 794, 191, 3, 30, "Input",ExpressionUUID->"dc5a96f0-b532-45ed-870f-7420d4413951"],
Cell[32496, 799, 71111, 1327, 159, "Output",ExpressionUUID->"41b09827-f1f5-484e-8ffa-6de5ccd1fdad"]
}, Open  ]],
Cell[103622, 2129, 3859, 99, 451, "Input",ExpressionUUID->"befac3fa-90ed-471f-81c2-c0a7e8b8bf28"],
Cell[107484, 2230, 180, 3, 30, "Input",ExpressionUUID->"17b346e5-e607-4b3f-9ef6-837d8536c160"],
Cell[107667, 2235, 1328, 37, 94, "Input",ExpressionUUID->"a77d607b-ac9e-46ef-992d-86a65a4d7df5"],
Cell[108998, 2274, 1385, 38, 102, "Input",ExpressionUUID->"785a2d6c-1cf9-4937-a17b-563e730139ae"],
Cell[110386, 2314, 1166, 31, 73, "Input",ExpressionUUID->"f3af37c8-b4a5-4b8e-a238-cfa203db4f51"],
Cell[111555, 2347, 682, 18, 30, "Input",ExpressionUUID->"031e9eab-5c03-4dc9-8827-6a4964eacd76"],
Cell[112240, 2367, 154, 3, 30, "Input",ExpressionUUID->"5b079b1d-1f9f-43d6-a1b3-368d2e6c6ac9"],
Cell[CellGroupData[{
Cell[112419, 2374, 257, 7, 30, "Input",ExpressionUUID->"2662166a-3b8e-45bc-be12-ca6921726dba"],
Cell[112679, 2383, 119788, 2086, 103, "Output",ExpressionUUID->"c8795f4b-85eb-4290-8e51-50c6ff796680"]
}, Open  ]],
Cell[CellGroupData[{
Cell[232504, 4474, 5736, 148, 430, "Input",ExpressionUUID->"ed5930d5-acd0-4616-9882-9d6d81a9a7f4"],
Cell[238243, 4624, 120653, 2093, 193, "Echo",ExpressionUUID->"201497a0-922f-4bde-9bed-74292ff82f04"],
Cell[358899, 6719, 545, 12, 24, "Message",ExpressionUUID->"f96e0122-912e-4c4f-9df1-f975c58a39f7"],
Cell[359447, 6733, 281, 5, 34, "Output",ExpressionUUID->"151b5d31-c055-4fcb-8b23-ca3c275be378"]
}, Open  ]],
Cell[CellGroupData[{
Cell[359765, 6743, 225, 4, 30, "Input",ExpressionUUID->"db0c885f-598e-48fa-8129-a583664372a7"],
Cell[359993, 6749, 179, 3, 34, "Output",ExpressionUUID->"02950f67-cea5-446e-ab92-1c8474b589b1"]
}, Open  ]],
Cell[CellGroupData[{
Cell[360209, 6757, 185, 3, 30, "Input",ExpressionUUID->"c0e826dc-9bbc-4ecb-b01e-338d5ddb4b31"],
Cell[360397, 6762, 7270, 154, 149, "Output",ExpressionUUID->"90ad006d-d8f6-43ba-940b-ac9fa493c1e6"]
}, Open  ]],
Cell[CellGroupData[{
Cell[367704, 6921, 360, 7, 30, "Input",ExpressionUUID->"e7d8323e-1a07-44f5-934b-25c321e37a85"],
Cell[368067, 6930, 1700, 35, 60, "Output",ExpressionUUID->"ae012b9b-355a-4cde-8fbd-07267a71cb56"]
}, Open  ]],
Cell[CellGroupData[{
Cell[369804, 6970, 167, 4, 30, "Input",ExpressionUUID->"bb1da80f-0140-4267-a0f2-5a99540694ac"],
Cell[369974, 6976, 2125, 61, 56, "Output",ExpressionUUID->"4394f06e-c9ba-49d2-b6c8-4dda5b62ac0a"]
}, Open  ]],
Cell[CellGroupData[{
Cell[372136, 7042, 1021, 22, 52, "Input",ExpressionUUID->"58ed1fb4-edab-42ff-8f18-49c52e91fdf8"],
Cell[373160, 7066, 1740, 31, 42, "Message",ExpressionUUID->"5e155bf9-71ce-470f-8ea6-46f839fe7eb7"],
Cell[374903, 7099, 1024, 22, 37, "Output",ExpressionUUID->"231c5045-98a9-4e73-a1bc-ee52478792fe"]
}, Open  ]],
Cell[CellGroupData[{
Cell[375964, 7126, 414, 10, 30, "Input",ExpressionUUID->"a28cead7-e463-4039-9596-02cd3ccaf5bc"],
Cell[376381, 7138, 1531, 32, 60, "Output",ExpressionUUID->"66507f8b-f4c2-450e-95b5-8ee2a6c11dba"]
}, Open  ]],
Cell[CellGroupData[{
Cell[377949, 7175, 307, 7, 30, "Input",ExpressionUUID->"cec4f689-fee5-428f-a752-547850966fb6"],
Cell[378259, 7184, 117981, 2055, 103, "Output",ExpressionUUID->"573634fa-0f31-49c1-9ede-90f1483ba2c2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[496277, 9244, 314, 6, 30, "Input",ExpressionUUID->"7f22fd66-c4ba-4434-b752-092e6ad04383"],
Cell[496594, 9252, 68383, 1264, 63, "Output",ExpressionUUID->"af70b4c5-7190-4051-97d1-b2478f2264fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[565014, 10521, 461, 8, 30, "Input",ExpressionUUID->"6942b595-de19-4614-aec4-00f3f9836bb8"],
Cell[565478, 10531, 3589, 58, 203, "Output",ExpressionUUID->"3d58ae5c-48a3-4253-96d9-19966e110066"]
}, Open  ]],
Cell[CellGroupData[{
Cell[569104, 10594, 320, 6, 30, "Input",ExpressionUUID->"f617f595-8163-490f-8c23-c92da09e1987"],
Cell[569427, 10602, 49841, 950, 159, "Output",ExpressionUUID->"1cb34fac-9fd3-4429-976f-80ded48ab193"]
}, Open  ]],
Cell[CellGroupData[{
Cell[619305, 11557, 365, 7, 30, "Input",ExpressionUUID->"2ae5b6ce-c65e-4a6f-ac6e-e430bdc73d9e"],
Cell[619673, 11566, 342, 5, 34, "Output",ExpressionUUID->"87eeab58-4482-4fab-864d-b3f561c6abdc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[620052, 11576, 221, 4, 30, "Input",ExpressionUUID->"e9d994a1-218a-49f4-a11e-d317288f846b"],
Cell[620276, 11582, 5648, 118, 63, "Output",ExpressionUUID->"6b5a7a42-f083-4463-8cd8-ac8be761d01b"]
}, Open  ]],
Cell[625939, 11703, 1284, 35, 73, "Input",ExpressionUUID->"26076724-0025-481a-9900-6dea646c3cc2"],
Cell[CellGroupData[{
Cell[627248, 11742, 226, 4, 30, "Input",ExpressionUUID->"193ea948-9a92-4065-a506-2e542dfb32f1"],
Cell[627477, 11748, 6229, 128, 63, "Output",ExpressionUUID->"b1285856-fc79-43cd-b153-c1d2551999c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[633743, 11881, 182, 3, 30, "Input",ExpressionUUID->"2374d89d-2530-4a2e-bb52-966d372c48f1"],
Cell[633928, 11886, 630, 15, 34, "Output",ExpressionUUID->"d2acc741-5942-4555-bd32-de7578864e91"]
}, Open  ]],
Cell[CellGroupData[{
Cell[634595, 11906, 194, 3, 30, "Input",ExpressionUUID->"d987c821-bfca-4062-8942-d2a7e3784f18"],
Cell[634792, 11911, 71481, 1320, 261, "Output",ExpressionUUID->"1b255a0e-b5d1-4381-8c3b-e65fbaa51fd4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[706310, 13236, 268, 5, 30, "Input",ExpressionUUID->"8c169635-8e13-48c4-9443-66dcd5b3fb4a"],
Cell[706581, 13243, 201, 5, 34, "Output",ExpressionUUID->"0f95ce1b-a2f8-4f13-8a9a-5b4b785f7358"]
}, Open  ]],
Cell[CellGroupData[{
Cell[706819, 13253, 329, 7, 30, "Input",ExpressionUUID->"d87787ca-e9b7-41e6-8b81-106b5584e683"],
Cell[707151, 13262, 395, 9, 34, "Output",ExpressionUUID->"3d47b272-8043-46bc-bbf9-48daa5b0f009"]
}, Open  ]],
Cell[CellGroupData[{
Cell[707583, 13276, 2107, 57, 220, "Input",ExpressionUUID->"22e4600f-89de-405f-b508-dc6cab62dd67"],
Cell[709693, 13335, 40096, 935, 1925, "Output",ExpressionUUID->"dea6f593-f3fc-4f98-8f5f-734ef399f880"]
}, Closed]],
Cell[CellGroupData[{
Cell[749826, 14275, 215, 4, 26, "Input",ExpressionUUID->"e0be400d-b1de-455d-9af4-84fbeaec74bf"],
Cell[750044, 14281, 333, 8, 34, "Output",ExpressionUUID->"b31cea23-1ce5-4889-af2d-207dfef54b5f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[750414, 14294, 670, 16, 94, "Input",ExpressionUUID->"5d4479ff-127f-466f-8966-43929ac63945"],
Cell[751087, 14312, 359, 8, 34, "Output",ExpressionUUID->"5fad0290-f7f4-412a-a0ad-49089f121409"],
Cell[751449, 14322, 6763, 177, 233, "Output",ExpressionUUID->"5d100045-2e71-4966-a189-5e14fe0de2c4"]
}, Open  ]],
Cell[CellGroupData[{
Cell[758249, 14504, 278, 7, 30, "Input",ExpressionUUID->"4f1d1054-ec2b-4934-9ad2-f925e7beb109"],
Cell[758530, 14513, 372, 7, 34, "Output",ExpressionUUID->"ed12af26-ee3e-46e7-abc6-841056b993bc"]
}, Open  ]],
Cell[CellGroupData[{
Cell[758939, 14525, 301, 6, 30, "Input",ExpressionUUID->"7c49a379-5ac0-45dc-85e7-fa634daec502"],
Cell[759243, 14533, 34751, 935, 3920, "Output",ExpressionUUID->"f4685a22-a618-477e-82d6-f1c896bcb6cb"]
}, Closed]],
Cell[CellGroupData[{
Cell[794031, 15473, 655, 14, 26, "Input",ExpressionUUID->"11191a4b-5421-4796-9d5d-17b55018ee2c"],
Cell[794689, 15489, 298, 5, 34, "Output",ExpressionUUID->"fe73fc37-2056-4371-b3f7-5424f68cefb1"]
}, Open  ]],
Cell[795002, 15497, 327, 8, 30, "Input",ExpressionUUID->"b77af124-82be-4006-aee4-3e333f015703"],
Cell[CellGroupData[{
Cell[795354, 15509, 256, 5, 30, "Input",ExpressionUUID->"a708172d-1b52-4c45-872e-e701049287a2"],
Cell[795613, 15516, 108688, 2099, 575, "Output",ExpressionUUID->"1023c6aa-bf7c-46b0-8201-47aa8fa89987"]
}, Open  ]],
Cell[CellGroupData[{
Cell[904338, 17620, 836, 17, 30, "Input",ExpressionUUID->"041063f4-6fd8-40db-9860-c820c7d464bc"],
Cell[905177, 17639, 36750, 722, 247, "Output",ExpressionUUID->"e741c3fa-b84b-49b1-a611-60dfe11446f7"]
}, Open  ]]
}
]
*)

