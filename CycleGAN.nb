(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[   1782523,      32957]
NotebookOptionsPosition[   1774255,      32827]
NotebookOutlinePosition[   1774650,      32843]
CellTagsIndexPosition[   1774607,      32840]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{
Cell[BoxData[
 RowBox[{
  RowBox[{"birds", "=", 
   RowBox[{"DeleteMissing", "[", 
    RowBox[{"Nest", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"Flatten", "[", 
        RowBox[{"EntityValue", "[", 
         RowBox[{"#", ",", 
          RowBox[{"EntityProperty", "[", 
           RowBox[{"\"\<Species\>\"", ",", "\"\<SubEntities\>\""}], "]"}]}], 
         "]"}], "]"}], "&"}], ",", 
      RowBox[{"{", 
       RowBox[{"Entity", "[", 
        RowBox[{"\"\<Species\>\"", ",", "\"\<Class:Aves\>\""}], "]"}], "}"}], 
      ",", "4"}], "]"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803147371945195*^9, 3.8031473719509993`*^9}},
 CellLabel->
  "In[2934]:=",ExpressionUUID->"c676e526-151a-48de-8d12-6d7b56c9bd41"],

Cell[BoxData[
 RowBox[{
  RowBox[{"birdnames", "=", 
   RowBox[{"DeleteMissing", "@", 
    RowBox[{"EntityValue", "[", 
     RowBox[{"birds", ",", 
      RowBox[{"EntityProperty", "[", 
       RowBox[{"\"\<Species\>\"", ",", "\"\<Name\>\""}], "]"}]}], "]"}]}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.803147377849296*^9, 3.803147390908334*^9}},
 CellLabel->
  "In[2933]:=",ExpressionUUID->"6eb694eb-2501-476b-939b-26a738db61d3"],

Cell[BoxData[
 RowBox[{"birdnames", ";"}]], "Input",
 CellChangeTimes->{{3.8031473946216393`*^9, 3.803147405971306*^9}},
 CellLabel->
  "In[2932]:=",ExpressionUUID->"e7c09787-6237-4603-81f6-d25bd0953b2d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"(*", "**********************************)"}], 
  RowBox[{"(*", 
   RowBox[{"Hyper", "-", 
    RowBox[{"parameters", " ", 
     RowBox[{"(", 
      RowBox[{"to", " ", "be", " ", 
       RowBox[{"tuned", "!"}]}], ")"}]}]}], "*)"}], 
  RowBox[{"(*", "**********************************)"}], 
  "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"$jensen", "=", "True"}], ";"}], 
   RowBox[{"(*", 
    RowBox[{"Jensen", " ", "or", " ", "Wasserstein"}], "*)"}], 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"$numposfeatures", "=", "0"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$numlatent", "=", "28"}], ";", 
    RowBox[{"(*", 
     RowBox[{
     "Dimension", " ", "of", " ", "the", " ", "latent", " ", "space"}], 
     "*)"}], "\[IndentingNewLine]", 
    RowBox[{"$numhiddens", "=", "64"}], ";", 
    RowBox[{"(*", 
     RowBox[{"CNN", " ", "Hidden", " ", "Layers"}], "*)"}], 
    "\[IndentingNewLine]", 
    RowBox[{"$depth", "=", "3"}], ";", 
    RowBox[{"(*", 
     RowBox[{"Number", " ", "of", " ", "CNN"}], "*)"}], "\[IndentingNewLine]", 
    RowBox[{"$kernelSize", "=", "5"}], ";", " ", 
    RowBox[{"(*", 
     RowBox[{
     "Look", " ", "at", " ", "five", " ", "grams", " ", "of", " ", 
      "characters"}], "*)"}], "\n", 
    RowBox[{"$batchsize", "=", "32"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$discriminatorTerminalTokensQ", "=", "True"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$generatorTerminalTokensQ", "=", "True"}], ";"}], "\n", 
   RowBox[{
    RowBox[{"$updateDiscriminator", "=", "1"}], ";"}], "\[IndentingNewLine]", 
   
   RowBox[{"(*", 
    RowBox[{"Other", " ", "variables"}], "*)"}], "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"ngramInfo", " ", "=", " ", 
     RowBox[{"{", "}"}]}], ";"}]}]}]], "Input",
 CellChangeTimes->{{3.803147889878153*^9, 3.8031478899570208`*^9}, 
   3.8031479409874907`*^9, {3.803147974195011*^9, 3.803147986962688*^9}, {
   3.803148183585414*^9, 3.803148185776575*^9}, {3.803148840810319*^9, 
   3.803148841258254*^9}, 3.803149338484556*^9, {3.803312159862494*^9, 
   3.80331216045413*^9}, {3.803323439537715*^9, 3.803323439916525*^9}, {
   3.803323611494383*^9, 3.803323611866644*^9}, {3.803346538286625*^9, 
   3.803346538619646*^9}, {3.803390502117742*^9, 3.8033905025027447`*^9}},
 CellLabel->
  "In[3281]:=",ExpressionUUID->"b4217deb-6ac4-4c64-b9ef-94c333fea94c"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8033457115177927`*^9, 
  3.80334575711264*^9}},ExpressionUUID->"2f49172f-e271-4aae-9efc-\
53e7f089fa99"],

Cell[BoxData[
 RowBox[{
  RowBox[{"englishNames", " ", "=", " ", 
   RowBox[{
   "Import", "[", 
    "\"\</Users/sumansigdel/Downloads/EnglishName-master/top_1000_EN_\:5973\
\:6027names_english.csv\>\"", "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803388801982836*^9, 3.803388825305174*^9}, {
  3.803388911186158*^9, 3.803388929603853*^9}},
 CellLabel->
  "In[3248]:=",ExpressionUUID->"7b40b5d9-6400-4b65-9076-69328dc33104"],

Cell[BoxData[
 RowBox[{
  RowBox[{"englishNames", " ", "=", " ", 
   RowBox[{"Flatten", "@", "englishNames"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803388931565867*^9, 3.8033889613567677`*^9}},
 CellLabel->
  "In[3249]:=",ExpressionUUID->"5c907df2-b2a1-4b59-9dca-4af3917472a1"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizedEnglishNames", " ", "=", " ", 
   RowBox[{"normalizeText", "@", "englishNames"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803388964172851*^9, 3.803388974477708*^9}},
 CellLabel->
  "In[3250]:=",ExpressionUUID->"2ac3008e-77fe-4e33-a068-312aa303e592"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803388990473181*^9, 3.803389011811673*^9}, {
   3.8033890540863533`*^9, 3.803389071099347*^9}, 3.803390268175111*^9},
 CellLabel->
  "In[3239]:=",ExpressionUUID->"7a997a4d-6508-44a9-ab8b-1e1e8db22eae"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"normalizedEnglishNames", "//", "Length"}]], "Input",
 CellChangeTimes->{{3.803389013757423*^9, 3.80338902051621*^9}},
 CellLabel->
  "In[3251]:=",ExpressionUUID->"c926d999-f0ad-415d-975b-7e0953a5d37d"],

Cell[BoxData["1000"], "Output",
 CellChangeTimes->{3.8033890208257513`*^9, 3.8033904270668163`*^9},
 CellLabel->
  "Out[3251]=",ExpressionUUID->"f63990da-146a-4628-9542-931a0172cb74"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"spanishNames", " ", "=", " ", 
   RowBox[{
   "Import", "[", "\"\</Users/sumansigdel/Downloads/ESGivenMale.csv\>\"", 
    "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8033901757229757`*^9, 3.8033902273877773`*^9}},
 CellLabel->
  "In[3252]:=",ExpressionUUID->"44fcf7f0-d08d-4cc8-ad45-60e780a7b76f"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizedSpanishNames", " ", "=", " ", 
   RowBox[{"normalizeText", "@", 
    RowBox[{"Flatten", "@", "spanishNames"}]}]}], ";"}]], "Input",
 CellChangeTimes->{{3.8033902225486526`*^9, 3.8033902517366657`*^9}},
 CellLabel->
  "In[3253]:=",ExpressionUUID->"cac2f2b1-65f1-4870-9624-cde58e79397d"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizedSpanishNames", " ", "=", " ", 
   RowBox[{"Take", "[", 
    RowBox[{"normalizedSpanishNames", ",", "1000"}], "]"}]}], ";"}]], "Input",\

 CellChangeTimes->{{3.80338892653111*^9, 3.803388927498334*^9}, {
  3.8033902741614237`*^9, 3.803390287009069*^9}},
 CellLabel->
  "In[3247]:=",ExpressionUUID->"d37e3be6-158c-4739-bcfd-1da0b127ec4b"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803389074348075*^9, 3.803389078468912*^9}, {
  3.803390254189578*^9, 
  3.803390263849378*^9}},ExpressionUUID->"151eda56-fcff-42e0-92dd-\
db6ea4b1b7f6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"normalizedbirdnames", "=", 
   RowBox[{"normalizeText", "@", "birdnames"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"counts", "=", 
   RowBox[{"Counts", "[", 
    RowBox[{"StringLength", "/@", "normalizedSpanishNames"}], "]"}]}], ";", 
  RowBox[{"(*", 
   RowBox[{
   "We", " ", "will", " ", "use", " ", "this", " ", "to", " ", "generate", 
    " ", "a", " ", "realistic", " ", "length"}], "*)"}], 
  RowBox[{"characters", "=", 
   RowBox[{"Union", "[", 
    RowBox[{"Flatten", "@", 
     RowBox[{"Characters", "@", "normalizedSpanishNames"}]}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"characters2", "=", 
   RowBox[{"If", "[", 
    RowBox[{"$discriminatorTerminalTokensQ", ",", 
     RowBox[{"Join", "[", 
      RowBox[{"characters", ",", 
       RowBox[{"{", 
        RowBox[{"StartOfString", ",", "EndOfString"}], "}"}]}], "]"}], ",", 
     "characters"}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"netpreproc", "=", 
   RowBox[{"NetEncoder", "[", 
    RowBox[{"{", 
     RowBox[{"\"\<Characters\>\"", ",", "characters2", ",", 
      RowBox[{"\"\<IgnoreCase\>\"", "\[Rule]", "True"}]}], "}"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", "characters2"}], "Input",
 CellChangeTimes->{{3.8031474530373*^9, 3.803147455351972*^9}, 
   3.803147507449728*^9, {3.8031489289288473`*^9, 3.80314892928084*^9}, {
   3.8033462214694233`*^9, 3.8033462227935963`*^9}, {3.803346471868348*^9, 
   3.803346486636146*^9}, {3.8033904514212914`*^9, 3.803390474805284*^9}},
 CellLabel->
  "In[3267]:=",ExpressionUUID->"0d5b54f2-807f-475c-a069-7feac529e362"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"\<\"a\"\>", ",", "\<\"b\"\>", ",", "\<\"c\"\>", ",", "\<\"d\"\>", 
   ",", "\<\"e\"\>", ",", "\<\"f\"\>", ",", "\<\"g\"\>", ",", "\<\"h\"\>", 
   ",", "\<\"i\"\>", ",", "\<\"j\"\>", ",", "\<\"k\"\>", ",", "\<\"l\"\>", 
   ",", "\<\"m\"\>", ",", "\<\"n\"\>", ",", "\<\"o\"\>", ",", "\<\"p\"\>", 
   ",", "\<\"q\"\>", ",", "\<\"r\"\>", ",", "\<\"s\"\>", ",", "\<\"t\"\>", 
   ",", "\<\"u\"\>", ",", "\<\"v\"\>", ",", "\<\"w\"\>", ",", "\<\"x\"\>", 
   ",", "\<\"y\"\>", ",", "\<\"z\"\>", ",", "StartOfString", ",", 
   "EndOfString"}], "}"}]], "Output",
 CellChangeTimes->{
  3.803346223175681*^9, {3.803346306694222*^9, 3.8033463184299517`*^9}, 
   3.8033463791283493`*^9, 3.803346489304447*^9, {3.803390454725182*^9, 
   3.80339047699531*^9}},
 CellLabel->
  "Out[3271]=",ExpressionUUID->"eccab258-6be5-436b-90d5-b9589f7cce4e"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8033904417786903`*^9, 3.8033904602966337`*^9}},
 CellLabel->
  "In[3261]:=",ExpressionUUID->"aaa4a10d-048f-4b76-b3d9-79626527c3d6"],

Cell[BoxData[
 RowBox[{
  RowBox[{"normalizeText", "[", "s_", "]"}], " ", ":=", " ", 
  RowBox[{"ToLowerCase", " ", "@", " ", 
   RowBox[{"RemoveDiacritics", " ", "@", " ", 
    RowBox[{"StringReplace", "[", 
     RowBox[{"s", ",", "\n", "\t", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{
         RowBox[{"WordBoundary", "~~", 
          RowBox[{"(", 
           RowBox[{"WordCharacter", ".."}], ")"}], "~~", "\"\<.\>\""}], 
         "\[RuleDelayed]", "\"\<\>\""}], ",", 
        RowBox[{"(*", 
         RowBox[{
          RowBox[{"Remove", " ", "\"\<mr.\>\""}], ",", "\"\<jr.\>\"", ",", 
          "..."}], "*)"}], "\n", "\t", 
        RowBox[{
         RowBox[{"\"\<\[Mars]\>\"", "|", "\"\<\[Venus]\>\""}], "\[Rule]", 
         "\"\<\>\""}], ",", 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "gender", " ", "hints"}], "*)"}], "\n", "\t", 
        
        RowBox[{
         RowBox[{"\"\<\[Hyphen]\>\"", "|", "\"\<-\>\"", "|", "\"\<'\>\""}], 
         "\[Rule]", "\"\< \>\""}], ",", 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
         "*)"}], "\n", "\t", 
        RowBox[{"DigitCharacter", "\[Rule]", "\"\<\>\""}], " ", ",", 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
         "*)"}], "\n", "\t", 
        RowBox[{
         RowBox[{"\"\<(\>\"", "|", "\"\<)\>\""}], " ", "\[Rule]", " ", 
         "\"\<\>\""}], ",", 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "Brackets"}], "*)"}], "\n", "\t", 
        RowBox[{
         RowBox[{"\"\<%\>\"", "|", "\"\<:\>\""}], " ", "\[Rule]", " ", 
         "\"\<\>\""}], ",", 
        RowBox[{"(*", 
         RowBox[{"Remove", " ", "Colons", " ", "and", " ", "%"}], "*)"}], 
        "\[IndentingNewLine]", 
        RowBox[{
         RowBox[{"\"\<\:02bb\>\"", " ", "|", "\"\<\[OpenCurlyQuote]\>\""}], 
         "\[Rule]", "  ", "\"\<\>\""}], ",", "\[IndentingNewLine]", 
        RowBox[{"\"\<`\>\"", "\[Rule]", "\"\<\>\""}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"\"\< \>\"", " ", "\[Rule]", " ", "\"\<\>\""}]}], 
       "\[IndentingNewLine]", "}"}]}], "\[IndentingNewLine]", 
     "]"}]}]}]}]], "Input",
 CellChangeTimes->{{3.803147443745962*^9, 3.803147459479797*^9}, 
   3.803147489841957*^9, {3.803147530685534*^9, 3.803147574256495*^9}, {
   3.803147621054072*^9, 3.803147644029422*^9}, {3.803345613971918*^9, 
   3.803345630930564*^9}, {3.803345774117365*^9, 3.8033457982851*^9}, {
   3.803345903633169*^9, 3.803345914967928*^9}, {3.803345996001169*^9, 
   3.80334599700961*^9}, {3.803346278575625*^9, 3.803346316744649*^9}, {
   3.8033463693512697`*^9, 3.803346375240857*^9}},
 CellLabel->
  "In[3016]:=",ExpressionUUID->"52d93131-ef83-40fe-a9ae-dc6da959e168"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"nonlinearityDiscriminator", "=", 
   RowBox[{"ElementwiseLayer", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"#", ">", "0"}], ",", "#", ",", 
       RowBox[{"0.2", "*", "#"}]}], "]"}], "&"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"nonlinearityGenerator", "=", 
   RowBox[{"ElementwiseLayer", "[", 
    RowBox[{
     RowBox[{"If", "[", 
      RowBox[{
       RowBox[{"#", ">", "0"}], ",", "#", ",", 
       RowBox[{"0.2", "*", "#"}]}], "]"}], "&"}], "]"}]}], ";"}]}], "Input",
 CellChangeTimes->{{3.803147853924559*^9, 3.803147862600132*^9}},
 CellLabel->
  "In[3272]:=",ExpressionUUID->"f26aa3a4-974b-4112-b6d9-c58741204f76"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"batchnorm", "=", 
   RowBox[{"BatchNormalizationLayer", "[", 
    RowBox[{"(*", 
     RowBox[{
      RowBox[{"\"\<Scaling\>\"", "\[Rule]", "None"}], ",", 
      RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "*)"}], 
    RowBox[{
     RowBox[{"\"\<Scaling\>\"", "\[Rule]", "1"}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "0"}], ",", 
     RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", 
     RowBox[{"LearningRateMultipliers", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"\"\<Scaling\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"\"\<Biases\>\"", "\[Rule]", "0"}], ",", 
        RowBox[{"_", "\[Rule]", "1"}]}], "}"}]}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"instancenorm", "=", 
   RowBox[{"NormalizationLayer", "[", 
    RowBox[{"1", ",", 
     RowBox[{"\"\<Scaling\>\"", "\[Rule]", "None"}], ",", 
     RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}]}], 
  ";"}], "\n"}], "Input",
 CellChangeTimes->{{3.8031478284475937`*^9, 3.8031478284550667`*^9}},
 CellLabel->
  "In[3274]:=",ExpressionUUID->"b036115e-1a2b-4bf1-a082-5537c11a90dd"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"normalizationGenerator", "=", "instancenorm"}], ";"}], "\n", 
 RowBox[{
  RowBox[{"normalizationDiscriminator", "=", "instancenorm"}], 
  ";"}]}], "Input",
 CellChangeTimes->{{3.8031475104883127`*^9, 3.803147523669312*^9}, 
   3.8031476177544947`*^9, {3.803147815299494*^9, 3.803147840927326*^9}},
 CellLabel->
  "In[3276]:=",ExpressionUUID->"2b9e1a93-24b1-4cf5-a9a3-a092154b563a"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"convolutionBlock", "[", 
    RowBox[{"n_", ",", "args___"}], "]"}], ":=", 
   RowBox[{"NetChain", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"ConvolutionLayer", "[", 
       RowBox[{"n", ",", 
        RowBox[{"{", "$kernelSize", "}"}], ",", 
        RowBox[{"\"\<Stride\>\"", "\[Rule]", 
         RowBox[{"{", "1", "}"}]}], ",", 
        RowBox[{"PaddingSize", "\[Rule]", 
         RowBox[{"(", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{"$kernelSize", "-", "1"}], ")"}], "/", "2"}], ")"}]}], 
        ",", 
        RowBox[{"\"\<Interleaving\>\"", "\[Rule]", "True"}], ",", "args"}], 
       "]"}], ",", "normalizationDiscriminator", ",", 
      "nonlinearityDiscriminator", ",", 
      RowBox[{"DropoutLayer", "[", "]"}]}], "}"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803147770967704*^9, 3.803147804462408*^9}, 
   3.803147871531191*^9},
 CellLabel->
  "In[3288]:=",ExpressionUUID->"42f9d204-6991-4429-ad14-9833fea712ee"],

Cell[BoxData[
 RowBox[{
  RowBox[{"textDiscriminator", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{"(*", 
       RowBox[{"Preprocessing", ":", 
        RowBox[{
        "only", " ", "keep", " ", "the", " ", "maximum", " ", "values"}]}], 
       "*)"}], 
      RowBox[{
       RowBox[{"\"\<keep max only\>\"", "\[Rule]", 
        RowBox[{"NetGraph", "[", 
         RowBox[{
          RowBox[{"{", 
           RowBox[{
            RowBox[{"AggregationLayer", "[", 
             RowBox[{"Max", ",", 
              RowBox[{"-", "1"}]}], "]"}], ",", 
            RowBox[{"ThreadingLayer", "[", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{"#1", "\[GreaterEqual]", 
                  RowBox[{"#2", "-", "1.*^-7"}]}], ",", "#1", ",", "0"}], 
                "]"}], "&"}], ",", 
              RowBox[{"-", "1"}]}], "]"}]}], "}"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], 
             "}"}], "\[Rule]", "2"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"Table", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"\"\<conv.\>\"", "<>", 
           RowBox[{"ToString", "[", "i", "]"}]}], "\[Rule]", 
          RowBox[{"convolutionBlock", "[", 
           RowBox[{"$numhiddens", "*", "i"}], "]"}]}], ",", 
         RowBox[{"{", 
          RowBox[{"i", ",", "$depth"}], "}"}]}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{
         RowBox[{"\"\<aggregate\>\"", "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"AggregationLayer", "[", 
               RowBox[{"Mean", ",", "1"}], "]"}], ",", 
              RowBox[{"AggregationLayer", "[", 
               RowBox[{"StandardDeviation", ",", "1"}], "]"}], ",", 
              RowBox[{"CatenateLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{"{", 
               RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "3"}], "}"}]}], 
           "]"}]}], ","}], "*)"}], 
       RowBox[{"\"\<PatchConv\>\"", "->", 
        RowBox[{"convolutionBlock", "[", "1", "]"}]}], ",", 
       RowBox[{"\"\<aggregate\>\"", "\[Rule]", 
        RowBox[{"AggregationLayer", "[", 
         RowBox[{"Mean", ",", "1"}], "]"}]}], ",", 
       RowBox[{"\"\<dropout\>\"", "\[Rule]", 
        RowBox[{"DropoutLayer", "[", "]"}]}], ",", 
       RowBox[{"\"\<classify\>\"", "\[Rule]", 
        RowBox[{"LinearLayer", "[", 
         RowBox[{"\"\<Real\>\"", ",", 
          RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}], ",", 
          RowBox[{"\"\<Biases\>\"", "\[Rule]", "None"}]}], "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$jensen", ",", 
         RowBox[{"\"\<logit\>\"", "\[Rule]", "LogisticSigmoid"}], ",", 
         "Nothing"}], "]"}]}], "|>"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<Varying\>\"", ",", 
        RowBox[{"Length", "[", "characters2", "]"}]}], "}"}]}]}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.803147625501033*^9, 3.803147652170362*^9}, 
   3.80314775579707*^9, {3.8031480375362177`*^9, 3.803148048018647*^9}, {
   3.8031480882727823`*^9, 3.8031481185126543`*^9}, {3.803148212187902*^9, 
   3.803148249111437*^9}, 3.803149483360085*^9, 3.8033469086205053`*^9},
 CellLabel->
  "In[3289]:=",ExpressionUUID->"457fe591-59ac-446d-9065-ab5c54f77ba5"],

Cell[CellGroupData[{

Cell[BoxData["textDiscriminator"], "Input",
 CellChangeTimes->{{3.803149474276507*^9, 3.803149486722191*^9}},
 NumberMarks->False,
 CellLabel->
  "In[3280]:=",ExpressionUUID->"45b166c3-1b6e-459b-aa4d-969a1554f1bd"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.014925373134328358`], {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.6], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.84, 0.84, 0.84], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}, {
                    FaceForm[{
                    GrayLevel[0.6], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                    25., 95.}, {25., 88.}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                    39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609]}, 
                    NeuralNetworks`AtomT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`AtomT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609]}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{64, 28, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2001859609]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1784545045]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1784545045], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{128, 64, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1784545045]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[716853819]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[716853819], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1784545045], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{192, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[716853819]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1937664007]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1937664007], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[716853819], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`TensorT[{1, 192, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1937664007]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1263250113]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1263250113], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1937664007], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1263250113], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2001859609], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"keep max only\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]192\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"PatchConv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]1\[VeryThinSpace])\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"aggregate\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"dropout\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"logit\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.8031482518414803`*^9, 3.8031494872407503`*^9, 
  3.803312170137342*^9, 3.803346547347547*^9, 3.803346911604105*^9, 
  3.803390493534131*^9},
 CellLabel->
  "Out[3280]=",ExpressionUUID->"200f3552-248c-45ee-8194-93abc811df6e"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"textGenerator", "=", 
   RowBox[{"NetChain", "[", 
    RowBox[{
     RowBox[{"<|", 
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{"$generatorTerminalTokensQ", ",", 
         RowBox[{"(*", 
          RowBox[{
           RowBox[{"Append", "/", "Prepend"}], " ", 
           RowBox[{"EOS", "/", "SOS"}], " ", "feature", " ", "vectors"}], 
          "*)"}], 
         RowBox[{"\"\<add eos/sos latent\>\"", "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{"ArrayLayer", "[", "]"}], ",", 
              RowBox[{"AppendLayer", "[", "]"}], ",", 
              RowBox[{"ArrayLayer", "[", "]"}], ",", 
              RowBox[{"PrependLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"NetPort", "[", "\"\<Input\>\"", "]"}], ",", "1"}], 
                "}"}], "\[Rule]", "2"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"2", ",", "3"}], "}"}], "\[Rule]", "4"}]}], "}"}]}], 
           "]"}]}], ",", "Nothing"}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Core", " ", "deep", " ", "net"}], "*)"}], 
       RowBox[{"Sequence", "@@", 
        RowBox[{"Table", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"\"\<conv.\>\"", "<>", 
            RowBox[{"ToString", "[", "i", "]"}]}], "\[Rule]", 
           RowBox[{"convolutionBlock", "[", "$numhiddens", "]"}]}], ",", 
          RowBox[{"{", 
           RowBox[{"i", ",", "$depth"}], "}"}]}], "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$generatorTerminalTokensQ", ",", 
         RowBox[{"(*", 
          RowBox[{"Remove", " ", 
           RowBox[{"EOS", "/", "SOS"}], " ", "high", " ", "level", " ", 
           "features"}], "*)"}], 
         RowBox[{"\"\<remove eos/sos prediction\>\"", "\[Rule]", 
          RowBox[{"NetChain", "[", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{"SequenceRestLayer", "[", "]"}], ",", 
             RowBox[{"SequenceMostLayer", "[", "]"}]}], "}"}], "]"}]}], ",", 
         "Nothing"}], "]"}], ",", 
       RowBox[{"(*", 
        RowBox[{"Classifier", " ", 
         RowBox[{"(", 
          RowBox[{"of", " ", "characters"}], ")"}]}], "*)"}], 
       RowBox[{"\"\<classify\>\"", "\[Rule]", 
        RowBox[{"NetMapOperator", "@", 
         RowBox[{"LinearLayer", "[", 
          RowBox[{"Length", "[", "characters", "]"}], 
          RowBox[{"(*", 
           RowBox[{",", 
            RowBox[{"\"\<Weights\>\"", "\[Rule]", "0"}]}], "*)"}], "]"}]}]}], 
       ",", 
       RowBox[{"\"\<squash\>\"", "\[Rule]", 
        RowBox[{"SoftmaxLayer", "[", "]"}]}], ",", 
       RowBox[{"If", "[", 
        RowBox[{"$discriminatorTerminalTokensQ", ",", 
         RowBox[{"\"\<add eos/sos onehot proba\>\"", "\[Rule]", 
          RowBox[{"NetGraph", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"(*", 
              RowBox[{
              "Catenate", " ", "zero", " ", "proba", " ", "for", " ", 
               RowBox[{"EOS", "/", "SOS"}], " ", "inside", " ", "the", " ", 
               "generated", " ", "text"}], "*)"}], 
             RowBox[{
              RowBox[{"PaddingLayer", "[", 
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"0", ",", "0"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"0", ",", "2"}], "}"}]}], "}"}], "]"}], ",", 
              RowBox[{"(*", 
               RowBox[{
                RowBox[{"Append", "/", "Prepend"}], " ", "proba", " ", "of", 
                " ", "1", " ", "for", " ", 
                RowBox[{"EOS", "/", "SOS"}], " ", "at", " ", "the", " ", 
                RowBox[{"end", "/", "beginning"}], " ", "of", " ", "the", " ",
                 "generated", " ", "text", " ", 
                RowBox[{"(", 
                 RowBox[{
                 "to", " ", "be", " ", "in", " ", "accordance", " ", "with", 
                  " ", "the", " ", "discriminator"}], ")"}]}], "*)"}], 
              RowBox[{"ArrayLayer", "[", 
               RowBox[{
                RowBox[{"\"\<Array\>\"", "\[Rule]", 
                 RowBox[{"UnitVector", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "characters2", "]"}], ",", 
                   RowBox[{
                    RowBox[{"Length", "[", "characters2", "]"}], "-", "1"}]}],
                   "]"}]}], ",", 
                RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], 
               "]"}], ",", 
              RowBox[{"PrependLayer", "[", "]"}], ",", 
              RowBox[{"ArrayLayer", "[", 
               RowBox[{
                RowBox[{"\"\<Array\>\"", "\[Rule]", 
                 RowBox[{"UnitVector", "[", 
                  RowBox[{
                   RowBox[{"Length", "[", "characters2", "]"}], ",", 
                   RowBox[{"Length", "[", "characters2", "]"}]}], "]"}]}], 
                ",", 
                RowBox[{"LearningRateMultipliers", "\[Rule]", "None"}]}], 
               "]"}], ",", 
              RowBox[{"AppendLayer", "[", "]"}]}], "}"}], ",", 
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"{", 
                RowBox[{"1", ",", "2"}], "}"}], "\[Rule]", "3"}], ",", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{"3", ",", "4"}], "}"}], "\[Rule]", "5"}]}], "}"}]}], 
           "]"}]}], ",", "Nothing"}], "]"}]}], "|>"}], ",", 
     RowBox[{"\"\<Input\>\"", "\[Rule]", 
      RowBox[{"{", 
       RowBox[{"\"\<n\>\"", ",", "$numlatent"}], "}"}]}], 
     "\[IndentingNewLine]", ",", "\[IndentingNewLine]", 
     RowBox[{"\"\<Output\>\"", "\[Rule]", 
      RowBox[{"With", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"netpostproc", "=", 
          RowBox[{"NetDecoder", "[", "netpreproc", "]"}]}], "}"}], ",", 
        RowBox[{"(*", 
         RowBox[{"Capitalize", " ", "the", " ", "decoded", " ", 
          RowBox[{"(", 
           RowBox[{"lower", "-", "case"}], ")"}], " ", "text"}], "*)"}], 
        RowBox[{"NetDecoder", "[", 
         RowBox[{"{", 
          RowBox[{"\"\<Function\>\"", ",", 
           RowBox[{"Function", "[", 
            RowBox[{"StringReplace", "[", 
             RowBox[{
              RowBox[{"netpostproc", "[", "#", "]"}], ",", 
              RowBox[{
               RowBox[{"WordBoundary", "~~", 
                RowBox[{"c", ":", "WordCharacter"}]}], "\[RuleDelayed]", 
               RowBox[{"ToUpperCase", "[", "c", "]"}]}]}], "]"}], "]"}]}], 
          "}"}], "]"}]}], "]"}]}]}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803148375657188*^9, 3.80314837566494*^9}, {
  3.8031492592980967`*^9, 3.803149260125482*^9}, {3.803311466181923*^9, 
  3.803311466278201*^9}, {3.803311527570363*^9, 3.803311530636557*^9}, {
  3.8033116005276213`*^9, 3.803311601205504*^9}, {3.8033118705152893`*^9, 
  3.803311956404489*^9}, {3.803312015860656*^9, 3.8033120828435373`*^9}, {
  3.8033121145517473`*^9, 3.803312114901992*^9}},
 CellLabel->
  "In[3290]:=",ExpressionUUID->"8330e15a-725b-4fe2-97ef-03decda9f574"],

Cell[BoxData[
 TemplateBox[{
  "NetDecoder", "extfwarn", 
   "\"Specified function \\!\\(\\*RowBox[{RowBox[{\\\"StringReplace\\\", \
\\\"[\\\", RowBox[{\\\"\[LeftSkeleton]\\\", \\\"2\\\", \\\"\[RightSkeleton]\\\
\"}], \\\"]\\\"}], \\\"&\\\"}]\\) appears to require definitions of external \
symbols (\\!\\(\\*TemplateBox[List[\\\", \\\", \\\"\\\\\\\", \\\\\\\"\\\", \\\
\"c\\\"], \\\"RowWithSeparators\\\"]\\)). Be aware that the definitions and \
values of these symbols will not be retained if the net is saved using \
Export, Put, or DumpSave.\"", 2, 3290, 414, 26207717223377046194, "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.8033114672963142`*^9, 3.8033115310484037`*^9, 3.803311603875081*^9, 
   3.8033118714225883`*^9, 3.803311902944787*^9, 3.803311936966916*^9, {
   3.803312042180892*^9, 3.803312058529635*^9}, {3.803312093658338*^9, 
   3.803312115501935*^9}, 3.803312173977909*^9, 3.803346079824169*^9, 
   3.8033465149266*^9, {3.8033465506142673`*^9, 3.803346553518488*^9}, 
   3.803346913476404*^9, 3.803347995145295*^9, 3.8033905143709908`*^9},
 CellLabel->
  "During evaluation of \
In[3290]:=",ExpressionUUID->"7909e552-df59-46dd-9134-eedf98f57ce8"]
}, Open  ]],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"randomizeOnehot", "[", "onehot_", "]"}], ":=", 
    RowBox[{"If", "[", 
     RowBox[{"$discriminatorTerminalTokensQ", ",", 
      RowBox[{"Join", "[", 
       RowBox[{
        RowBox[{"{", 
         RowBox[{"First", "@", "onehot"}], "}"}], ",", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"#", "*", 
            RowBox[{"Clip", "[", 
             RowBox[{
              RowBox[{"RandomVariate", "[", 
               RowBox[{"NormalDistribution", "[", 
                RowBox[{"0.8", ",", "0.1"}], "]"}], "]"}], ",", 
              RowBox[{"{", 
               RowBox[{"0.55", ",", "1"}], "}"}]}], "]"}]}], "&"}], ",", 
          RowBox[{"Rest", "@", 
           RowBox[{"Most", "@", "onehot"}]}]}], "]"}], ",", 
        RowBox[{"{", 
         RowBox[{"Last", "@", "onehot"}], "}"}]}], "]"}], ",", 
      RowBox[{"Map", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"#", "*", 
          RowBox[{"Clip", "[", 
           RowBox[{
            RowBox[{"RandomVariate", "[", 
             RowBox[{"NormalDistribution", "[", 
              RowBox[{"0.8", ",", "0.1"}], "]"}], "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"0.55", ",", "1"}], "}"}]}], "]"}]}], "&"}], ",", 
        "onehot"}], "]"}]}], "]"}]}], ";"}], "\n"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"sampleGeneration", "[", 
    RowBox[{"batchSize_", ",", "dataset_"}], "]"}], ":=", 
   RowBox[{"Block", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"s", ",", "onehot"}], "}"}], ",", 
     RowBox[{
      RowBox[{"s", "=", 
       RowBox[{"RandomSample", "[", 
        RowBox[{"dataset", ",", "batchSize"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{"onehot", "=", 
       RowBox[{
        RowBox[{"UnitVectorLayer", "[", 
         RowBox[{
          RowBox[{"Length", "[", "characters2", "]"}], ",", 
          RowBox[{"\"\<Input\>\"", "\[Rule]", 
           RowBox[{"{", "Automatic", "}"}]}]}], "]"}], "[", 
        RowBox[{"netpreproc", "[", "s", "]"}], "]"}]}], ";", 
      "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{
        RowBox[{"NumericArray", "[", 
         RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "/@", 
       RowBox[{"Map", "[", 
        RowBox[{"randomizeOnehot", ",", "onehot"}], "]"}]}]}]}], "]"}]}], 
  ";"}]}], "Input",
 CellChangeTimes->{3.803331382276779*^9},
 CellLabel->
  "In[3302]:=",ExpressionUUID->"a151c110-212c-44cd-9cbf-3807e5ba373e"],

Cell[BoxData[{
 RowBox[{
  RowBox[{"$device", "=", "\"\<CPU\>\""}], ";", 
  RowBox[{"(*", 
   RowBox[{"Can", " ", "be", " ", "\"\<GPU\>\""}], "*)"}], 
  RowBox[{"(*", "*********************)"}], 
  RowBox[{"(*", 
   RowBox[{"Load", " ", "Pokemon", " ", "names"}], "*)"}], 
  RowBox[{"(*", "*********************)"}], 
  RowBox[{"$DATADIR", "=", 
   RowBox[{"If", "[", 
    RowBox[{"$Notebooks", ",", 
     RowBox[{"NotebookDirectory", "[", "]"}], ",", 
     RowBox[{"Directory", "[", "]"}]}], "]"}]}], ";"}], "\n", 
 RowBox[{
  RowBox[{"fn", "=", 
   RowBox[{"FileNameJoin", "[", 
    RowBox[{"{", 
     RowBox[{"$DATADIR", ",", "\"\<poknames.mx\>\""}], "}"}], "]"}]}], 
  ";"}], "\n", 
 RowBox[{
  RowBox[{"If", "[", 
   RowBox[{
    RowBox[{"FileExistsQ", "[", "fn", "]"}], ",", 
    RowBox[{
     RowBox[{"names", "=", 
      RowBox[{"Import", "[", "fn", "]"}]}], ";"}], ",", 
    RowBox[{
     RowBox[{"EntityPrefetch", "[", 
      RowBox[{"EntityProperty", "[", 
       RowBox[{"\"\<Pokemon\>\"", ",", "\"\<Name\>\""}], "]"}], "]"}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"names", "=", 
      RowBox[{
       RowBox[{
        RowBox[{"EntityValue", "[", 
         RowBox[{"#", ",", 
          RowBox[{"EntityProperty", "[", 
           RowBox[{"\"\<Pokemon\>\"", ",", "\"\<Name\>\""}], "]"}]}], "]"}], 
        "&"}], "/@", 
       RowBox[{"EntityList", "[", "\"\<Pokemon\>\"", "]"}]}]}], ";", 
     "\[IndentingNewLine]", 
     RowBox[{"names", "=", 
      RowBox[{"DeleteDuplicates", "@", 
       RowBox[{
        RowBox[{"DeleteCases", "[", 
         RowBox[{"s_String", "/;", 
          RowBox[{"StringContainsQ", "[", 
           RowBox[{"s", ",", "\"\<:\>\""}], "]"}]}], "]"}], "@", 
        RowBox[{"Map", "[", 
         RowBox[{
          RowBox[{
           RowBox[{"StringTrim", "@", 
            RowBox[{
             RowBox[{"StringReplace", "[", 
              RowBox[{"{", 
               RowBox[{
                RowBox[{
                 RowBox[{"WordBoundary", "~~", 
                  RowBox[{"(", 
                   RowBox[{"WordCharacter", ".."}], ")"}], "~~", 
                  "\"\<.\>\""}], "\[RuleDelayed]", "\"\<\>\""}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                  RowBox[{"Remove", " ", "\"\<mr.\>\""}], ",", "\"\<jr.\>\"", 
                  ",", "..."}], "*)"}], 
                RowBox[{
                 RowBox[{"\"\<\[Mars]\>\"", "|", "\"\<\[Venus]\>\""}], 
                 "\[Rule]", "\"\<\>\""}], ",", 
                RowBox[{"(*", 
                 RowBox[{"Remove", " ", "gender", " ", "hints"}], "*)"}], 
                RowBox[{
                 RowBox[{
                 "\"\<\[Hyphen]\>\"", "|", "\"\<-\>\"", "|", "\"\<'\>\""}], 
                 "\[Rule]", "\"\< \>\""}], ",", 
                RowBox[{"(*", 
                 RowBox[{
                 "Remove", " ", "very", " ", "rare", " ", "characters"}], 
                 "*)"}], 
                RowBox[{"DigitCharacter", "\[Rule]", "\"\<\>\""}]}], " ", 
               RowBox[{"(*", 
                RowBox[{
                "Remove", " ", "very", " ", "rare", " ", "characters"}], 
                "*)"}], "}"}], "]"}], "@", 
             RowBox[{"First", "@", 
              RowBox[{"StringSplit", "[", 
               RowBox[{"#", ",", "\"\<(\>\""}], "]"}]}]}]}], "&"}], ",", 
          "names"}], "]"}]}]}]}], ";", "\[IndentingNewLine]", 
     RowBox[{"Export", "[", 
      RowBox[{"fn", ",", "names"}], "]"}], ";"}]}], "]"}], ";"}]}], "Input",
 CellLabel->
  "In[3146]:=",ExpressionUUID->"6e3eca28-e064-4f9b-b8ae-6b65033aa9f2"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803148957650889*^9, 3.8031489758198757`*^9}, {
   3.803149052918817*^9, 3.8031490558772078`*^9}, 3.803390915498068*^9},
 CellLabel->
  "In[3298]:=",ExpressionUUID->"f3f1a5bd-66c3-4eff-af70-2481f7571087"],

Cell[BoxData[
 RowBox[{
  RowBox[{"dataGenerator", "=", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"<|", 
       RowBox[{
        RowBox[{"\"\<Sample\>\"", "\[Rule]", 
         RowBox[{"sampleGeneration", "[", 
          RowBox[{"#BatchSize", ",", " ", "normalizedEnglishNames"}], "]"}]}],
         ",", 
        RowBox[{"\"\<Latent\>\"", "\[Rule]", 
         RowBox[{"sampleGeneration", "[", 
          RowBox[{"#BatchSize", ",", " ", "normalizedSpanishNames"}], 
          "]"}]}]}], "|>"}], "]"}], ",", 
     RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
      RowBox[{"Length", "[", "normalizedSpanishNames", "]"}]}]}], "}"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8031489954363413`*^9, 3.803149063039473*^9}, {
  3.803149152288361*^9, 3.803149155666211*^9}, {3.803346653350378*^9, 
  3.803346653767235*^9}, {3.803390913379868*^9, 3.80339092822045*^9}, {
  3.803390976295011*^9, 3.803390981565937*^9}},
 CellLabel->
  "In[3305]:=",ExpressionUUID->"b69c2199-cea4-45d8-849a-12b05775330a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803311419301012*^9, 3.803311419316519*^9}, 
   3.803345465822629*^9},ExpressionUUID->"93b71ad0-6c9e-4cbe-962b-\
07a549223482"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{"latentGeneration", "[", "batchSize_", "]"}], ":=", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{"len", "=", 
         RowBox[{"Max", "[", 
          RowBox[{"3", ",", 
           RowBox[{"RandomChoice", "[", 
            RowBox[{
             RowBox[{"Values", "[", "counts", "]"}], "\[Rule]", 
             RowBox[{"Keys", "[", "counts", "]"}]}], "]"}]}], "]"}]}], "}"}], 
       ",", 
       RowBox[{
        RowBox[{
         RowBox[{"NumericArray", "[", 
          RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "@", 
        RowBox[{"Clip", "[", 
         RowBox[{
          RowBox[{"RandomVariate", "[", 
           RowBox[{
            RowBox[{"NormalDistribution", "[", "]"}], ",", 
            RowBox[{"{", 
             RowBox[{"len", ",", "$numlatent"}], "}"}]}], "]"}], ",", 
          RowBox[{"{", 
           RowBox[{
            RowBox[{"-", "1"}], ",", "1"}], "}"}]}], "]"}]}]}], "]"}], ",", 
     "batchSize"}], "]"}]}], ";"}]], "Input",
 CellChangeTimes->{{3.803323421343391*^9, 3.8033234213749323`*^9}},
 CellLabel->
  "In[2684]:=",ExpressionUUID->"d915ceef-3127-4a49-b3c4-b1e1ab88c764"],

Cell[BoxData[
 RowBox[{
  RowBox[{"generator1", " ", "=", " ", 
   RowBox[{"NetInsertSharedArrays", "[", 
    RowBox[{"textGenerator", ",", "\"\<generator1/\>\""}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.803387324839746*^9, 3.803387354856649*^9}},
 CellLabel->
  "In[3322]:=",ExpressionUUID->"78649622-e88f-4b82-b8d1-7957f7e87588"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"gan1", " ", "=", " ", 
  RowBox[{"NetGANOperator", "[", 
   RowBox[{"{", 
    RowBox[{"generator1", ",", " ", "textDiscriminator"}], "}"}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803387358357931*^9, 3.80338737742523*^9}},
 CellLabel->
  "In[3323]:=",ExpressionUUID->"1d02cfe7-d4c0-4c62-af99-6fc9521a68ef"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Sample\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Latent\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossReal\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"GeneratedFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"expression\"", "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[
                  
                  GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {
                    1, 0}}, {{
                    Opacity[0.3], 
                    
                    LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                    AbsolutePointSize[5], 
                    GrayLevel[0.6], 
                    PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
                 StyleBox["uninitialized", 
                  RGBColor[0.66, 0, 0], FontSize -> 8, FontFamily -> "Roboto",
                   Background -> GrayLevel[1, 0.65]]}, Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    RGBColor[0.66, 0, 0], StripOnInput -> False], 
                    "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox["\"expression\"", "SummaryItem"], 
                    Annotation[#, {"Outputs", "GeneratedFake"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Generator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1631160721], 28}, 
                    NeuralNetworks`AtomT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray["generator1/add eos/sos latent/1/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`AtomT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray["generator1/add eos/sos latent/3/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`AtomT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`AtomT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`AtomT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[949317956]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[949317956], 28}, 
                    NeuralNetworks`AtomT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[949317956], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`AtomT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1631160721]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[949317956], 28}, 
                    NeuralNetworks`AtomT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`AtomT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1631160721], 28}, 
                    NeuralNetworks`AtomT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1631160721]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1379460766]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1631160721], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1379460766], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1631160721], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1379460766]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1665947994]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1665947994], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1379460766], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1665947994]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1567733635]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1567733635], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1665947994], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1567733635], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1984415585]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1984415585], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1984415585], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1045396395]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1984415585], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1567733635], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator1/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1045396395],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[241137678], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1045396395], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1045396395], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1045396395], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[999884766]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1045396395], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[999884766], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[999884766], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[241137678]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[999884766], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[241137678], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`AtomT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[241137678], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[70550571], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]]], {
                    "Parameters", "Discriminator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1826141601]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1901388925]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1901388925], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{128, 64, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1901388925]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1575772804]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1575772804], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1901388925], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{192, 128, 5}, 
                    NeuralNetworks`RealT], "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1575772804]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2112151476]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2112151476], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1575772804], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`TensorT[{1, 192, 5}, NeuralNetworks`RealT],
                     "Biases" -> NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2112151476]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1336063439]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1336063439], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2112151476], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1336063439], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1826141601], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], {
                    "Outputs", "GeneratedFake"} -> 
                    Association["Form" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[241137678], 28}, 
                    NeuralNetworks`RealT], "Type" -> "Function", "Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    Tooltip[
                    Row[{Function, "[", 
                    Row[{
                    Style["x", Italic], ",", "\[Ellipsis]"}], "]"}], 
                    StringReplace[
                    NetDecoder["Characters", 
                    Association[
                    "Encoding" -> NeuralNetworks`ValidatedParameter[
                    MXNetLink`CharacterEncodingData[
                    1, RawArray["UnsignedInteger8",{128, 27, 28, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 128, 
                    128, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 5, 6, 7, 8,
                     9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 
                    23, 24, 25, 26, 128, 128, 128, 128, 128, 128, 1, 2, 3, 4, 
                    5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20,
                     21, 22, 23, 24, 25, 26, 128, 128, 128, 128, 128}], 
                    RawArray["UnsignedInteger8",{97, 98, 99, 100, 101, 102, 
                    103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 
                    114, 115, 116, 117, 118, 119, 120, 121, 122, 0, 0}], 28, {
                    "a", "b", "c", "d", "e", "f", "g", "h", "i", "j", "k", 
                    "l", "m", "n", "o", "p", "q", "r", "s", "t", "u", "v", 
                    "w", "x", "y", "z", StartOfString, EndOfString}]], 
                    "IgnoreCase" -> True, "InputDepth" -> 2, "Count" -> 28, 
                    "$Version" -> "12.2.8"], 
                    NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[70550571], 28}, 
                    NeuralNetworks`RealT]][#], 
                    StringExpression[WordBoundary, 
                    Pattern[$CellContext`c, WordCharacter]] :> 
                    ToUpperCase[$CellContext`c]]& ]], "Properties" -> None, 
                    "$Version" -> "12.2.8"]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos onehot proba/2/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 1., 0.}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 1.}], "generator1/classify/Net/Biases" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT], 
                    "generator1/classify/Net/Weights" -> 
                    NeuralNetworks`TensorT[{26, 64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "generator1/conv.2/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.2/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator1/conv.3/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.3/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, 
                    NeuralNetworks`RealT]], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.803387370421118*^9, 3.803387378110464*^9}, 
   3.803391438246166*^9},
 CellLabel->
  "Out[3323]=",ExpressionUUID->"39159d25-611d-4cba-9c36-cd3854824a03"]
}, Open  ]],

Cell[BoxData[
 RowBox[{
  RowBox[{"generator2", " ", "=", " ", 
   RowBox[{"NetInsertSharedArrays", "[", 
    RowBox[{"textGenerator", ",", "\"\<generator2/\>\""}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.8033873851936703`*^9, 3.803387399095969*^9}},
 CellLabel->
  "In[3324]:=",ExpressionUUID->"a306f7ee-bd80-4425-becb-5607a0d45860"],

Cell[BoxData[
 RowBox[{
  RowBox[{"gan2", " ", "=", " ", 
   RowBox[{"NetGANOperator", "[", 
    RowBox[{"{", 
     RowBox[{"generator2", ",", " ", "textDiscriminator"}], "}"}], "]"}]}], 
  ";"}]], "Input",
 CellChangeTimes->{{3.80338740233219*^9, 3.803387413649927*^9}},
 CellLabel->
  "In[3325]:=",ExpressionUUID->"66342a45-f482-44fd-88fd-8819db32b9de"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"cycleGAN", "=", 
  RowBox[{"NetGraph", "[", 
   RowBox[{
    RowBox[{"<|", 
     RowBox[{
      RowBox[{"\"\<GAN1\>\"", "\[Rule]", "gan1"}], ",", 
      RowBox[{"\"\<GAN2\>\"", "\[Rule]", "gan2"}], ",", 
      RowBox[{"\"\<Generator1\>\"", "\[Rule]", "generator1"}], ",", 
      RowBox[{"\"\<Generator2\>\"", "\[Rule]", "generator2"}], ",", 
      RowBox[{"\"\<ME1\>\"", "\[Rule]", 
       RowBox[{"MeanAbsoluteLossLayer", "[", "]"}]}], ",", 
      RowBox[{"\"\<ME2\>\"", "\[Rule]", 
       RowBox[{"MeanAbsoluteLossLayer", "[", "]"}]}]}], "|>"}], ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input1\>\"", "]"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<GAN1\>\"", ",", "\"\<Sample\>\""}], "]"}], ",", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<GAN2\>\"", ",", "\"\<Latent\>\""}], "]"}]}], "}"}]}], 
      ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input2\>\"", "]"}], "\[Rule]", 
       RowBox[{"{", 
        RowBox[{
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<GAN2\>\"", ",", "\"\<Sample\>\""}], "]"}], ",", 
         RowBox[{"NetPort", "[", 
          RowBox[{"\"\<GAN1\>\"", ",", "\"\<Latent\>\""}], "]"}]}], "}"}]}], 
      ",", 
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<GAN1\>\"", ",", "\"\<GeneratedFake\>\""}], "]"}], 
       "\[Rule]", 
       RowBox[{"\"\<Generator2\>\"", "\[Rule]", 
        RowBox[{"\"\<ME2\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<LossCycle2\>\"", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input2\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<ME2\>\"", ",", "\"\<Target\>\""}], "]"}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<GAN2\>\"", ",", "\"\<GeneratedFake\>\""}], "]"}], 
       "\[Rule]", 
       RowBox[{"\"\<Generator1\>\"", "\[Rule]", 
        RowBox[{"\"\<ME1\>\"", "\[Rule]", 
         RowBox[{"NetPort", "[", "\"\<LossCycle1\>\"", "]"}]}]}]}], ",", 
      RowBox[{
       RowBox[{"NetPort", "[", "\"\<Input1\>\"", "]"}], "\[Rule]", 
       RowBox[{"NetPort", "[", 
        RowBox[{"\"\<ME1\>\"", ",", "\"\<Target\>\""}], "]"}]}]}], "}"}]}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.8033874181030397`*^9, 3.8033874324272337`*^9}, {
  3.803387489983275*^9, 3.803387504561734*^9}},
 CellLabel->
  "In[3326]:=",ExpressionUUID->"025aec1f-0d7c-4768-87bc-4276d5f4e33c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 2}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input1\"", 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"GAN1\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{
                    0, -15.5}, {-3.000000053589793, -1.9999999196153082`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"GAN2\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{0, -15.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"ME1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999464102056, 
                    2.0000000267948965`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999464102056, 
                    2.0000000267948965`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Input2\"", 
                    
                    Offset[{
                    0, -7}, {-4.000000053589793, -1.9999998928204112`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"ME2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-27, 
                    2]}, {-1.0000001339744848`, -4.999999973205101}], 
                    
                    Offset[{
                    0, -13.5}, {-1.0000001339744848`, -4.999999973205101}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Generator2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{
                    0, -15.5}, {-2.0000001071795874`, -3.9999999464102047`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossFake1\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000803846905`, -2.999999946410205}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossReal1\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000535897935`, -1.9999999464102052`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Generator1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -15.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossFake2\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000267948965`, -0.9999999464102056}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossReal2\"", 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossCycle1\"", 
                    
                    Offset[{0, -7}, {5.3589794058235685`*^-8, 
                    1.9999999999999993`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossCycle2\"", 
                    
                    Offset[{
                    0, -7}, {-1.339744851455892*^-7, -4.999999999999998}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559017285956095`, \
-1.08819650852448}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.4472135715338733, -0.8944272029829579}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-0.06476863353489408, 
                    5.499618625333035}, {-2.498635041766911, 
                    1.9977916047506696`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.9999306591514608,
                     0.01177611518816256}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-3.4500000535897932`, \
-1.9999999075576047`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-3.455901723869172, \
-0.9118033062744589}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{0.0902352952082343, 
                    5.4992597312273475`}, {-2.5427562518525013`, \
-4.997657503970689}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9998654056776995, -0.016406417310588055`}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-2.455901782185404, \
-3.0881965353193768`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.4472135715338733, -0.8944272029829579}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890874007337044`, 
                    3.889087192318316}, {-2.4500000683269865`, \
-2.5499999343525017`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334008}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-2.4500000535897932`, \
-1.9999999343525015`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-2.4499999852628056`, 
                    0.5500000656474976}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318316}, {-2.4500000147371925`, \
-0.5499999343525022}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334007}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999958467909, 
                    1.5500000388526003`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318317}, {-1.4500001219167808`, \
-4.549999961147398}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396939, -0.7071068001334007}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.473719345446156*^-7, 
                    5.499999999999998}, {-0.4499999464102058, 
                    2.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489718993011*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999998}, {-0.45000013397448496`, \
-4.999999987942294}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794896967885506`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.000000053589793, \
-1.9999999196153082`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQ/fc/CPAfSEqScgw+WmO3qHjNhJBZ/AfU6pe33M3a
aV/bxr0kVp7/gJOGtquPyBn7NgtZK+l+vgNcWRHbffiu2x/qfBjU+5L3wGGD
nf1TNz+w16uKeLdZj/eA197CtQldz+zPcTbx9MfxHJh56+qWdu639vMs4tbK
VXIfiDzyKahV+pP9Qra3F5LquA6cTA44UML2zf5qsV55dB7ngfmnm5Umuf2y
b08VnhElznng4Vttf8Wq3/bnJ8f5a2/lOHD0RV9rY+cf+zX/+Oeedec44LRn
zdFNJX/tZZapNzqeZz8Qk9HKv9X6n71819Lfbd7sB0TfSiR33Ptnv3NVJ8+8
PWwHsr3SD+jE/rd/yn5lc5sS24G4hgL1Rdv/2y9b2PLRoZb1wLs+kxkv3v63
T7jHqGNszHzgx4yFHMDgcvh3yfu0ei3TgW2H/MH8+cenZskcZzxQ8uYvO4hv
v+c+p6Ag4wEjsTVg/r0NmitZoxkOfLCPAvN/ez2f8MXz//51mRxgvpVJ9fm7
d//uz5m8jQ3Er5Dl5zte+Ge/5t4UMH8H22KfDay/9z9/JgTmf3tv1j1z5s/9
SwUOsoL42vrJd+eb/9gf1lAI5gdKHQh78PLb/g/VamB+ykbf71Ebvu7PZ37A
AuZ/4d7P3/1l/zWxeWB+0ONfa/9Vft6vui0BzDeokzqiXvtpf/RDdTD/z5Es
xu4pH/dXzPjMDOJv2/46VePAh/01tw+D+XvWWD3+///9/vRVM8B8AJvrCT8=

                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000053589793, -1.9999998928204112`}, \
{-3.000000053589793, -1.9999999196153082`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000053589793, -1.9999998928204112`}, \
{-2.999999999999999, 8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJwdyW1IU2EYxvFz9qZL59yOSRMzZNmakQVHrQR1I5YWIcOJGiOoYGk1sVqs
1nD4gmmtKCTBSYHSymFlEyMyVs/dVg3KkNaifTCzLSmbiau1GlOXez5c/Plx
5R5prtYwCILIW12iDcN9TIJIB8e9kkA8HkeuTQE9aeGD40utNVZIgjxvPE+Q
xQedmd8/McqACuUYta0jDVpVbs9pPQs8Q+9kai8Pvu0yVS20c2B2S8b9Xh4P
bpcV8so/JoNp6nz9dEEqOA7PpWl0KTAwzt5dtDMF8m/dVB2qS4NK10Ntv3QN
GNpsTX3P00Ef7frAY3KhG0jVCaMQWhqCxT3OZND3sjZGJ4Tg1/p/yM8kw6vt
dc8WMii4w20KZa9b/XuiuftVFLhKzfvEI0nQ+SRYJeimoJxbGqkpToKwbaui
bIwCkbY9PGrnwMuDiPXeS4HyqFpRsp4DEd/Alcl5CgJ/3d9/GtlwIcvzmY5R
UNJVoKBpJrTRD2LxOAU+47mvkhYGDOb4sA0nnR3ZbhJcXHIpYZEmVSwQkDAb
lmI/PlDrZKsJYM9UY4/ckLnCe+NI8saIPd/pJac/LaPKR1bs/OZGmfvUEjo2
+Bb7eP2Syc6OoUuXI9g2+bWnFksU3T27YTnhqVYHf2DHP+Qpr8BmaEUXZ+Yi
iOPUYq9lDknV9j+oYuUqduYeTYhvDqOesB2bVVQzs2L4jYLWSWz/pC4iafmF
lPx57JHMF7T5egg5ac5Kwo1cRd9mWEQyYQ52ui0iJohF9HqYxv4P1MA+yQ==

                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000001071795874`, -3.9999999464102047`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000000803846905`, -2.999999946410205}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000000535897935`, -1.9999999464102052`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-2.0000000267948965`, \
-0.9999999464102056}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999464102056, 
                    2.0000000267948965`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.0000001071795874`, -3.9999999464102047`}, \
{-1.0000001339744848`, -4.999999973205101}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999464102056, 2.0000000267948965`}, {
                    5.3589794058235685`*^-8, 1.9999999999999993`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.0000001339744848`, -4.999999973205101}, \
{-1.339744851455892*^-7, -4.999999999999998}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4559017285956095`, \
-1.08819650852448}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102056, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.498635041766911, 
                    1.9977916047506696`}, {-0.25, 0}, 
                    Offset[8], {0.3750479684911916, 0.004416914350627632}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4500000535897932`, \
-1.9999999075576047`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.455901723869172, \
-0.9118033062744589}, {-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.5427562518525013`, \
-4.997657503970689}, {-0.25, 0}, 
                    Offset[8], {0.28551223575603446`, -0.004684863443112697}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.455901782185404, \
-3.0881965353193768`}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102056, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000683269865`, \
-2.5499999343525017`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000535897932`, \
-1.9999999343525015`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999852628056`,
                     0.5500000656474976}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000147371925`, \
-0.5499999343525022}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999958467909, 
                    1.5500000388526003`}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051028}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4500001219167808`, \
-4.549999961147398}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4499999464102058, 
                    2.000000012057703}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.45000013397448496`, \
-4.999999987942294}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input1", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{-12.5, -12.5}, {-3.000000053589793, \
-1.9999999196153082`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{12.5, 
                    12.5}, {-3.000000053589793, -1.9999999196153082`}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    
                    Rational[-21, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{-10.5, -10.5}, {-3.000000053589793, \
-1.9999999196153082`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[
                    21, 2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{10.5, 
                    10.5}, {-3.000000053589793, -1.9999999196153082`}]]], 
                    InsetBox[
                    StyleBox[
                    "\"GAN\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[
                    0.33]], {-3.000000053589793, -1.9999999196153082`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"GAN1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGANOperator", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GAN1", Bold], 
                    Style[
                    NetGANOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    Offset[{-12.5, -12.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]]], 
                    InsetBox[
                    StyleBox[
                    "\"GAN\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-2.999999999999999, 
                    8.038469108735353*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"GAN2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGANOperator", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GAN2", Bold], 
                    Style[
                    NetGANOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    DiskBox[{-0.9999999464102056, 2.0000000267948965`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"MA\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999464102056, 
                    2.0000000267948965`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ME1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanAbsoluteLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["ME1", Bold], 
                    Style[
                    MeanAbsoluteLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.000000053589793, -1.9999998928204112`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    DiskBox[{-1.0000001339744848`, -4.999999973205101}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"MA\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[
                    0.33]], {-1.0000001339744848`, -4.999999973205101}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ME2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanAbsoluteLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["ME2", Bold], 
                    Style[
                    MeanAbsoluteLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{-12.5, -12.5}, {-2.0000001071795874`, \
-3.9999999464102047`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{12.5, 
                    12.5}, {-2.0000001071795874`, -3.9999999464102047`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 
                    1], {-2.0000001071795874`, -3.9999999464102047`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Generator2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Generator2", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000803846905`, -2.999999946410205}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000535897935`, -1.9999999464102052`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Generator1\"", Bold, StripOnInput -> False]}, {
                    StyleBox["NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Generator1", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000267948965`, -0.9999999464102056}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{5.3589794058235685`*^-8, 1.9999999999999993`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossCycle1\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossCycle1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.339744851455892*^-7, -4.999999999999998}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossCycle2\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossCycle2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.000000053589793, \
-1.9999999196153082`}, {-2.999999999999999, 
                    8.038469108735353*^-8}, {-0.9999999464102056, 
                    2.0000000267948965`}, {-4.000000053589793, \
-1.9999998928204112`}, {-1.0000001339744848`, -4.999999973205101}, \
{-2.0000001071795874`, -3.9999999464102047`}, {-2.0000000803846905`, \
-2.999999946410205}, {-2.0000000535897935`, -1.9999999464102052`}, \
{-1.9999999732051024`, 
                    1.0000000535897937`}, {-2.0000000267948965`, \
-0.9999999464102056}, {-1.9999999999999993`, 5.3589794058235685`*^-8}, {
                    5.3589794058235685`*^-8, 
                    1.9999999999999993`}, {-1.339744851455892*^-7, \
-4.999999999999998}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 25, 21, 8, 21, 25, 8, 8, 25, 8, 8, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 38.49999999999999}, {29., 19.}}, 
                    ImageSize -> {287.5000058948773, 433.00000147371924`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "GAN1" -> Association[
                    "Type" -> "NetGAN", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Generator" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[719394511]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    719394511], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2142256776]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2142256776]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1675479172]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1675479172], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1843149663]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1843149663], "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1236890836]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator1/classify/Net/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1236890836], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1236890836], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1239356242]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1239356242], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Discriminator" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["keep max only" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{64, 28, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 64, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{192, 128,
                     5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{1, 192, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2083339941]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association["Type" -> "Aggregation", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Loss" -> "JensenShannon"], "Inputs" -> 
                    Association["Sample" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Latent" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "LossFake" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "GeneratedFake" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "GAN2" -> 
                    Association[
                    "Type" -> "NetGAN", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Generator" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[96400281]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[96400281], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    96400281], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[442234082]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[96400281], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[442234082]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1700186535]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1700186535], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1700186535]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1433499913]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1433499913], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1433499913]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2128666168]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2128666168], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[2128666168], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1859531195]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1859531195], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1859531195], "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1090625466]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1859531195], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator2/classify/Net/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1090625466], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1090625466], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1090625466], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1090625466], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[357625077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[357625077], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[357625077], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[357625077], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Discriminator" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["keep max only" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{64, 28, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2020926078]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2020926078], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 64, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2020926078]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2101562218]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2101562218], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{192, 128,
                     5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2101562218]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1106219060]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1106219060], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{1, 192, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1106219060]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2131117306]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2131117306], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association["Type" -> "Aggregation", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Loss" -> "JensenShannon"], "Inputs" -> 
                    Association["Sample" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Latent" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "LossFake" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "GeneratedFake" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Generator1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2138996532]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2138996532], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2138996532], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[737794793]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2138996532], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[737794793]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1903516967]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1903516967], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1903516967]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1867755409]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1867755409], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1867755409]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2073904070]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2073904070], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[2073904070], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2063609626]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2063609626], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2063609626], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1783652411]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2063609626], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator1/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1783652411],
                     "$InputShape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1783652411], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1783652411], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1783652411], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1108788681]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1108788681], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1108788681], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1108788681], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Generator2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[153052075]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[153052075], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[153052075], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[49072739]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[153052075], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[49072739]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[983001598]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[983001598], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[983001598]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1295227136]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1295227136], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1295227136]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1957152411]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1957152411], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1957152411], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1596316714]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1596316714], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1596316714], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1870853988]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1596316714], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator2/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1870853988],
                     "$InputShape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1870853988], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1870853988], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1870853988], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1563561642]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1563561642], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1563561642], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1563561642], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "ME1" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {
                    NeuralNetworks`LengthVar[4294967310], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "ME2" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {
                    NeuralNetworks`LengthVar[4294967310], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossFake1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossReal2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossFake2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossCycle2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossCycle1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Inputs", "Sample"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Inputs", "Latent"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME1", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Inputs", "Sample"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Inputs", "Latent"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME2", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "LossReal"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "LossReal"], 
                    NeuralNetworks`NetPath["Nodes", "ME1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "ME2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"] -> 
                    NeuralNetworks`NetPath["Nodes", "ME1", "Outputs", "Loss"],
                     NeuralNetworks`NetPath["Outputs", "LossCycle2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME2", "Outputs", "Loss"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN2"], 
                    NeuralNetworks`NetPath["Nodes", "ME1"], 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "ME2"], 
                    NeuralNetworks`NetPath["Nodes", "Generator2"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"], 
                    NeuralNetworks`NetPath["Nodes", "Generator1"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle2"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN2"], 
                    NeuralNetworks`NetPath["Nodes", "ME1"], 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "ME2"], 
                    NeuralNetworks`NetPath["Nodes", "Generator2"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"], 
                    NeuralNetworks`NetPath["Nodes", "Generator1"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle2"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/classify/Net/Biases" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT], 
                    "generator1/classify/Net/Weights" -> 
                    NeuralNetworks`TensorT[{26, 64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "generator1/conv.2/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.2/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator1/conv.3/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.3/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator2/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator2/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator2/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator2/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator2/classify/Net/Biases" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT], 
                    "generator2/classify/Net/Weights" -> 
                    NeuralNetworks`TensorT[{26, 64}, NeuralNetworks`RealT], 
                    "generator2/conv.1/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.1/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "generator2/conv.2/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.2/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator2/conv.3/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.3/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, 
                    NeuralNetworks`RealT]], {}], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossReal1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossFake1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossReal2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossFake2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossCycle2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossCycle1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {
                    180., {90.172119140625, 95.827880859375}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{
  3.803387521939464*^9, 3.803389337169137*^9, 3.8033911080498667`*^9, {
   3.8033914284718924`*^9, 3.803391443900626*^9}},
 CellLabel->
  "Out[3326]=",ExpressionUUID->"497c54ba-e9f3-4610-8222-8f5aadf98f32"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["dataGenerator"], "Input",
 CellChangeTimes->{{3.803391185435801*^9, 3.803391187314321*^9}},
 CellLabel->
  "In[3313]:=",ExpressionUUID->"2831a3a4-1c00-4d15-8283-35024301a80e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    RowBox[{"Association", "[", 
     RowBox[{
      RowBox[{"\<\"Sample\"\>", "\[Rule]", 
       RowBox[{"sampleGeneration", "[", 
        RowBox[{"#BatchSize", ",", "normalizedEnglishNames"}], "]"}]}], ",", 
      RowBox[{"\<\"Latent\"\>", "\[Rule]", 
       RowBox[{"sampleGeneration", "[", 
        RowBox[{"#BatchSize", ",", "normalizedSpanishNames"}], "]"}]}]}], 
     "]"}], "&"}], ",", 
   RowBox[{"\<\"RoundLength\"\>", "\[Rule]", "1504"}]}], "}"}]], "Output",
 CellChangeTimes->{3.8033911881194277`*^9},
 CellLabel->
  "Out[3313]=",ExpressionUUID->"aeaf5804-50fe-4309-a2d0-c79f02a50dd7"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"cycleGAN", ",", "dataGenerator", ",", 
    RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<GAN1\>\"", ",", "\"\<Discriminator\>\""}], "}"}], "|", 
        RowBox[{"{", 
         RowBox[{"\"\<GAN2\>\"", ",", "\"\<Discriminator\>\""}], "}"}]}], ",", 
       RowBox[{"\"\<Generator1\>\"", "|", "\"\<Generator2\>\""}]}], "}"}]}], 
    ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "25"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<CPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8033858688709583`*^9, 3.803385877161685*^9}, {
  3.8033910476058693`*^9, 3.803391050805889*^9}, {3.8033910954472027`*^9, 
  3.803391095957184*^9}},
 CellLabel->
  "In[3327]:=",ExpressionUUID->"a9463e87-b0af-4985-9112-57d69e1478c5"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "netimpconst", 
   "\"The net contains a set of constraints among sequence lengths that is \
impossible to satisfy for any input.\"", 2, 3327, 423, 26207717223377046194, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{{3.8033910979234867`*^9, 3.803391110239766*^9}, 
   3.803391449938323*^9},
 CellLabel->
  "During evaluation of \
In[3327]:=",ExpressionUUID->"b0992156-bf18-49c6-a276-08c59a98c63a"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{{3.8033910979844847`*^9, 3.8033911102780952`*^9}, 
   3.803391450004119*^9},
 CellLabel->
  "Out[3327]=",ExpressionUUID->"f64420af-3a53-4ce6-abb3-a872b93c1465"]
}, Open  ]],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.8033911436092978`*^9, 3.803391175119128*^9}},
 CellLabel->
  "In[3312]:=",ExpressionUUID->"da13e191-bda2-42ab-bd6e-b265755a69d5"],

Cell[CellGroupData[{

Cell[BoxData["cycleGAN"], "Input",
 CellChangeTimes->{{3.803391262326652*^9, 3.803391264989056*^9}, 
   3.8033916660816717`*^9},
 CellLabel->
  "In[3341]:=",ExpressionUUID->"dcda5a28-87fa-4502-aaa1-346deb729e2c"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGraph", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  
                  TemplateBox[{"\"Number of inputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["2", "SummaryItem"]}, {
                 StyleBox[
                  
                  TemplateBox[{"\"Number of outputs\"", "\":\""}, 
                   "RowDefault"], "SummaryItemAnnotation"], 
                 StyleBox["6", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               OverlayBox[{
                 GraphicsBox[{
                   Thickness[0.0149], {
                    GrayLevel[0.6], 
                    Thickness[0.03], 
                    Opacity[1.], 
                    JoinForm[{
                    Style[
                    "Miter", 
                    NeuralNetworks`Private`FormattingCommon`foreground], 
                    10.}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 37.}, {18., 37.}, {
                    18.5, 27.5}, {35., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{50., 37.}, {50., 37.}, {
                    49.5, 27.5}, {33., 27.}}}, CurveClosed -> {0}], 
                    
                    JoinedCurveBox[{{{1, 4, 3}}}, {{{18., 16.}, {18., 16.}, {
                    18.5, 25.5}, {35., 26.}}}, CurveClosed -> {0}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 40.5}, {22.5, 40.5}, {22.5, 33.5}, {15.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 41.}, {15., 41.}, {
                    15., 33.}, {23., 33.}}, {{22., 34.}, {16., 34.}, {16., 
                    40.}, {22., 40.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 19.5}, {22.5, 19.5}, {22.5, 12.5}, {15.5, 
                    12.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{23., 20.}, {15., 20.}, {
                    15., 12.}, {23., 12.}}, {{22., 13.}, {16., 13.}, {16., 
                    19.}, {22., 19.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    30.5, 30.5}, {37.5, 30.5}, {37.5, 23.5}, {30.5, 
                    23.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 31.}, {30., 31.}, {
                    30., 23.}, {38., 23.}}, {{37., 24.}, {31., 24.}, {31., 
                    30.}, {37., 30.}}}]}, {
                    FaceForm[
                    RGBColor[0.84, 0.84, 0.84]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    45.5, 40.5}, {52.5, 40.5}, {52.5, 33.5}, {45.5, 
                    33.5}}}]}, {
                    FaceForm[
                    GrayLevel[0.6]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{53., 41.}, {45., 41.}, {
                    45., 33.}, {53., 33.}}, {{52., 34.}, {46., 34.}, {46., 
                    40.}, {52., 40.}}}]}}, ImageMargins -> 0, 
                  ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
                 StyleBox[
                 "uninitialized", LineColor -> RGBColor[0.66, 0, 0], 
                  FrontFaceColor -> RGBColor[0.66, 0, 0], BackFaceColor -> 
                  RGBColor[0.66, 0, 0], GraphicsColor -> RGBColor[0.66, 0, 0],
                   FontFamily -> "Roboto", FontSize -> 8, FontColor -> 
                  RGBColor[0.66, 0, 0], Background -> GrayLevel[1, 0.65]]}, 
                Alignment -> {Center, 
                  Scaled[0.0001]}], CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetGraph`selection = 2}, 
                  GridBox[{{
                    TagBox[
                    GraphicsBox[{{
                    StyleBox[{
                    InsetBox["\"Input1\"", 
                    
                    Offset[{0, -7}, {-3.9999999999999987`, 
                    1.0717958811647137`*^-7}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"GAN1\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{
                    0, -15.5}, {-3.000000053589793, -1.9999999196153082`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"GAN2\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{0, -15.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"ME1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-27, 2]}, {-0.9999999464102056, 
                    2.0000000267948965`}], 
                    
                    Offset[{0, -13.5}, {-0.9999999464102056, 
                    2.0000000267948965`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Input2\"", 
                    
                    Offset[{
                    0, -7}, {-4.000000053589793, -1.9999998928204112`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"ME2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-27, 
                    2]}, {-1.0000001339744848`, -4.999999973205101}], 
                    
                    Offset[{
                    0, -13.5}, {-1.0000001339744848`, -4.999999973205101}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Generator2\"", 
                    NCache[
                    Offset[{0, 
                    
                    Rational[-31, 
                    2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{
                    0, -15.5}, {-2.0000001071795874`, -3.9999999464102047`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossFake1\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000803846905`, -2.999999946410205}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossReal1\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000535897935`, -1.9999999464102052`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"Generator1\"", 
                    NCache[
                    Offset[{0, 
                    Rational[-31, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{0, -15.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossFake2\"", 
                    
                    Offset[{
                    0, -7}, {-2.0000000267948965`, -0.9999999464102056}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossReal2\"", 
                    
                    Offset[{0, -7}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossCycle1\"", 
                    
                    Offset[{0, -7}, {5.3589794058235685`*^-8, 
                    1.9999999999999993`}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}], 
                    InsetBox["\"LossCycle2\"", 
                    
                    Offset[{
                    0, -7}, {-1.339744851455892*^-7, -4.999999999999998}], 
                    ImageScaled[{
                    Rational[1, 2], 1.}], Automatic, {1, 0}]}, StripOnInput -> 
                    False, FontColor -> GrayLevel[0.5]], 
                    StyleBox[{
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-3.4559017285956095`, \
-1.08819650852448}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.4472135715338733, -0.8944272029829579}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999999}, {-3.449999999999999, 
                    9.244239475045655*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-0.06476863353489408, 
                    5.499618625333035}, {-2.498635041766911, 
                    1.9977916047506696`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.9999306591514608,
                     0.01177611518816256}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{1.473719333233702*^-7, 
                    5.499999999999997}, {-3.4500000535897932`, \
-1.9999999075576047`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794896967885493`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-4.919349484592803, 
                    2.459674907063233}, {-3.455901723869172, \
-0.9118033062744589}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.4472136194660424,
                     0.8944271790168733}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{0.0902352952082343, 
                    5.4992597312273475`}, {-2.5427562518525013`, \
-4.997657503970689}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9998654056776995, -0.016406417310588055`}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{4.919349616406269, 
                    2.459674643436303}, {-2.455901782185404, \
-3.0881965353193768`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.4472135715338733, -0.8944272029829579}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890874007337044`, 
                    3.889087192318316}, {-2.4500000683269865`, \
-2.5499999343525017`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334008}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.473719333233703*^-7, 
                    5.499999999999999}, {-2.4500000535897932`, \
-1.9999999343525015`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999998, -2.6794896967885513`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318316, 
                    3.8890874007337035`}, {-2.4499999852628056`, 
                    0.5500000656474976}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396938}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318316}, {-2.4500000147371925`, \
-0.5499999343525022}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396938, -0.7071068001334007}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193366014812`*^-7, 
                    5.499999999999997}, {-2.4499999999999993`, 
                    6.564749772133872*^-8}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999996, -2.6794897029117842`*^-8}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{-3.889087192318317, 
                    3.8890874007337035`}, {-1.449999958467909, 
                    1.5500000388526003`}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {0.7071068001334007,
                     0.7071067622396939}], 
                    InsetBox[
                    TemplateBox[{"\[Times]", "\"\[Times]\"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"28\""}, "RowWithSeparators"], 
                    
                    Offset[{3.8890874007337035`, 
                    3.889087192318317}, {-1.4500001219167808`, \
-4.549999961147398}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.7071067622396939, -0.7071068001334007}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.473719345446156*^-7, 
                    5.499999999999998}, {-0.4499999464102058, 
                    2.000000012057703}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.679489718993011*^-8}], 
                    InsetBox["\"\[DoubleStruckCapitalR]\"", 
                    
                    Offset[{1.4737193332337029`*^-7, 
                    5.499999999999998}, {-0.45000013397448496`, \
-4.999999987942294}], 
                    ImageScaled[{0.5, 0.415}], Automatic, {
                    0.9999999999999997, -2.6794896967885506`*^-8}]}, 
                    StripOnInput -> False, FontSize -> 8, FontWeight -> 
                    "Thin", FontColor -> GrayLevel[0.7]]}, {
                    GrayLevel[0.7], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.000000053589793, \
-1.9999999196153082`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-2.999999999999999, 
                    8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJxTTMoPSmViYGBQBWIQ/fc/CPAfSEqScgw+WmO3qHjNhJBZ/AfU6pe33M3a
aV/bxr0kVp7/gJOGtquPyBn7NgtZK+l+vgNcWRHbffiu2x/qfBjU+5L3wGGD
nf1TNz+w16uKeLdZj/eA197CtQldz+zPcTbx9MfxHJh56+qWdu639vMs4tbK
VXIfiDzyKahV+pP9Qra3F5LquA6cTA44UML2zf5qsV55dB7ngfmnm5Umuf2y
b08VnhElznng4Vttf8Wq3/bnJ8f5a2/lOHD0RV9rY+cf+zX/+Oeedec44LRn
zdFNJX/tZZapNzqeZz8Qk9HKv9X6n71819Lfbd7sB0TfSiR33Ptnv3NVJ8+8
PWwHsr3SD+jE/rd/yn5lc5sS24G4hgL1Rdv/2y9b2PLRoZb1wLs+kxkv3v63
T7jHqGNszHzgx4yFHMDgcvh3yfu0ei3TgW2H/MH8+cenZskcZzxQ8uYvO4hv
v+c+p6Ag4wEjsTVg/r0NmitZoxkOfLCPAvN/ez2f8MXz//51mRxgvpVJ9fm7
d//uz5m8jQ3Er5Dl5zte+Ge/5t4UMH8H22KfDay/9z9/JgTmf3tv1j1z5s/9
SwUOsoL42vrJd+eb/9gf1lAI5gdKHQh78PLb/g/VamB+ykbf71Ebvu7PZ37A
AuZ/4d7P3/1l/zWxeWB+0ONfa/9Vft6vui0BzDeokzqiXvtpf/RDdTD/z5Es
xu4pH/dXzPjMDOJv2/46VePAh/01tw+D+XvWWD3+///9/vRVM8B8AJvrCT8=

                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000053589793, -1.9999998928204112`}, \
{-3.000000053589793, -1.9999999196153082`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-4.000000053589793, -1.9999998928204112`}, \
{-2.999999999999999, 8.038469108735353*^-8}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    LineBox[CompressedData["
1:eJwdyW1IU2EYxvFz9qZL59yOSRMzZNmakQVHrQR1I5YWIcOJGiOoYGk1sVqs
1nD4gmmtKCTBSYHSymFlEyMyVs/dVg3KkNaifTCzLSmbiau1GlOXez5c/Plx
5R5prtYwCILIW12iDcN9TIJIB8e9kkA8HkeuTQE9aeGD40utNVZIgjxvPE+Q
xQedmd8/McqACuUYta0jDVpVbs9pPQs8Q+9kai8Pvu0yVS20c2B2S8b9Xh4P
bpcV8so/JoNp6nz9dEEqOA7PpWl0KTAwzt5dtDMF8m/dVB2qS4NK10Ntv3QN
GNpsTX3P00Ef7frAY3KhG0jVCaMQWhqCxT3OZND3sjZGJ4Tg1/p/yM8kw6vt
dc8WMii4w20KZa9b/XuiuftVFLhKzfvEI0nQ+SRYJeimoJxbGqkpToKwbaui
bIwCkbY9PGrnwMuDiPXeS4HyqFpRsp4DEd/Alcl5CgJ/3d9/GtlwIcvzmY5R
UNJVoKBpJrTRD2LxOAU+47mvkhYGDOb4sA0nnR3ZbhJcXHIpYZEmVSwQkDAb
lmI/PlDrZKsJYM9UY4/ckLnCe+NI8saIPd/pJac/LaPKR1bs/OZGmfvUEjo2
+Bb7eP2Syc6OoUuXI9g2+bWnFksU3T27YTnhqVYHf2DHP+Qpr8BmaEUXZ+Yi
iOPUYq9lDknV9j+oYuUqduYeTYhvDqOesB2bVVQzs2L4jYLWSWz/pC4iafmF
lPx57JHMF7T5egg5ac5Kwo1cRd9mWEQyYQ52ui0iJohF9HqYxv4P1MA+yQ==

                    "]], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000001071795874`, -3.9999999464102047`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000000803846905`, -2.999999946410205}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-3.000000053589793, -1.9999999196153082`}, \
{-2.0000000535897935`, -1.9999999464102052`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999732051024`, 
                    1.0000000535897937`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-2.0000000267948965`, \
-0.9999999464102056}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.999999999999999, 
                    8.038469108735353*^-8}, {-1.9999999999999993`, 
                    5.3589794058235685`*^-8}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.9999999732051024`, 
                    1.0000000535897937`}, {-0.9999999464102056, 
                    2.0000000267948965`}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-2.0000001071795874`, -3.9999999464102047`}, \
{-1.0000001339744848`, -4.999999973205101}}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-0.9999999464102056, 2.0000000267948965`}, {
                    5.3589794058235685`*^-8, 1.9999999999999993`}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    
                    LineBox[{{-1.0000001339744848`, -4.999999973205101}, \
{-1.339744851455892*^-7, -4.999999999999998}}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4559017285956095`, \
-1.08819650852448}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102056, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-3.449999999999999, 
                    9.244239475045655*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794897029117836`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.498635041766911, 
                    1.9977916047506696`}, {-0.25, 0}, 
                    Offset[8], {0.3750479684911916, 0.004416914350627632}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input1", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.4500000535897932`, \
-1.9999999075576047`}, {-0.25, 0}, 
                    Offset[8], {1., -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Latent\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Latent"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-3.455901723869172, \
-0.9118033062744589}, {-0.25, 0}, 
                    Offset[8], {1.000000053589794, 1.9999999732051024`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Sample\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Sample"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.5427562518525013`, \
-4.997657503970689}, {-0.25, 0}, 
                    Offset[8], {0.28551223575603446`, -0.004684863443112697}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Target\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Input2", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    
                    Offset[{0, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Target"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.455901782185404, \
-3.0881965353193768`}, {-0.25, 0}, 
                    Offset[8], {0.9999999464102056, -2.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000683269865`, \
-2.5499999343525017`}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.000000026794897}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000535897932`, \
-1.9999999343525015`}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999996, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal1\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999852628056`,
                     0.5500000656474976}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051026}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"GeneratedFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"GeneratedFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-2.4500000147371925`, \
-0.5499999343525022}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948967`}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossFake\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossFake2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossFake", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossFake2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-2.4499999999999993`,
                     6.564749772133872*^-8}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999998, -2.679489702911785*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"LossReal\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossReal2\""}, "RowDefault"], 
                    
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"LossReal", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossReal2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-1.449999958467909, 
                    1.5500000388526003`}, {-0.25, 0}, 
                    Offset[8], {1.0000000267948967`, 0.9999999732051028}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-1.4500001219167808`, \
-4.549999961147398}, {-0.25, 0}, 
                    Offset[8], {0.9999999732051026, -1.0000000267948965`}], 
                    TagBox[
                    GridBox[{{
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"]}, {
                    StyleBox[
                    TemplateBox[{"\"Output\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"[\"", TraditionalForm], 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"Input\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Row[{"matrix", 
                    Style[
                    Row[{"(\[VeryThinSpace]size: ", 
                    Style["n", Italic], "\[Times]28\[VeryThinSpace])"}], 
                    GrayLevel[0.5]]}, " "], 
                    Style[
                    Row[{"Output", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["[", 
                    Offset[{-5, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "Input"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}]}], {-0.4499999464102058, 
                    2.000000012057703}, {-0.25, 0}, 
                    Offset[8], {0.9999999999999997, -2.679489718993011*^-8}], 
                    
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle1\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle1"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ], 
                    TagBox[
                    TooltipBox[
                    InsetBox[
                    GraphicsBox[{
                    GrayLevel[0.7], 
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 
                    0.3333333333333333}}]}], {-0.45000013397448496`, \
-4.999999987942294}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794896967885506`*^-8}], 
                    TagBox[
                    GridBox[{{"\"real\""}, {
                    StyleBox[
                    TemplateBox[{"\"Loss\"", 
                    GraphicsBox[{{}, {
                    GrayLevel[0.7], {
                    
                    LineBox[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {
                    0., 0.}}]}}, {
                    InsetBox[
                    GraphicsBox[
                    StyleBox[
                    
                    PolygonBox[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], {
                    GrayLevel[0.7]}, StripOnInput -> 
                    False]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"]\"", TraditionalForm], 
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    InsetBox[
                    FormBox["\"\"", TraditionalForm], 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "\"LossCycle2\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Center}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{"real", 
                    Style[
                    Row[{"Loss", 
                    Graphics[{{}, {
                    GrayLevel[0.7], {
                    
                    Line[{{-0.9999999999999997, 2.6794897029117842`*^-8}, {0.,
                     0.}}]}}, {
                    Inset[
                    Graphics[
                    Style[
                    
                    Polygon[{{-1., 0.3333333333333333}, {0., 
                    0.}, {-1., -0.3333333333333333}, {-0.6666666666666666, 
                    0.}, {-1., 0.3333333333333333}}], 
                    GrayLevel[0.7]]], {-0.4499999999999998, 
                    1.2057703663103027`*^-8}, {-0.25, 0}, 
                    Offset[8], {
                    0.9999999999999997, -2.6794897029117842`*^-8}]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], FontSize -> 10, {{{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{-0.9999999999999997, 2.6794897029117842`*^-8}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["]", 
                    
                    Offset[{7, 0}, {-0.9999999999999997, 
                    2.6794897029117842`*^-8}]]}}, {{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    Disk[{0., 0.}, 
                    Offset[{2, 2}]]}, {
                    GrayLevel[0.5], 
                    Text["", 
                    Offset[{0, 0}, {0., 0.}]]}}}}}, 
                    ImageSize -> {68.99999999999997, 15.000001473719337`}, 
                    AspectRatio -> Full, PlotRangePadding -> 0, 
                    ImagePadding -> {{7., 7.}, {10., 5.}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    BaseStyle -> {TooltipBoxOptions -> {
                    TooltipDelay -> 0.08}}], "LossCycle2"}], 
                    GrayLevel[0.5]]}, Center], "Tooltip"]& ]}, {
                    EdgeForm[
                    AbsoluteThickness[1]], 
                    StyleBox[{
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-3.9999999999999987`, 1.0717958811647137`*^-7}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input1", Bold]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 1), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{-12.5, -12.5}, {-3.000000053589793, \
-1.9999999196153082`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{12.5, 
                    12.5}, {-3.000000053589793, -1.9999999196153082`}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    
                    Rational[-21, 
                    2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{-10.5, -10.5}, {-3.000000053589793, \
-1.9999999196153082`}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[
                    21, 2]}, {-3.000000053589793, -1.9999999196153082`}], 
                    
                    Offset[{10.5, 
                    10.5}, {-3.000000053589793, -1.9999999196153082`}]]], 
                    InsetBox[
                    StyleBox[
                    "\"GAN\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[
                    0.33]], {-3.000000053589793, -1.9999999196153082`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"GAN1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGANOperator", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GAN1", Bold], 
                    Style[
                    NetGANOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 2), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], {
                    EdgeForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    FaceForm[
                    RGBColor[0.5856, 0.5856, 0.5856]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    Offset[{-12.5, -12.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{12.5, 12.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]]]}, 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-21, 2], 
                    Rational[-21, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{-10.5, -10.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]], 
                    NCache[
                    Offset[{
                    Rational[21, 2], 
                    Rational[21, 2]}, {-2.999999999999999, 
                    8.038469108735353*^-8}], 
                    
                    Offset[{10.5, 10.5}, {-2.999999999999999, 
                    8.038469108735353*^-8}]]], 
                    InsetBox[
                    StyleBox[
                    "\"GAN\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 9, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-2.999999999999999, 
                    8.038469108735353*^-8}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"GAN2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetGANOperator", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["GAN2", Bold], 
                    Style[
                    NetGANOperator, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 3), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    DiskBox[{-0.9999999464102056, 2.0000000267948965`}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"MA\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[0.33]], {-0.9999999464102056, 
                    2.0000000267948965`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ME1\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanAbsoluteLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["ME1", Bold], 
                    Style[
                    MeanAbsoluteLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 4), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-4.000000053589793, -1.9999998928204112`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Input2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Input2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 5), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    Hue[0, 0.7, 0.9]], 
                    FaceForm[
                    RGBColor[
                    0.9333333333333333, 0.5133333333333334, 
                    0.5133333333333334]], 
                    DiskBox[{-1.0000001339744848`, -4.999999973205101}, 
                    Offset[11.666666666666668`]], 
                    InsetBox[
                    StyleBox[
                    "\"MA\"", StripOnInput -> False, LineColor -> 
                    GrayLevel[0.33], FrontFaceColor -> GrayLevel[0.33], 
                    BackFaceColor -> GrayLevel[0.33], GraphicsColor -> 
                    GrayLevel[0.33], FontSize -> 10, FontWeight -> Bold, 
                    FontColor -> GrayLevel[
                    0.33]], {-1.0000001339744848`, -4.999999973205101}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"ME2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "MeanAbsoluteLossLayer", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["ME2", Bold], 
                    Style[
                    MeanAbsoluteLossLayer, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 6), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    
                    Rational[-25, 
                    2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{-12.5, -12.5}, {-2.0000001071795874`, \
-3.9999999464102047`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[
                    25, 2]}, {-2.0000001071795874`, -3.9999999464102047`}], 
                    
                    Offset[{12.5, 
                    12.5}, {-2.0000001071795874`, -3.9999999464102047`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 
                    1], {-2.0000001071795874`, -3.9999999464102047`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Generator2\"", Bold, StripOnInput -> False]}, {
                    StyleBox[
                    "NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Generator2", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 7), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000803846905`, -2.999999946410205}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 8), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000535897935`, -1.9999999464102052`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal1\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 9), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    EdgeForm[
                    RGBColor[0.881, 0.65, 0.65]], 
                    FaceForm[
                    RGBColor[
                    0.9206666666666666, 0.7666666666666667, 
                    0.7666666666666667]], 
                    RectangleBox[
                    NCache[
                    Offset[{
                    Rational[-25, 2], 
                    Rational[-25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{-12.5, -12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]], 
                    NCache[
                    Offset[{
                    Rational[25, 2], 
                    Rational[25, 2]}, {-1.9999999732051024`, 
                    1.0000000535897937`}], 
                    
                    Offset[{12.5, 12.5}, {-1.9999999732051024`, 
                    1.0000000535897937`}]]], 
                    InsetBox[
                    GraphicsBox[{
                    Thickness[0.014925373134328358`], {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    GrayLevel[0.5], 
                    Thickness[0.018686567164179105`], 
                    Opacity[1.], 
                    JoinForm[{
                    Style["Miter", 
                    GrayLevel[0.33]], 10.}], 
                    
                    JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 
                    91.5}}}, CurveClosed -> {0}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    15.5, 103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                    15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                    103.}, {23., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    29.5, 103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                    29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                    103.}, {37., 103.}}}]}, {
                    FaceForm[{
                    RGBColor[0.732, 0.732, 0.732], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{
                    43.5, 103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 
                    79.5}}}]}, {
                    FaceForm[{
                    GrayLevel[0.33], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                    43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                    103.}, {51., 103.}}}]}}, AspectRatio -> 0.7, ImageMargins -> 
                    0., ImagePadding -> 0, ImageSize -> 16, PlotRange -> All, 
                    PlotRangePadding -> 1], {-1.9999999732051024`, 
                    1.0000000535897937`}]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"Generator1\"", Bold, StripOnInput -> False]}, {
                    StyleBox["NetChain", FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["Generator1", Bold], 
                    Style[
                    NetChain, FontFamily -> "Source Code Pro", 
                    ShowStringCharacters -> True]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 10), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-2.0000000267948965`, -0.9999999464102056}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossFake2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossFake2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 11), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.9999999999999993`, 5.3589794058235685`*^-8}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossReal2\"", Bold, StripOnInput -> False]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossReal2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 12), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{5.3589794058235685`*^-8, 1.9999999999999993`}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossCycle1\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossCycle1", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 13), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]], 
                    TagBox[
                    TagBox[
                    TooltipBox[{
                    GrayLevel[0.85], 
                    EdgeForm[
                    GrayLevel[0.5]], 
                    DiskBox[{-1.339744851455892*^-7, -4.999999999999998}, 
                    Offset[{2., 2.}, {0., 0.}]]}, 
                    TagBox[
                    GridBox[{{
                    StyleBox["\"LossCycle2\"", Bold, StripOnInput -> False]}},
                     GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    DefaultBaseStyle -> "Column", 
                    GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}], 
                    "Column"], 
                    TooltipStyle -> {
                    Background -> GrayLevel[0.937255], CellFrame -> 1, 
                    CellFrameColor -> GrayLevel[0.85]}], Annotation[#, 
                    Column[{
                    Style["LossCycle2", Bold]}], "Tooltip"]& ], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = 14), 
                    PassEventsUp -> False, Method -> "Preemptive", 
                    PassEventsDown -> Automatic}]]}, FontSize -> 10]}, {
                    EdgeForm[{
                    GrayLevel[0.5], 
                    Thickness[Large], 
                    Dashing[{0, Small}]}], 
                    FaceForm[None], 
                    PolygonBox[
                    Dynamic[
                    If[
                    Not[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection]], {}, 
                    
                    GeneralUtilities`Graphics`PackagePrivate`makeOffsetSquare[
                    
                    
                    Part[{{-3.9999999999999987`, 
                    1.0717958811647137`*^-7}, {-3.000000053589793, \
-1.9999999196153082`}, {-2.999999999999999, 
                    8.038469108735353*^-8}, {-0.9999999464102056, 
                    2.0000000267948965`}, {-4.000000053589793, \
-1.9999998928204112`}, {-1.0000001339744848`, -4.999999973205101}, \
{-2.0000001071795874`, -3.9999999464102047`}, {-2.0000000803846905`, \
-2.999999946410205}, {-2.0000000535897935`, -1.9999999464102052`}, \
{-1.9999999732051024`, 
                    1.0000000535897937`}, {-2.0000000267948965`, \
-0.9999999464102056}, {-1.9999999999999993`, 5.3589794058235685`*^-8}, {
                    5.3589794058235685`*^-8, 
                    1.9999999999999993`}, {-1.339744851455892*^-7, \
-4.999999999999998}}, NeuralNetworks`Private`NetGraph`selection], 
                    3 + {0.5, 0.5} 
                    Part[{8, 25, 25, 21, 8, 21, 25, 8, 8, 25, 8, 8, 8, 8}, 
                    NeuralNetworks`Private`NetGraph`selection], {-0.5, 
                    0.5}]]]]}}, AspectRatio -> Full, 
                    BaseStyle -> {
                    TooltipBoxOptions -> {TooltipDelay -> 0.08}}, 
                    ImageMargins -> {{0, 0}, {0, 0}}, 
                    ImagePadding -> {{29., 38.49999999999999}, {29., 19.}}, 
                    ImageSize -> {287.5000058948773, 433.00000147371924`}, 
                    PlotRangePadding -> 0], 
                    
                    EventHandlerTag[{
                    "MouseClicked" :> (
                    NeuralNetworks`Private`NetGraph`selection = None), Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]]}, {
                    DynamicBox[
                    If[
                    IntegerQ[NeuralNetworks`Private`NetGraph`selection], 
                    NeuralNetworks`FormatSelectedParameterGraph[
                    Part[
                    Association[
                    "Nodes" -> 
                    Association[
                    "GAN1" -> Association[
                    "Type" -> "NetGAN", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Generator" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[719394511]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    719394511], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2142256776]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2142256776]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1675479172]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1675479172], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1843149663]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1843149663], "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1236890836]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator1/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator1/classify/Net/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1236890836], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1236890836], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1239356242]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1239356242], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Discriminator" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["keep max only" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{64, 28, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 64, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{192, 128,
                     5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{1, 192, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2083339941]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association["Type" -> "Aggregation", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Loss" -> "JensenShannon"], "Inputs" -> 
                    Association["Sample" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Latent" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "LossFake" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "GeneratedFake" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "GAN2" -> 
                    Association[
                    "Type" -> "NetGAN", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Generator" -> Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association["add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[96400281]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[96400281], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    96400281], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[442234082]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[96400281], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[442234082]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1700186535]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1700186535], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[442234082], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1700186535]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1433499913]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1433499913], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1700186535], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1433499913]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2128666168]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2128666168], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1433499913], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[2128666168], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1859531195]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1859531195], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1859531195], "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1090625466]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1859531195], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2128666168], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association["Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> NetSharedArray[
                    "generator2/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator2/classify/Net/Biases"]], 
                    "Parameters" -> Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1090625466], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1090625466], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1090625466], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> NeuralNetworks`LengthVar[
                    1090625466], "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[357625077]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1090625466], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[357625077], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[357625077], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[357625077], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Discriminator" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["keep max only" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{64, 28, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2020926078]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2020926078], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{128, 64, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{128}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2020926078]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2101562218]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2101562218], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2020926078], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{192, 128,
                     5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{192}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2101562218]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1106219060]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1106219060], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2101562218], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> NeuralNetworks`TensorT[{1, 192, 
                    5}, NeuralNetworks`RealT], "Biases" -> 
                    NeuralNetworks`Nullable[
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1106219060]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2131117306]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2131117306], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1106219060], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association["Type" -> "Aggregation", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2131117306], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> NeuralNetworks`ValidatedParameter[{
                    "Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`SymbolicRandomArray[
                    NeuralNetworks`Private`NNConstantDist[0], {1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association["OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "Loss" -> "JensenShannon"], "Inputs" -> 
                    Association["Sample" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Latent" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT], "LossFake" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "GeneratedFake" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Generator1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2138996532]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2138996532], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2138996532], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[737794793]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2138996532], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[737794793]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1903516967]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1903516967], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[737794793], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1903516967]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1867755409]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1867755409], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1903516967], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1867755409]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2073904070]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2073904070], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1867755409], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[2073904070], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2063609626]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2063609626], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[2063609626], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1783652411]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2063609626], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2073904070], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator1/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1783652411],
                     "$InputShape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1783652411], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1783652411], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1783652411], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1108788681]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1783652411], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1108788681], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1108788681], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1108788681], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "Generator2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association["Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[153052075]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[153052075], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[153052075], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[49072739]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[153052075], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[49072739]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[983001598]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[983001598], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[49072739], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[983001598]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1295227136]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1295227136], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[983001598], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator2/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1295227136]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1957152411]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> NeuralNetworks`ValidatedParameter[
                    1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1957152411], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1295227136], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association["Type" -> "Chain", "Nodes" -> 
                    Association["1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1957152411], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1596316714]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1596316714], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1596316714], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1870853988]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1596316714], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1957152411], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association["Type" -> "NetMap", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator2/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator2/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1870853988],
                     "$InputShape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association["Type" -> "Softmax", "Arrays" -> 
                    Association[], "Parameters" -> Association["Level" -> -1],
                     "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association["Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association["2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> NetSharedArray[
                    "generator2/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1870853988], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1870853988], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1870853988], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1563561642]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1870853988], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1563561642], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1563561642], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1563561642], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {NeuralNetworks`NetPath[
                    "Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], "ME1" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {
                    NeuralNetworks`LengthVar[4294967310], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "ME2" -> 
                    Association[
                    "Type" -> "MeanAbsoluteLoss", "Arrays" -> Association[], 
                    "Parameters" -> Association["$Dimensions" -> {
                    NeuralNetworks`LengthVar[4294967310], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Target" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Loss" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "LossReal1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossFake1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossReal2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossFake2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossCycle2" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT], 
                    "LossCycle1" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Inputs", "Sample"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Inputs", "Latent"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME1", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Inputs", "Sample"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Inputs", "Latent"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME2", "Inputs", "Target"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN1", "Outputs", "LossReal"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "GeneratedFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "LossFake"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "GAN2", "Outputs", "LossReal"], 
                    NeuralNetworks`NetPath["Nodes", "ME1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Nodes", "ME2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "Generator2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"] -> 
                    NeuralNetworks`NetPath["Nodes", "ME1", "Outputs", "Loss"],
                     NeuralNetworks`NetPath["Outputs", "LossCycle2"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "ME2", "Outputs", "Loss"]}], 
                    Apply[Sequence, 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN2"], 
                    NeuralNetworks`NetPath["Nodes", "ME1"], 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "ME2"], 
                    NeuralNetworks`NetPath["Nodes", "Generator2"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"], 
                    NeuralNetworks`NetPath["Nodes", "Generator1"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle2"]}, 
                    NeuralNetworks`Private`NetGraph`selection]]], 
                    Part[{
                    NeuralNetworks`NetPath["Inputs", "Input1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN1"], 
                    NeuralNetworks`NetPath["Nodes", "GAN2"], 
                    NeuralNetworks`NetPath["Nodes", "ME1"], 
                    NeuralNetworks`NetPath["Inputs", "Input2"], 
                    NeuralNetworks`NetPath["Nodes", "ME2"], 
                    NeuralNetworks`NetPath["Nodes", "Generator2"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake1"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal1"], 
                    NeuralNetworks`NetPath["Nodes", "Generator1"], 
                    NeuralNetworks`NetPath["Outputs", "LossFake2"], 
                    NeuralNetworks`NetPath["Outputs", "LossReal2"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle1"], 
                    NeuralNetworks`NetPath["Outputs", "LossCycle2"]}, 
                    NeuralNetworks`Private`NetGraph`selection], 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator1/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/classify/Net/Biases" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT], 
                    "generator1/classify/Net/Weights" -> 
                    NeuralNetworks`TensorT[{26, 64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.1/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "generator1/conv.2/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.2/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator1/conv.3/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator1/conv.3/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator2/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator2/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "generator2/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator2/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator2/classify/Net/Biases" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT], 
                    "generator2/classify/Net/Weights" -> 
                    NeuralNetworks`TensorT[{26, 64}, NeuralNetworks`RealT], 
                    "generator2/conv.1/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.1/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 28, 5}, NeuralNetworks`RealT],
                     "generator2/conv.2/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.2/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, NeuralNetworks`RealT],
                     "generator2/conv.3/1/Biases" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "generator2/conv.3/1/Weights" -> 
                    NeuralNetworks`TensorT[{64, 64, 5}, 
                    NeuralNetworks`RealT]], {}], 
                    GridBox[{{
                    ItemBox[
                    StyleBox["Inputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox["", Frame -> {{False, False}, {False, 
                    GrayLevel[0.85]}}], 
                    ItemBox[
                    StyleBox["Outputs", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{"\"Input1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossReal1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{"\"Input2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"], "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossFake1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossReal2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossFake2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossCycle2\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {"", "", "", "", 
                    StyleBox[
                    TemplateBox[{"\"LossCycle1\"", "\":\""}, "RowDefault"], 
                    "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}]], 
                    ImageSizeCache -> {
                    180., {90.172119140625, 95.827880859375}}, 
                    TrackedSymbols :> {
                    NeuralNetworks`Private`NetGraph`selection}]}}, 
                   GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                  Initialization :> {NetGraph}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGraph[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803391265845703*^9, 3.803391669063943*^9},
 CellLabel->
  "Out[3341]=",ExpressionUUID->"04b7f4d9-23fb-4711-9051-ecf9be9afe2b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"trained", "=", 
  RowBox[{"NetTrain", "[", 
   RowBox[{"cycleGAN", ",", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"<|", 
        RowBox[{
         RowBox[{"\"\<Input1\>\"", "\[Rule]", 
          RowBox[{"sampleGeneration", "[", 
           RowBox[{"#BatchSize", ",", "normalizedEnglishNames"}], "]"}]}], 
         ",", 
         RowBox[{"\"\<Input2\>\"", "\[Rule]", 
          RowBox[{"sampleGeneration", "[", 
           RowBox[{"#BatchSize", ",", "normalizedSpanishNames"}], "]"}]}]}], 
        "|>"}], "]"}], ",", 
      RowBox[{"\"\<RoundLength\>\"", "\[Rule]", 
       RowBox[{"Length", "[", "normalizedEnglishNames", "]"}]}]}], "}"}], ",", 
    RowBox[{"TrainingUpdateSchedule", "\[Rule]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"{", 
         RowBox[{"\"\<GAN1\>\"", ",", "\"\<Discriminator\>\""}], "}"}], "|", 
        RowBox[{"{", 
         RowBox[{"\"\<GAN2\>\"", ",", "\"\<Discriminator\>\""}], "}"}]}], ",", 
       RowBox[{"\"\<Generator1\>\"", "|", "\"\<Generator2\>\""}]}], "}"}]}], 
    ",", 
    RowBox[{"MaxTrainingRounds", "\[Rule]", "25"}], ",", 
    RowBox[{"TargetDevice", "\[Rule]", "\"\<CPU\>\""}]}], "]"}]}]], "Input",
 CellChangeTimes->{{3.8033912980031347`*^9, 3.8033913772044373`*^9}},
 CellLabel->
  "In[3329]:=",ExpressionUUID->"b70a4f7e-66a8-4b3e-8667-58c11815cc2e"],

Cell[BoxData[
 TemplateBox[{
  "NetTrain", "netimpconst", 
   "\"The net contains a set of constraints among sequence lengths that is \
impossible to satisfy for any input.\"", 2, 3329, 425, 26207717223377046194, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{
  3.803391270813739*^9, {3.803391367366479*^9, 3.803391382871048*^9}, {
   3.8033914536208353`*^9, 3.8033914551129847`*^9}},
 CellLabel->
  "During evaluation of \
In[3329]:=",ExpressionUUID->"13996d48-c769-4ad3-9f00-5871e80eba8f"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{
  3.80339127088482*^9, {3.8033913674326353`*^9, 3.803391382910733*^9}, {
   3.8033914536574173`*^9, 3.803391455153162*^9}},
 CellLabel->
  "Out[3329]=",ExpressionUUID->"2dd2fb46-2785-4ee6-9867-71afa78625e2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleGeneration", "[", 
  RowBox[{"1", ",", "normalizedEnglishNames"}], "]"}]], "Input",
 CellChangeTimes->{{3.8033914079692583`*^9, 3.803391413856782*^9}},
 CellLabel->
  "In[3330]:=",ExpressionUUID->"47291e4e-8eb6-45dc-945f-03ca8c7c8c11"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"9", ",", "28"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"9", ",", "28"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "0.`", "\", \"", "0.`", "\", \"", "0.`", "\", \"", "0.`", 
                    "\", \"", "0.`", "\", \"", "\"\[Ellipsis]\""}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJITiGUY6Aka7EGk
z0Qbe7paS2WwJ8OQ5u5X5c0k247ZaUGDJnzXaznQ3C3FBY5UtePaxtBBE37U
Bw32AJHJE9I=
   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.8033914142824993`*^9, 3.803391456651785*^9},
 CellLabel->
  "Out[3330]=",ExpressionUUID->"ef3c817a-4f39-41b5-8c65-567a2642039c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"sampleGeneration", "[", 
  RowBox[{"1", ",", "normalizedSpanishNames"}], "]"}]], "Input",
 CellChangeTimes->{{3.803391416265573*^9, 3.8033914211309633`*^9}},
 CellLabel->
  "In[3331]:=",ExpressionUUID->"abd51306-ae3b-44f7-9d57-61e8b82097ff"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"11", ",", "28"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"11", ",", "28"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "0.`", "\", \"", "0.`", "\", \"", "0.`", "\", \"", "0.`", 
                    "\", \"", "0.`", "\", \"", "\"\[Ellipsis]\""}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIbiGUY6Aka7JF5
h/Pc7XGppBeQ7LAccDdgA+fMnanmLtXddoPSjw0THIhyV9kdrUHpfmRgwEGc
X2gNpm/0pJk7zOWdBoUf8YMGewDqAxYC
   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.803391421471335*^9, 3.8033914582672033`*^9},
 CellLabel->
  "Out[3331]=",ExpressionUUID->"9e04d63c-82b5-4e41-8a5d-c024b7e74d6c"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Block", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"s", ",", "onehot"}], "}"}], ",", 
   RowBox[{
    RowBox[{"s", "=", 
     RowBox[{"{", "\"\<SUMAN\>\"", "}"}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"onehot", "=", 
     RowBox[{
      RowBox[{"UnitVectorLayer", "[", 
       RowBox[{
        RowBox[{"Length", "[", "characters2", "]"}], ",", 
        RowBox[{"\"\<Input\>\"", "\[Rule]", 
         RowBox[{"{", "Automatic", "}"}]}]}], "]"}], "[", 
      RowBox[{"netpreproc", "[", "s", "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{
      RowBox[{"NumericArray", "[", 
       RowBox[{"#", ",", "\"\<Real32\>\""}], "]"}], "&"}], "/@", 
     RowBox[{"Map", "[", 
      RowBox[{"randomizeOnehot", ",", "onehot"}], "]"}]}]}]}], "]"}]], "Input",\

 CellChangeTimes->{{3.803391494026105*^9, 3.803391548545001*^9}},
 CellLabel->
  "In[3339]:=",ExpressionUUID->"e3918d58-0cfa-460a-939c-16d3841dec4e"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = True, Typeset`embedState$$ = "Ready"}, 
     
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"7", ",", "28"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"7", ",", "28"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "0.`", "\", \"", "0.`", "\", \"", "0.`", "\", \"", "0.`", 
                    "\", \"", "0.`", "\", \"", "\"\[Ellipsis]\""}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSJIdiGUY6Aka7Klp
mmp/KFXNIxa05XlT1V6e92EUmTfvZ/CAhAMpYPkdp0HvRghosAcAMoYSJQ==

   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{3.803391548825089*^9},
 CellLabel->
  "Out[3339]=",ExpressionUUID->"049e1518-2d7b-48e8-b445-d51a1d4ac901"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Normal", "@", "%"}]], "Input",
 CellChangeTimes->{{3.803391556194022*^9, 3.803391558279633*^9}},
 CellLabel->
  "In[3340]:=",ExpressionUUID->"38c0fd2d-991a-4457-bdbf-688167ee3d6d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "1.`", ",", "0.`"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.8342154622077942`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.7946552038192749`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.8395850658416748`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "0.828027606010437`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.7611793875694275`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", 
      ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`"}], "}"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{
     "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", "0.`", ",", 
      "0.`", ",", "0.`", ",", "0.`", ",", "1.`"}], "}"}]}], "}"}], 
  "}"}]], "Output",
 CellChangeTimes->{3.803391558731007*^9},
 CellLabel->
  "Out[3340]=",ExpressionUUID->"6f649b99-d4cb-4c65-a684-0d2c932666f5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[""], "Input",
 CellChangeTimes->{3.803391547275712*^9},
 NumberMarks->False,ExpressionUUID->"8d3fbeea-572d-4362-a220-827646daaebe"],

Cell[BoxData[
 RowBox[{"{", 
  InterpretationBox[
   RowBox[{
    TagBox["NumericArray",
     "SummaryHead"], "[", 
    DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
     TemplateBox[{
       PaneSelectorBox[{False -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxOpener"]], 
               ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
               BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"6", ",", "28"}], "}"}], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}], True -> GridBox[{{
             PaneBox[
              ButtonBox[
               DynamicBox[
                FEPrivate`FrontEndResource["FEBitmaps", "SummaryBoxCloser"]], 
               ButtonFunction :> (Typeset`open$$ = False), Appearance -> None,
                BaseStyle -> {}, Evaluator -> Automatic, Method -> 
               "Preemptive"], Alignment -> {Center, Center}, ImageSize -> 
              Dynamic[{
                Automatic, 
                 3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                  Magnification])}]], 
             GridBox[{{
                RowBox[{
                  TagBox["\"Type: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox["\"Real32\"", "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Dimensions: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   RowBox[{"{", 
                    RowBox[{"6", ",", "28"}], "}"}], "SummaryItem"]}]}, {
                RowBox[{
                  TagBox["\"Data: \"", "SummaryItemAnnotation"], 
                  "\[InvisibleSpace]", 
                  TagBox[
                   
                   TemplateBox[{
                    "0.`", "\", \"", "0.`", "\", \"", "0.`", "\", \"", "0.`", 
                    "\", \"", "0.`", "\", \"", "\"\[Ellipsis]\""}, 
                    "RowDefault"], "SummaryItem"]}]}}, 
              GridBoxAlignment -> {
               "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
              False, GridBoxItemSize -> {
               "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
              GridBoxSpacings -> {
               "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
              BaseStyle -> {
               ShowStringCharacters -> False, NumberMarks -> False, 
                PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
           GridBoxAlignment -> {"Columns" -> {{Left}}, "Rows" -> {{Top}}}, 
           AutoDelete -> False, 
           GridBoxItemSize -> {
            "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
           BaselinePosition -> {1, 1}]}, 
        Dynamic[Typeset`open$$], ImageSize -> Automatic]},
      "SummaryPanel"],
     DynamicModuleValues:>{}], "]"}],
   CompressedData["
1:eJxTTMoPSmNiYGAo5gASQYnljkVFiZXBbCBOamKOsVEOSBLElWGgJ2iwJ0fX
g4mBZOmDgXR+V4r0DwSYxJY3aNxsvUx2AN3SYA8Ai8kPHg==
   "],
   Editable->False,
   SelectWithContents->True,
   Selectable->False], "}"}]], "Output",
 CellChangeTimes->{{3.803391525389695*^9, 3.803391543341156*^9}},
 CellLabel->
  "Out[3338]=",ExpressionUUID->"97281f7a-9088-4b48-b02f-4f28549ef1fd"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"m", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{
    RowBox[{"NetInitialize", "@", "cycleGAN"}], ",", "\"\<GAN1\>\""}], 
   "]"}]}]], "Input",
 CellChangeTimes->{{3.803392208501107*^9, 3.803392295082399*^9}},
 CellLabel->
  "In[3348]:=",ExpressionUUID->"a546f8ee-9e37-46c8-9392-eb283e3f03a2"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetGANOperator", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   RGBColor[0.33, 0.33, 0.33], 
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{"\"Sample\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"Latent\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossReal\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"LossFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{"\"GeneratedFake\"", "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> {2, 1}, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[
                
                GraphicsComplexBox[{{0, 0}, {-0.5, 1}, {0.5, 1}, {1.5, 1}, {1,
                   0}}, {{
                   Opacity[0.3], 
                   
                   LineBox[{{1, 2}, {1, 3}, {1, 4}, {5, 2}, {5, 3}, {5, 
                    4}}]}, {
                   RGBColor[0.33, 0.33, 0.33], 
                   AbsolutePointSize[5], 
                   PointBox[{1, 5, 2, 3, 4}]}}], ImageSize -> 37], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`FormattingLayers`opart, 
                   NeuralNetworks`Private`FormattingLayers`part, 
                   NeuralNetworks`Private`FormattingLayers`selection = Null}, 
                  
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    GridBox[{{
                    ItemBox[
                    StyleBox["Parameters", Bold]], 
                    ItemBox[""]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Generator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Generator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Generator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Generator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Generator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "8", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem"], 
                    Annotation[#, {"Parameters", "Generator"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Discriminator\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"Discriminator\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Discriminator"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Discriminator\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Discriminator"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "9", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], "SummaryItem"], 
                    Annotation[#, {"Parameters", "Discriminator"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Loss\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Loss\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Loss"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Loss\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Loss"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"JensenShannon\"", "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Input Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Sample\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Sample\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Sample"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Sample\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Sample"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"Latent\"", FrameStyle -> GrayLevel[0, 0], FrameMargins -> 
                    0, ContentPadding -> False, BaselinePosition -> 0, 
                    StripOnInput -> False], True -> 
                    FrameBox["\"Latent\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"Latent"}, InputForm]], Method -> "Preemptive", 
                    PassEventsDown -> Automatic, PassEventsUp -> True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"Latent\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"Latent"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                    ItemBox[
                    StyleBox["Output Ports", Bold], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]], 
                    ItemBox[
                    StyleBox[
                    
                    GraphicsBox[{}, ImageSize -> {1, 11}, 
                    BaselinePosition -> (Scaled[0.] -> Baseline)], 
                    "CacheGraphics" -> False], 
                    Frame -> {{False, False}, {False, True}}, FrameStyle -> 
                    GrayLevel[0.85]]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossReal\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossReal\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossReal"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossReal\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossReal"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"LossFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"LossFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"LossFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"LossFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"LossFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox["\"real\"", "SummaryItem"]}, {
                    StyleBox[
                    TemplateBox[{
                    TagBox[
                    TooltipBox[
                    TagBox[
                    
                    PaneSelectorBox[{
                    False -> FrameBox[
                    "\"GeneratedFake\"", FrameStyle -> GrayLevel[0, 0], 
                    FrameMargins -> 0, ContentPadding -> False, 
                    BaselinePosition -> 0, StripOnInput -> False], True -> 
                    FrameBox["\"GeneratedFake\"", Background -> 
                    RGBColor[0.9098039215686274, 0.9529411764705882, 1.], 
                    FrameStyle -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.], 
                    RoundingRadius -> 3, FrameMargins -> 0, ContentPadding -> 
                    False, BaselinePosition -> 0, StripOnInput -> False]}, 
                    Dynamic[
                    CurrentValue["MouseOver"]], FrameMargins -> 0, 
                    ContentPadding -> False, BaselinePosition -> 0, ImageSize -> 
                    Automatic, FrameMargins -> 0], 
                    EventHandlerTag[{"MouseClicked" :> CopyToClipboard[
                    ToString[{"GeneratedFake"}, InputForm]], Method -> 
                    "Preemptive", PassEventsDown -> Automatic, PassEventsUp -> 
                    True}]], 
                    TagBox[
                    GridBox[{{
                    GraphicsBox[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    NCache[
                    Rational[2, 45], 0.044444444444444446`]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2,
                     0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    StyleBox["\"path: \"", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], StripOnInput -> False], 
                    RowBox[{"{", "\"GeneratedFake\"", "}"}]}}, 
                    GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Center}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {
                    "Columns" -> {{0.2}}, "Rows" -> {{Automatic}}}], "Grid"], 
                    TooltipStyle -> {
                    Background -> RGBColor[
                    0.9098039215686274, 0.9529411764705882, 1.]}], 
                    Annotation[#, 
                    Grid[{{
                    Graphics[{
                    FaceForm[
                    RGBColor[
                    0.9607843137254902, 0.9607843137254902, 
                    0.9607843137254902]], 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843], 
                    Thickness[
                    Rational[2, 45]], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}}, {{{10.5, 18.75}, {10.5, 
                    18.}, {9., 18.}, {9., 15.75}, {13.5, 15.75}, {13.5, 
                    18.}, {12., 18.}, {12., 18.75}}, {{6., 18.}, {6., 4.5}, {
                    16.5, 4.5}, {16.5, 18.}, {14.25, 18.}, {14.25, 17.25}, {
                    15.75, 17.25}, {15.75, 5.25}, {6.75, 5.25}, {6.75, 
                    17.25}, {8.25, 17.25}, {8.25, 18.}}, {{9.75, 17.25}, {
                    12.75, 17.25}, {12.75, 16.5}, {9.75, 16.5}}}], 
                    
                    FilledCurve[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                    0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 
                    0}}, {{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{8.25, 
                    14.25}, {14.25, 14.25}, {14.25, 13.5}, {8.25, 13.5}}, {{
                    8.25, 12.}, {14.25, 12.}, {14.25, 11.25}, {8.25, 
                    11.25}}, {{8.25, 9.75}, {14.25, 9.75}, {14.25, 9.}, {8.25,
                     9.}}, {{8.25, 7.5}, {14.25, 7.5}, {14.25, 6.75}, {8.25, 
                    6.75}}}]}, ImageSize -> 11], 
                    Style["path: ", 
                    RGBColor[
                    0.5372549019607843, 0.5372549019607843, 
                    0.5372549019607843]], {"GeneratedFake"}}}, 
                    Alignment -> {Left, Center}, 
                    Spacings -> {0.2, Automatic}], "Tooltip"]& ], "\":\""}, 
                    "RowDefault"], "SummaryItemAnnotation"], 
                    StyleBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`FormattingLayers`part = 
                    MouseAnnotation[]], 
                    If[NeuralNetworks`Private`FormattingLayers`opart === 
                    NeuralNetworks`Private`FormattingLayers`part, 
                    NeuralNetworks`Private`FormattingLayers`selection = Null; 
                    NeuralNetworks`Private`FormattingLayers`opart = Null, 
                    NeuralNetworks`Private`FormattingLayers`selection = 
                    NeuralNetworks`Private`FormattingLayers`part; 
                    NeuralNetworks`Private`FormattingLayers`opart = 
                    NeuralNetworks`Private`FormattingLayers`part; Null]; 
                    Null], Method -> "Preemptive", PassEventsDown -> 
                    Automatic, PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterLayer[
                    Lookup[
                    
                    Association[{"Parameters", "Generator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray["generator1/add eos/sos latent/1/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray["generator1/add eos/sos latent/3/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[719394511]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[719394511], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[2142256776]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2142256776]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1675479172]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1675479172], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1843149663]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "SequenceMost", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1843149663], "$Shape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1236890836]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association["Weights" -> 
                    NetSharedArray["generator1/classify/Net/Weights"], 
                    "Biases" -> NetSharedArray[
                    "generator1/classify/Net/Biases"]], "Parameters" -> 
                    Association["OutputDimensions" -> {26}, "$OutputSize" -> 
                    26, "$InputSize" -> 64, "$InputDimensions" -> {64}], 
                    "Inputs" -> Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]]], 
                    "$SequenceLength" -> NeuralNetworks`LengthVar[1236890836],
                     "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association["Type" -> "Array", "Arrays" -> 
                    Association["Array" -> 
                    NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> Association[
                    "Dimensions" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$ArrayDimensions" -> {28}], 
                    "Inputs" -> Association[], "Outputs" -> 
                    Association["Output" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association["Type" -> "Padding", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Specification" -> {{0, 0}, {0, 2}}, 
                    "Padding" -> 0., "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Prepend", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["$Length" -> 
                    NeuralNetworks`LengthVar[1236890836], "$Shape" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$OutputLength" -> NeuralNetworks`LengthVar[1239356242]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association["Type" -> "Append", "Arrays" -> Association[],
                     "Parameters" -> Association[
                    "$Length" -> NeuralNetworks`LengthVar[1239356242], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> Association[
                    "Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], {"Parameters", "Discriminator"} -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Threading", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 28, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}]], "Parameters" -> 
                    Association["OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{128, 64, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association["OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{192, 128, 5}], 
                    "Biases" -> NeuralNetworks`Private`DummyArray[{192}]], 
                    "Parameters" -> Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association["Weights" -> 
                    NeuralNetworks`Private`DummyArray[{1, 192, 5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{1}]], "Parameters" -> 
                    Association["OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2083339941]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association["Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association["Type" -> "Elementwise", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["Function" -> 
                    NeuralNetworks`ValidatedParameter[If[# > 0, #, 0.2 #]& ], 
                    "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association["Type" -> "Dropout", "Arrays" -> 
                    Association[], "Parameters" -> 
                    Association["DropoutProbability" -> 0.5, "Method" -> 
                    "Dropout", "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]], "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    LogisticSigmoid], "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    Key[NeuralNetworks`Private`FormattingLayers`selection], 
                    Null], NeuralNetworks`Private`FormattingLayers`part, 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0.}], "generator1/add eos/sos latent/3/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0.}], 
                    "generator1/conv.1/1/Weights" -> CompressedData["
1:eJwUl3c8198XgI3I3oqEREgJieJzz1sqpaQS5dsUStqDJKnM7L03kVlRInzu
eadIIQpFMoqiktLQJP36/XHu694/z32d8TxqTsc2u/Dx8PC4Cf07NjueNj95
0vGMreD/H/scDxsuPsz/77r8X8z+FwL/4vq6dkytAJCVkqFn/8SZlM87w1n0
3pqVlTMEY08Tdvx6BHiZBAG3qJMsuvCS7NRIwGUbPTBB4CFIlv/FBQ4PMPW8
FmdUUJ/EZV3BHfGpULSjHrd3BkLuhx2YL3GJZLWNmi7w/kGDB9dih14IfD/c
afo6rQSe+vUSY+ddcK/vFilp7IW44legebUfjPeJwX37cOy5AIxlpyw9ZNRp
cn+nJdad0yb+ZBQSR9ZismIX/i22xKgYBq691mS+nuNnw8ybqfsvTxxlZFnn
aSmckiELvOigzEi+VyK+EaqcI9bZGNecQtK3b8RbJROkxIMLE7F+ELv4M3na
40MmfDnMj9tF0FfPwQzlZvC4sBccnGvIE+H/MDJKmj1vLsTWJPjjuksijK4B
D1PppQEcFdkarQVCWO8qB3uPpsOFX/vpb0dzPKB5hkZ5FIDzLjcYvCnC7DEp
IodejdKV04QZSyNTGMttoIEpWuDfnUdini+C6lJVvDK1CquPUDotxQrF7RLg
YEMlbs1upq+3+aJsaRBRPDeb8ehbCJ93ibFV/B/hXe98jkwWF2GtGC7xU2Tl
PLo4Lb0nOV47TZmNWzaC8Oma6uFPfoRv9A+kKCXDF7YVmi5f+fc/lvRkymbu
XZkmvMhVobLntLmz0pfD08/S2KDUh6dbLmDOc2XmyMxeeFSThfsF59JV2/vw
815JuO/jSM++WQcv+16h8itD9nv0CCwYPkuGk6LAwiUEVVfc4AxYh6NNfiYx
XWEOZJ4N3A01YufFxeGC4hyY5TlF7W7Woh9PPBF/pQc/bLSxSlUA1G+qw9rT
ITD4Kw8Pdemg1HNzXBAcR394fMJPtB2o4H56r+QahI1nQ+AsNzg0SqD8mQ2r
ImmKZuMX0cH8F+0SVmQH7BJolOpzrLKRYHSX+aKO6Bb6dukK9Hl0lxj9DIGK
H/dI6VdjupNvH7m76QAu03WjncbirJqaDoa0zYe33gZ47+k9usM+GcxCU2kn
zzbizycPWj+uEt7ey2RXWRYnLaaSiJdtMvUo4kLpGz0s25aGz2ZeBhg4bHox
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
DQjvo1/vT4OzbbkwkLkBQmrukeMN/mjjLcA89/pt8tRsyjsspVn+SDE207sL
NVUi2KaJbhq+bwl+1YiDV7knmOf28dRRTZGV3l8NE9p27Lv96+GIv2kVtu5E
5tk7+FF2CX8pCrDuMX4oHKQLoyrSJj+u74P2x/9ho89j/Db9Fiz7NAgVUv+4
nc2jdO3FMMJzJQLdJjQYj1V1pCH8CG36Pp15plHLuSPzj7Knv8EmtzDOg+ar
8OafMlpYqbHjvO9NJvRDQfbnA5J21J/YWMoyc1x44cJFWzAyy4IzfzspuqmT
T2dzIF28l352WsuY7jhCsSQIfB5dAIGaNVWn993mei+TRIHfcnAi9wo2S+rT
+R1N4B4pCLVMHu0ytYZR3yjobTFjOqT0YJouMSmyvYYbfpVh9fNHuORaDBI5
BVh6bhPzzGohldB9ji1P7DBww2+yum4m+/ebGw7ea4WZF57D52+Uy4iosNKT
Q8RxEZBFAYdh1yYJvP5fSVUANxYTF+fC8aSV0NLgD7fdZdg7T2bAhtlaqPP1
PWrP/EzjjtxEOhxMSgTF6MdXaRzBwEQo5vHE7o5D7LPg9xR5N8DxvIVY9VcT
enlvwF3HbGqrkIa8Po74yVyAfbV0Ojuy8C3+QSNYet+DzljSTDo6Z+FHLiK7
5hbXRucmVk+xr5vmDGJ2by6sKeaHS9kV8PxqA545ORcrS4PJzfx3sOjJBup0
YDkuG6qn+4wIfi1Tp79i7mOntjLOeDcfzQRPVcq3tHD0Q4eg9FUBLIwZRksB
ZfizqpmU+7TAkxgl/OxbgU/2xoDd2h6sDGuEC3cq8ehAHO6JUcabzBSTrl1I
66US4ZnMED7wCSdtz4shLGEVNH/5CGf4FWHo+nXIr32N+Q+a4W+TOJN7p42M
fW2EKpNoXPSrmESoGIIy/2fUifcBrR0z2YC13jiSL8D02m8ieZXqjPjWS7g7
pYZQmwPoZ2uDcmwK9VrqCWGcFDx8VA2TXDJh7FkGLrpqC5/KwyEuUB19fl7D
YuFt+PieF1pPn42PrNLJVdFdwBdjAtoHO7hqi6rAcQ0HEucKMk9qfLB0509y
5/ZMKIufiQMv/TnntWIxYpEWW/U7l2OxvxNOj1zCRdsn8NuZEMS6btL9RxBV
o6OplvNnWshYwdBHVbb8QRj86x/H4AAuHnl/BHssJJjNF4/imPNWMIiuQeMA
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
                    "], 
                    "generator1/conv.1/1/Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}], 
                    "generator1/conv.2/1/Weights" -> CompressedData["
1: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
UOEgePxYC8vy82G68Fca02OLr83+kqkVB0FmwSANDttExHwSiCI14K19M0Lb
Hmrj5pW2dHvkX9y3ZzPstTdEGuKD9Wnv0XDZTXTSdyH7HlpAid1pWM4AJugi
BMpIQZfnkEFOeSlcuDUdtV62cxWqnlHR1w0Gmmv3YvDoGkSJEriT7gCiadnM
r9/mVFRrPUnQ5wP27gk6ZHQRJX4exj+rf1P9QzHw5JQWlreks1G6U2Dzl1X4
60EBpHS0oK2+KC+5/iCT+u8h/r78jDy9IUIlm2aRfdaL0SDaEkxdBamPSz5s
n6ZN7Zdsp0o/oojthtOQzL8WX63WYT9kfaUaAbOZuhQ3uCV8GNttL9GQB7Nx
/kAVu2SjJDyt5COXdOwg0p6SmNhMOiPtI03MG8N48RRsFl0Ks7/KQrOvAlj0
zafz+r6j4Vce+dTwEWH8I016wYdsWjVuEvmNgflhTLvJP+qfkQs9JZ+ptv1+
+m+XDNCGcPL5bhFkWZSTj2tnQ5biO1h6nIeewlLg1j6ED3q+U4uQGpIUu82g
N+0iqB8aIaMOWfT082l4tnmQji9ugtLE13TZosv00tdlMGzCpSsmstD+RCIU
fQtHt7sdJMbJnkx8SaOvb49A1v5EWKwmTO8siKJ8H0pIWHwVGOmVoNDXc6C4
bhk1PC8H2vsH0DWyDiRiG9Dl4Vxkc9PZKTr64PlOGmwOFLDkQQqNTf1AFDYd
g9o5kixxNMJK8RcMOyZk+P3jKTTn3iHhFZL0+TVfPDjZ9h+Mz6OX01IISzwN
cqHn0V5jHJrKbxM1coweGP3N5J8SA3eXevC5rcjsKdJho9qyifiyato5vgSV
m8vJjWhl1BnVxp59M8Blph6xNDnFZrnzOD8F1mDW6SK8LqiH5YaNsF7MEI3v
xLB3L0ZCmn837HKdhiI3wsiUXTyM2X6X6d0ljH4qNjg31hhsl+swqQZyNOhV
Amj0uXID9e1w+5w17KthdUPfs8poccQfi6/zo3mOJvQZZYK2/TOmFDaA1K07
ZNzxCD0qnEz7Vw/QO80LwEWkgWaeTSd3RbagVcUpsv4HH6zd7oBoo8J2KUbQ
ysudhN8lAbVUC7kZI3yG7VZWcL76D+zKFQQV4XJa1LCBLDptDQGdy3BYfz48
LPOm28eSYWi9NNV314Zzqy+ArhZLrBskcUJZH80dzEDHYCee55cgv3QWG0a+
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
+ghSjmdYodXqdLUkA7eKHIGnwFKftavxf7wT9WM=
                    "], 
                    "generator1/conv.2/1/Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}], 
                    "generator1/conv.3/1/Weights" -> CompressedData["
1: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
+/4mcskuHZUThkh9xBd8dkmDkZx9Atw31KOJcSu5u+4Y6ZsYxM4ge+hfGgUN
RZNgIoJUKGUp5hseQj0fZ9QQieY6wmq8VjmdWLVl/us4INlfHrEqYuXUOWoR
lE1uA7lxDXJkWSncOiDE4TscRpbShcyHWWbQ/egVSp9QQ4XVM8mhketw9ABB
zRsHiXdwAEQsk8Ll5cbw8bUdVoR64/KLxTjvvhh+W6yP8svNicI3c1g2fQYW
feumjsm5KJ+ghzKgB0ff/KYjx5tZ78B4vNkQgglB+rRT/zzt9E9krVWlcUxI
ikx/vgiueUlj2uVh9oCDGKp2+wHvoT93YZY25s9dAGsORkNLLj80SGfg7vLb
9JlmH7VnDcmKezFw5KAs1YVg8upPIndFbwB4r9yBBQHJNOtnEmYbKsBcV0U4
DdF499V9Yj/XFh2u5NEvLde50yvkqdTh09Cb0E8MH+iS5/+ysH1NGJmod6Ed
5rq0VfE9DZgbir/O7cDxG/6sdY8EfeR3EyTqRThMPEMe/FkKDktZOulozTNs
moonM7dQteWA1o82YkM9wuCvaLwmEwken06jimEP9qqtIfLdwrjR6ilV0fvB
qOtfos/PmJMtb4cZq02ecDVekbydxyXH3FRB79F32mAZSyYsgjCs7zZO7BHg
5QlnYIlSLbVIzKYzSrkoYdoEw63WOBp0HO5sDcTAZj7OD3YqXB32geajqRCm
VsqajW4EW5k35PcFdTyUWUifrSpj3njfRFR/SyTL38GCp1q4qs4V1HJUUDxf
AepbM+h841Fm2mwRLndSA5LrL2PhgAbaHKPUEQdZs7zLtCVeGQ5vSaZ7Hf4j
Z9ffN+WfcEDhz5twG7ZSUdGD+Momgl57ZIjjgUXoYhtGLY5nQsjxE6RcVhxv
HYsg7085wBgX8dO7ALI2OB426Z2Ep7cp03OJYor5GuB9HmAFypNJkFs5JOa8
Yzcme0L4H0n0fSpIM86bU3GhUrR2/4EHcqyRIzUDxt1uYctJcRp19x4TFJlG
sq5sRLXGy+xBOQmc4rkI68WU8XebHu7TZwmbsJTg1ygwNFSBVqtIeHT+NbH8
n4Lzfujx/eJwi4ZSoaUUSrQkqfR+7vMulBVKw6okkVAkoyQa2gPtPVS0Ew3q
uU+lRZRSSKRCUciI6IP4+v4N55zX67p+OQVF9Kh6J+R0cSF3pSK5df8ObIgr
Bt25InRTeA/Yvegjo2kBzJM0XjoorACYnoLMLjs87LmTyk7toLt1pECWGwiL
FOrJ01OVNOuQDjuPtSLZr3JoTk0dHvuZDrtP6lLh5ysJ/7bzINGRxD5YWECk
yHdOF7saB4+VsqhhRrXJUTz35DSs6NkAcqVFUPuVhzM3vBBFVepBUFAC1hco
Y9reLrztJgGzlyQyv09rEP7PKzH1cynubzOnE7t/MMVXL5KVns4AvA/Yq7Ln
iI73G7orIxiEF5iStwX/HPXlJJE5LwN8S+bjtq+KVDgsFD26hdB5dyO0ZeXi
lSEHqHJoxx12xSRifgbdoroAzPRE4Y1YN7EOS2GYJ2P0oIUmvDHbzT71mcfq
n4g01HhvgUN5tfSm1AVcIfOTnVOmjk/vakLeRpaukz8M4vmm4N+uhl61+/GG
7ysyXhINRHsNPThwnT5Xv8A0Pf9EWZ8JeGlQSrRCZ4JSbAXdy1tCBbXT0XpJ
MG26YgsuyrkgJS2Nbed1SGrRKCWL11H++dnoPTgN1x+bDsPNyThndQhefaVJ
YrpXgGPxXRSr+EKLrK7jJZVU1Bhfgl8Ez5P5NY9h26FOsOyaU1tgYgK5ez5z
rs93osdnBrHLVbmYUngc3Hzuw992ASjRzWPYDzzwTZeXe/RrO64TngHJSToo
vdQf3maEQH/MWdzSJ8n+t6qcfNZuR6czkpD11AFEVz3BImwnp7zXwvlDlBS/
esB0tJvBCuNFpCDLBT14DOnzPB4YfZlBZeNi4eVKF7z6MpG9uZ3Lnl3jTyRD
N2H6vP3QXb8ZLFyWsVKe7+D7Ux4our0P4mSuQ5ZUGbavnCKiKZ9Bx62S6fym
T3TXhdYsHQiF9rGN2K5vQI6t64A/bzdTk+unML3YGMfn8kBqwilSsTQF3xzi
pctTYlkNpf30w2Qwe33OTKzmdpAzco1E3HUKZ6yQhmcbzKFTfTk9ruWPq2pC
QaAom0hlToLnY5YcSPoJ5SLVKDH9ECTVGwHx2cLVfrIOZnysZCROLIeW/iw8
ZnMR6k+vo9+HK1jTmCxYtlMOp023YmdlSuKhCzO5zlHpsPn6c1hOvhKT7f3s
mV+iRHV3GZ11bgUkx9Zgkqw7zPiPwqxvAcxQ8ShVRhOqnn+VmEtH4GKXcvqf
Xxa8vm+BMjxq5P57DXZy3ir4fMIMT3QJ0jOhlWzeiB2u7tFhmDBHkJONwls8
FfTk8XxyaLEfftltRezda8FGWos5Pt0dfixrwlpVPUalZBiErtXT3hEduPl8
I5k8rw1ivF9oz4zj9J7oO+jK5YOiu53U+oseCtjNx/8ivUi0Zytl1BZw2XIu
ZMhtBKED42R75HTQOv2HDgYGoWWTJvK/tMORAEM4tEWD21x6BtWOKTBrDbrY
BffywWUwlvxcthA3rfAiDuOu2F4fiS2P7+B/BvvQA5Lpf3qJ6DTSSw6rjFHO
227UFn9Kc+IoHj7pwJ6fMUVTBik9oJXH6txg8edZhlr4viNNDxbifgcTWPbh
H/MuVmNXFESjQpk/PfzuEracz4JHOv012SV+5ENpNvOmbgNmSPXj3vF3RK8m
g/z9VY0uCtqgLXQUvvHx1O41vgg+M7Po3gik/TcriZ3xFtAul2PaFFayF40Q
Z5hfJyv2fsXELSHQdHk9Ize9huTfCYKO0w647vNVsjA5FYVGdoDOjUDgtfxK
c3vnQJ4lH3dx5BaIb/9GxSovocorJZCYJlqbe2oVTJ2PoRoZ/rBxRii9Nf8M
fJqRglQpmu7+AhD2VBIuemai5s9cPDtTAnR5Wsi5umv06YXpmPPJAkztYsjB
L+M0UDuO6OmH4S7dfmYiUopZrCuFmeVyNCcpDCScjxBt4lPzTaiDHBn8TBpP
VGBY0jrknrsPLr+/w1Ge2+AQEIvRqavQV4ivVutDNigV1pOBTyM1MUHCtR+Z
YzBefBA+LbwG7tapoLG8H03HxljrhaGoF99P9SaWoLvgA/bisougmrcE+VWO
4k6ne8zVw2O4N0ETwjOtYF9yFJ7ZB2B7d4KdMIunbSl55I+qNjjfEKYS5h/I
X/4BPGl4k2rxieNlyyComm6D05aqkJ8FPFSOY8BsN8gHlavj9FRnKex6EQOF
7VuJ4Zy/7NGxx1Sk1R82HZTErWp2xMTnJ8i+kqwt8RFjWpYHgnNvFji9LKOK
R1ZBxZuVcOFiP5z3t2b4Nz2FvVW2EP0S6X31Ifarzj+61+CC0Z4gKnq7jYwW
XeOUNa2Hxo2Lkf5wpQ2X31IZa4Y+SjTDI3VjGOj4CgVWvqz2DZLH9wfriJyM
D/7Q1WKu1Nnigx8/8MIfe7JNpYcq6dlAyhpdsm/c3vDv9oP0ULsxRUGGDKR9
opOKKphyEHGlhTOcOfMI1iX6Y8PlbDTv78GST6fYtyKJGGAoBRnboqj85Bx8
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
EP8Hd5wC/A==
                    "], "generator1/conv.3/1/Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.}], 
                    "generator1/classify/Net/Weights" -> CompressedData["
1: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
/g9FX6Wv
                    "], "generator1/classify/Net/Biases" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0.}], "generator1/add eos/sos onehot proba/2/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 1., 0.}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    RawArray["Real32",{0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
                     0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 
                    0., 0., 0., 1.}]], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    180., {79.672119140625, 85.327880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`FormattingLayers`selection}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetGANOperator[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{{3.803392212489758*^9, 3.803392295684169*^9}},
 CellLabel->
  "Out[3348]=",ExpressionUUID->"b9d6cdfe-ad3b-4cf5-a6ed-e73093948cc5"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"m", ",", "\"\<Generator\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803392298550558*^9, 3.803392308381301*^9}},
 CellLabel->
  "In[3349]:=",ExpressionUUID->"2526d9e4-0462-46f5-bc49-80786ea10442"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = False}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"]], 
                ButtonFunction :> (Typeset`open = True), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, BaselinePosition -> {1, 3}],
           True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"]], 
                ButtonFunction :> (Typeset`open = False), Appearance -> None, 
                Evaluator -> Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[719394511]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[719394511], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2142256776]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2142256776]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1675479172]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1675479172], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1843149663]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1843149663], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1236890836]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator1/classify/Net/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1236890836], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 2}}, "Padding" -> 0., 
                    "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1236890836], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1239356242]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1239356242], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos latent\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"remove eos/sos prediction\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"squash\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos onehot proba\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/conv.1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 28, 5}], 
                    "generator1/conv.1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/conv.2/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 5}], 
                    "generator1/conv.2/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/conv.3/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 5}], 
                    "generator1/conv.3/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/classify/Net/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{26, 64}], 
                    "generator1/classify/Net/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{26}], 
                    "generator1/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridFrameMargins -> {{0, 0}, {0, 0}}, 
            BaselinePosition -> {1, 1}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], BaselinePosition -> 
        Baseline, 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803392311872101*^9},
 CellLabel->
  "Out[3349]=",ExpressionUUID->"8f2c4dc4-cb44-4d7d-9804-709d0191c054"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"n", "@", 
  RowBox[{"sampleGeneration", "[", 
   RowBox[{"1", ",", "normalizedEnglishNames"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803392313585887*^9, 3.803392321680121*^9}},
 CellLabel->
  "In[3350]:=",ExpressionUUID->"528553ef-1f2c-4731-b397-ec1ec8bf5fa9"],

Cell[BoxData[
 TemplateBox[{
  "NetChain", "netimpconst", 
   "\"The net contains a set of constraints among sequence lengths that is \
impossible to satisfy for any input.\"", 2, 3350, 429, 26207717223377046194, 
   "Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellChangeTimes->{3.803392321966851*^9},
 CellLabel->
  "During evaluation of \
In[3350]:=",ExpressionUUID->"7e052967-8233-4764-8b1d-7f0d103bf4c8"],

Cell[BoxData["$Failed"], "Output",
 CellChangeTimes->{3.8033923220553627`*^9},
 CellLabel->
  "Out[3350]=",ExpressionUUID->"f352ea96-567f-4374-ad5d-cae5ad1475f8"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", " ", "=", " ", 
  RowBox[{"NetExtract", "[", 
   RowBox[{"m", ",", "\"\<Discriminator\>\""}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803392362323913*^9, 3.80339237052102*^9}},
 CellLabel->
  "In[3351]:=",ExpressionUUID->"89972295-73d9-46c2-86e2-15cc505c9de3"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox["\"real\"", "SummaryItem"]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "keep max only" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Max, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Threading", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# >= #2 - 1.*^-7, #, 0]& ], "Broadcasting" -> 
                    NeuralNetworks`ValidatedParameter[-1]], "Inputs" -> 
                    Association["Input1" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Input2" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310]}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input1"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input2"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{64, 28, 
                    5}], "Biases" -> NeuralNetworks`Private`DummyArray[{64}]],
                     "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[4294967310]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1910525100], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{128, 64, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{128}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 128, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1910525100]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[700503721], 128}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1910525100], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{192, 128, 
                    5}], "Biases" -> 
                    NeuralNetworks`Private`DummyArray[{192}]], "Parameters" -> 
                    Association[
                    "OutputChannels" -> 192, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 128, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[700503721]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, 
                    "$WeightsInputChannels" -> 128], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1880123731], 192}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[700503721], 128}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]]], "PatchConv" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 192, 
                    5}], "Biases" -> NeuralNetworks`Private`DummyArray[{1}]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 1, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 192, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1880123731]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[2083339941]}, 
                    "$WeightsInputChannels" -> 192], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[2083339941], 1}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1880123731], 192}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]]], "aggregate" -> 
                    Association[
                    "Type" -> "Aggregation", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> Mean, "Levels" -> 
                    NeuralNetworks`ValidatedParameter[1]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2083339941], 1}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "dropout" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]]], 
                    "classify" -> 
                    Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NeuralNetworks`Private`DummyArray[{1, 1}], 
                    "Biases" -> None], "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {}, "$OutputSize" -> 1, 
                    "$InputSize" -> 1, "$InputDimensions" -> {1}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{1}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                    "logit" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> 
                    NeuralNetworks`ValidatedParameter[LogisticSigmoid], 
                    "$Dimensions" -> {}], "Inputs" -> 
                    Association[
                    "Input" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "keep max only", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "PatchConv", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "aggregate", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "dropout", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "logit", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> 
                    NeuralNetworks`TensorT[{}, NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart, 
                   NeuralNetworks`Private`NetChain`part, 
                   NeuralNetworks`Private`NetChain`selected = Null}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"keep max only\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "keep max only"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]128\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]192\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"PatchConv\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], "\"\[Times]1\[VeryThinSpace])\""},
                     "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "PatchConv"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"aggregate\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["AggregationLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "aggregate"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"dropout\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["DropoutLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"vector\"", 
                    StyleBox[
                    "\"(\[VeryThinSpace]size: 1\[VeryThinSpace])\"", 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "dropout"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LinearLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"logit\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["LogisticSigmoid", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", Annotation[#, {"Nodes", "logit"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"real\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    287., {72.172119140625, 77.827880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803392371543002*^9},
 CellLabel->
  "Out[3351]=",ExpressionUUID->"54182438-d222-48d1-a881-adf97f201ff2"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"d", "@", 
  RowBox[{"sampleGeneration", "[", 
   RowBox[{"10", ",", "normalizedSpanishNames"}], "]"}]}]], "Input",
 CellChangeTimes->{{3.803392376792152*^9, 3.8033923931352777`*^9}, {
  3.803392634182775*^9, 3.803392638824995*^9}},
 CellLabel->
  "In[3355]:=",ExpressionUUID->"fcda5b11-7375-4e08-be79-d5df1e836282"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0.5`", ",", "0.5`", ",", "0.5`", ",", "0.5`", ",", "0.5`", ",", "0.5`", 
   ",", "0.5`", ",", "0.5`", ",", "0.5`", ",", "0.5`"}], "}"}]], "Output",
 CellChangeTimes->{
  3.803392394205818*^9, {3.803392636341971*^9, 3.803392639324994*^9}},
 CellLabel->
  "Out[3355]=",ExpressionUUID->"9a2208ce-f6a7-4282-93e8-89256666f53f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData["n"], "Input",
 CellChangeTimes->{{3.803392409865828*^9, 3.80339241111889*^9}},
 CellLabel->
  "In[3353]:=",ExpressionUUID->"89b74da6-0531-42d9-988b-f95377e217ff"],

Cell[BoxData[
 TagBox[
  TemplateBox[{
    RowBox[{
      StyleBox[
       TagBox["NetChain", "SummaryHead"], "NonInterpretableSummary"], 
      StyleBox["[", "NonInterpretableSummary"], 
      DynamicModuleBox[{Typeset`open = True}, 
       PanelBox[
        PaneSelectorBox[{False -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquarePlusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = True), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Input\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}, {
                 StyleBox[
                  TemplateBox[{
                    TemplateBox[{"\[ThinSpace]", "\" \"", 
                    StyleBox["\"Output\"", 
                    GrayLevel[0], StripOnInput -> False], "\"port\""}, 
                    "RowWithSeparators"], "\":\""}, "RowDefault"], 
                  "SummaryItemAnnotation"], 
                 StyleBox[
                  TagBox[
                   TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], Short], "SummaryItem"]}}, 
               BaselinePosition -> Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 3}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}], True -> GridBox[{{
              PaneBox[
               ButtonBox[
                DynamicBox[
                 FEPrivate`FrontEndResource[
                 "FEBitmaps", "SquareMinusIconMedium"], 
                 ImageSizeCache -> {12., {0., 12.}}], Appearance -> None, 
                ButtonFunction :> (Typeset`open = False), Evaluator -> 
                Automatic, Method -> "Preemptive"], 
               Alignment -> {Center, Center}, ImageSize -> {Automatic, 24}], 
              StyleBox[
               GraphicsBox[{
                 Thickness[0.014925373134328358`], {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{23., 91.5}, {30., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  RGBColor[0.729, 0.729, 0.729], 
                  Thickness[0.018686567164179105`], 
                  Opacity[1.], 
                  JoinForm[{"Miter", 10.}], 
                  
                  JoinedCurveBox[{{{0, 2, 0}}}, {{{37., 91.5}, {44., 91.5}}}, 
                   CurveClosed -> {0}]}, {
                  FaceForm[{
                    RGBColor[0.631, 0.8160000000000001, 0.498], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{15.5,
                    103.5}, {23.5, 103.5}, {23.5, 79.5}, {15.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.40800000000000003`, 0.627, 0.196], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{24., 104.}, {15., 104.}, {
                   15., 79.}, {24., 79.}}, {{23., 80.}, {16., 80.}, {16., 
                   103.}, {23., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.38, 0.753, 0.89], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{29.5,
                    103.5}, {37.5, 103.5}, {37.5, 79.5}, {29.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.24300000000000002`, 0.608, 0.71], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{38., 104.}, {29., 104.}, {
                   29., 79.}, {38., 79.}}, {{37., 80.}, {30., 80.}, {30., 
                   103.}, {37., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.584, 0.51, 0.8390000000000001], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{43.5,
                    103.5}, {51.5, 103.5}, {51.5, 79.5}, {43.5, 79.5}}}]}, {
                  FaceForm[{
                    RGBColor[0.4, 0.396, 0.659], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}}, {{0, 2, 
                   0}, {0, 1, 0}, {0, 1, 0}}}, {{{52., 104.}, {43., 104.}, {
                   43., 79.}, {52., 79.}}, {{51., 80.}, {44., 80.}, {44., 
                   103.}, {51., 103.}}}]}, {
                  FaceForm[{
                    RGBColor[0.549, 0.549, 0.549], 
                    Opacity[1.]}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{28., 91.5}, {
                   25., 95.}, {25., 88.}}}], 
                  
                  FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}}}, {{{42., 91.5}, {
                   39., 95.}, {39., 88.}}}]}}, ImageMargins -> 0, 
                ImageSize -> {36, Automatic}, PlotRangePadding -> 0], 
               CacheGraphics -> False], 
              GridBox[{{
                 
                 DynamicModuleBox[{
                  NeuralNetworks`Private`NetChain`assoc3 = 
                   Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "add eos/sos latent" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/1/Array"]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos latent/3/Array"]], "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[4294967310], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[719394511]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[719394511], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[2142256776]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[719394511], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "4", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}], "conv.1" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.1/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.1/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 28, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[2142256776]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, 
                    "$WeightsInputChannels" -> 28], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1573517074], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[2142256776], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]]], "conv.2" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.2/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.2/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1573517074]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1749591935], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1573517074], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]]], "conv.3" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "Convolution", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/conv.3/1/Weights"], "Biases" -> 
                    NetSharedArray["generator1/conv.3/1/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputChannels" -> 64, "KernelSize" -> {5}, 
                    "Stride" -> {1}, "PaddingSize" -> {{2, 2}}, 
                    "Dilation" -> {1}, "ChannelGroups" -> 1, "Dimensionality" -> 
                    1, "Interleaving" -> True, "$InputChannels" -> 64, 
                    "$InputSize" -> {
                    NeuralNetworks`LengthVar[1749591935]}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1675479172]}, 
                    "$WeightsInputChannels" -> 64], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "Normalization", "Arrays" -> 
                    Association["Scaling" -> None, "Biases" -> None], 
                    "Parameters" -> 
                    Association[
                    "AggregationLevels" -> 
                    NeuralNetworks`ValidatedParameter[1], "ScalingLevels" -> 
                    NeuralNetworks`ValidatedParameter[{}], "Epsilon" -> 0.001,
                     "Unbiased" -> False, "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    "$StatsDimensions" -> {}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Elementwise", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Function" -> NeuralNetworks`ValidatedParameter[
                    If[# > 0, #, 0.2 #]& ], "$Dimensions" -> {
                    NeuralNetworks`LengthVar[1675479172], 64}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "4" -> 
                    Association[
                    "Type" -> "Dropout", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "DropoutProbability" -> 0.5, "Method" -> "Dropout", 
                    "OutputPorts" -> 
                    NeuralNetworks`ValidatedParameter[{"Output"}]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "4", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "4", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1749591935], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]]], "remove eos/sos prediction" -> 
                    Association[
                    "Type" -> "Chain", "Nodes" -> 
                    Association[
                    "1" -> Association[
                    "Type" -> "SequenceRest", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1675479172], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1843149663]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]]], "2" -> 
                    Association[
                    "Type" -> "SequenceMost", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1843149663], 
                    "$Shape" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1236890836]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1843149663], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "2", "Outputs", "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1675479172], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]]], "classify" -> 
                    Association[
                    "Type" -> "NetMap", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Net" -> Association[
                    "Type" -> "Linear", "Arrays" -> 
                    Association[
                    "Weights" -> NetSharedArray[
                    "generator1/classify/Net/Weights"], "Biases" -> 
                    NetSharedArray["generator1/classify/Net/Biases"]], 
                    "Parameters" -> 
                    Association[
                    "OutputDimensions" -> {26}, "$OutputSize" -> 26, 
                    "$InputSize" -> 64, "$InputDimensions" -> {64}], "Inputs" -> 
                    Association[
                    "Input" -> NeuralNetworks`TensorT[{64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{26}, 
                    NeuralNetworks`RealT]]], "$SequenceLength" -> 
                    NeuralNetworks`LengthVar[1236890836], "$InputShape" -> 
                    NeuralNetworks`TensorT[{64}, NeuralNetworks`RealT], 
                    "$OutputShape" -> 
                    NeuralNetworks`TensorT[{26}, NeuralNetworks`RealT]], 
                    "Inputs" -> Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 64}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "squash" -> 
                    Association[
                    "Type" -> "Softmax", "Arrays" -> Association[], 
                    "Parameters" -> Association["Level" -> -1], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]]], "add eos/sos onehot proba" -> 
                    Association[
                    "Type" -> "Graph", "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Nodes" -> 
                    Association[
                    "2" -> Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/2/Array"]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "4" -> 
                    Association[
                    "Type" -> "Array", "Arrays" -> 
                    Association[
                    "Array" -> NetSharedArray[
                    "generator1/add eos/sos onehot proba/4/Array"]], 
                    "Parameters" -> 
                    Association[
                    "Dimensions" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT], 
                    "$ArrayDimensions" -> {28}], "Inputs" -> Association[], 
                    "Outputs" -> 
                    Association[
                    "Output" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT]], "TrainingParameters" -> 
                    Association["LearningRateMultipliers" -> 0]], "1" -> 
                    Association[
                    "Type" -> "Padding", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "Specification" -> {{0, 0}, {0, 2}}, "Padding" -> 0., 
                    "$Rank" -> 2, "$InputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 26}, "$OutputSize" -> {
                    NeuralNetworks`LengthVar[1236890836], 28}], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 26}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT]]], "3" -> 
                    Association[
                    "Type" -> "Prepend", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1236890836], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[1239356242]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1236890836], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT]]], "5" -> 
                    Association[
                    "Type" -> "Append", "Arrays" -> Association[], 
                    "Parameters" -> 
                    Association[
                    "$Length" -> NeuralNetworks`LengthVar[1239356242], 
                    "$Shape" -> NeuralNetworks`TensorT[{28}, 
                    NeuralNetworks`RealT], "$OutputLength" -> 
                    NeuralNetworks`LengthVar[4294967310]], "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[1239356242], 28}, 
                    NeuralNetworks`RealT], "Element" -> 
                    NeuralNetworks`TensorT[{28}, NeuralNetworks`RealT]], 
                    "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath["Nodes", "1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "2", "Outputs", "Output"],
                     NeuralNetworks`NetPath[
                    "Nodes", "5", "Inputs", "Element"] -> 
                    NeuralNetworks`NetPath["Nodes", "4", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "1", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Nodes", "5", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Nodes", "3", "Outputs", "Output"],
                     NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "5", "Outputs", "Output"]}]], 
                    "Edges" -> {
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath["Inputs", "Input"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos latent", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.1", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.2", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "conv.3", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "remove eos/sos prediction", "Outputs", 
                    "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "classify", "Outputs", "Output"], 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Inputs", "Input"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "squash", "Outputs", "Output"], 
                    NeuralNetworks`NetPath["Outputs", "Output"] -> 
                    NeuralNetworks`NetPath[
                    "Nodes", "add eos/sos onehot proba", "Outputs", 
                    "Output"]}, "Inputs" -> 
                    Association["Input" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]], "Outputs" -> 
                    Association["Output" -> NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]]], 
                   NeuralNetworks`Private`NetChain`opart = {
                    "Outputs", "Output"}, 
                   NeuralNetworks`Private`NetChain`part = {
                    "Outputs", "Output"}, 
                   NeuralNetworks`Private`NetChain`selected = 
                   NeuralNetworks`TensorT[{
                    NeuralNetworks`LengthVar[4294967310], 28}, 
                    NeuralNetworks`RealT]}, 
                  DynamicBox[
                   GridBox[{{
                    TagBox[
                    TagBox[
                    GridBox[{{
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Input\"", 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Inputs", "Input"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos latent\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"1\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos latent"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.1\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"2\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.1"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.2\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"3\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.2"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"conv.3\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "4", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"4\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "conv.3"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"remove eos/sos prediction\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox[
                    TemplateBox[{"NetChain", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "2", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]64\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "remove eos/sos prediction"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"classify\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    RowBox[{
                    TagBox["NetMapOperator", HoldForm], "[", "LinearLayer", 
                    "]"}], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "classify"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"squash\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    StyleBox["SoftmaxLayer", 
                    GrayLevel[0], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox[
                    SubscriptBox["\"n\"", 
                    StyleBox["\"5\"", 7, StripOnInput -> False]], Italic, 
                    StripOnInput -> False], 
                    "\"\[Times]26\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "squash"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    StyleBox["\"add eos/sos onehot proba\"", 
                    GrayLevel[0.5], StripOnInput -> False], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{
                    StyleBox[
                    TemplateBox[{"NetGraph", "\" \"", 
                    
                    TemplateBox[{"\"(\"", "5", "\" nodes)\""}, "Row", 
                    DisplayFunction -> (RowBox[{
                    TemplateSlotSequence[1, "\[InvisibleSpace]"]}]& ), 
                    InterpretationFunction -> (RowBox[{"Row", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateSlotSequence[1, ","], "}"}], ",", 
                    RowBox[{"BaseStyle", "\[Rule]", 
                    InterpretationBox[
                    ButtonBox[
                    TooltipBox[
                    GraphicsBox[{{
                    GrayLevel[0], 
                    RectangleBox[{0, 0}]}, {
                    GrayLevel[0], 
                    RectangleBox[{1, -1}]}, {
                    GrayLevel[0.5], 
                    RectangleBox[{0, -1}, {2, 1}]}}, DefaultBaseStyle -> 
                    "ColorSwatchGraphics", AspectRatio -> 1, Frame -> True, 
                    FrameStyle -> GrayLevel[0.33333333333333337`], FrameTicks -> 
                    None, PlotRangePadding -> None, ImageSize -> 
                    Dynamic[{Automatic, 1.35 (CurrentValue["FontCapHeight"]/
                    AbsoluteCurrentValue[Magnification])}]], 
                    StyleBox[
                    RowBox[{"GrayLevel", "[", "0.5`", "]"}], NumberMarks -> 
                    False]], Appearance -> None, BaseStyle -> {}, 
                    BaselinePosition -> Baseline, DefaultBaseStyle -> {}, 
                    ButtonFunction :> With[{Typeset`box$ = EvaluationBox[]}, 
                    If[
                    Not[
                    AbsoluteCurrentValue["Deployed"]], 
                    SelectionMove[Typeset`box$, All, Expression]; 
                    FrontEnd`Private`$ColorSelectorInitialAlpha = 1; 
                    FrontEnd`Private`$ColorSelectorInitialColor = 
                    GrayLevel[0.5]; 
                    FrontEnd`Private`$ColorSelectorUseMakeBoxes = True; 
                    MathLink`CallFrontEnd[
                    FrontEnd`AttachCell[Typeset`box$, 
                    FrontEndResource["GrayLevelColorValueSelector"], {
                    0, {Left, Bottom}}, {Left, Top}, 
                    "ClosingActions" -> {"SelectionDeparture", 
                    "ParentChanged", "EvaluatorQuit"}]]]], BaseStyle -> 
                    Inherited, Evaluator -> Automatic, Method -> 
                    "Preemptive"], 
                    GrayLevel[0.5], Editable -> False, Selectable -> 
                    False]}]}], "]"}]& ), BaseStyle -> GrayLevel[0.5]]}, 
                    "RowDefault"], 
                    GrayLevel[0], StripOnInput -> False], 
                    "\" \[UpperRightArrow]\""}, "RowDefault"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Nodes", "add eos/sos onehot proba"}, 
                    "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}, {
                    TagBox[
                    TagBox[
                    "\"\"", Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    "\"Output\"", 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]], 
                    TagBox[
                    TagBox[
                    TemplateBox[{"\[ThinSpace]", "\" \"", "\"matrix\"", 
                    StyleBox[
                    TemplateBox[{"\"(\[VeryThinSpace]size: \"", 
                    StyleBox["\"n\"", Italic, StripOnInput -> False], 
                    "\"\[Times]28\[VeryThinSpace])\""}, "RowDefault"], 
                    GrayLevel[0.5], StripOnInput -> False]}, 
                    "RowWithSeparators"], 
                    Annotation[#, {"Outputs", "Output"}, "Mouse"]& ], 
                    MouseAppearanceTag["LinkHand"]]}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, AutoDelete -> 
                    False, GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                    GridBoxSpacings -> {"Columns" -> {{1.1}}}], "Grid"], 
                    EventHandlerTag[{"MouseClicked" :> If[
                    ListQ[
                    NeuralNetworks`Private`NetChain`part = MouseAnnotation[]],
                     If[NeuralNetworks`Private`NetChain`opart === 
                    NeuralNetworks`Private`NetChain`part, 
                    NeuralNetworks`Private`NetChain`selected = Null; 
                    NeuralNetworks`Private`NetChain`opart = Null, 
                    NeuralNetworks`Private`NetChain`selected = 
                    Part[NeuralNetworks`Private`NetChain`assoc3, 
                    Apply[Sequence, NeuralNetworks`Private`NetChain`part]]; 
                    NeuralNetworks`Private`NetChain`opart = 
                    NeuralNetworks`Private`NetChain`part; Null]; Null], 
                    Method -> "Preemptive", PassEventsDown -> Automatic, 
                    PassEventsUp -> True}]]}, 
                    NeuralNetworks`FormatSelectedParameterChain[
                    NeuralNetworks`Private`NetChain`selected, 
                    NeuralNetworks`Private`NetChain`part, 
                    Association[
                    "generator1/add eos/sos latent/1/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos latent/3/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/conv.1/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 28, 5}], 
                    "generator1/conv.1/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/conv.2/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 5}], 
                    "generator1/conv.2/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/conv.3/1/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{64, 64, 5}], 
                    "generator1/conv.3/1/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{64}], 
                    "generator1/classify/Net/Weights" -> 
                    NeuralNetworks`Private`DummyArray[{26, 64}], 
                    "generator1/classify/Net/Biases" -> 
                    NeuralNetworks`Private`DummyArray[{26}], 
                    "generator1/add eos/sos onehot proba/2/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}], 
                    "generator1/add eos/sos onehot proba/4/Array" -> 
                    NeuralNetworks`Private`DummyArray[{28}]], {}]}, 
                    GridBoxSpacings -> {"Columns" -> {{1}}}, 
                    GridBoxAlignment -> {"Columns" -> {{Left}}}, 
                    GridFrameMargins -> {{0, 0}, {0, 0}}], 
                   ImageSizeCache -> {
                    402., {82.672119140625, 88.327880859375}}, 
                   TrackedSymbols :> {
                    NeuralNetworks`Private`NetChain`selected}], 
                  Initialization :> {NetChain}]}}, BaselinePosition -> 
               Automatic, 
               GridBoxAlignment -> {
                "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
               GridBoxItemSize -> {
                "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
               GridBoxSpacings -> {
                "Columns" -> {{2}}, "Rows" -> {{Automatic}}}]}}, 
            BaselinePosition -> {1, 1}, 
            GridBoxAlignment -> {"Rows" -> {{Top}}}, 
            GridBoxItemSize -> {
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
            GridBoxSpacings -> {"Columns" -> {
                Offset[0.], {
                 Offset[0.5599999999999999]}, 
                Offset[0.]}, "Rows" -> {
                Offset[0.], {
                 Offset[0.4]}, 
                Offset[0.]}}]}, 
         Dynamic[Typeset`open], ImageSize -> Automatic], 
        BaseStyle -> {
         ShowStringCharacters -> False, NumberMarks -> False, PrintPrecision -> 
          3, ShowSyntaxStyles -> False}, BaselinePosition -> Baseline]], 
      StyleBox["]", "NonInterpretableSummary"]}]},
   "CopyTag",
   DisplayFunction->(#& ),
   InterpretationFunction->("NetChain[<>]"& )],
  False,
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellChangeTimes->{3.803392411643486*^9},
 CellLabel->
  "Out[3353]=",ExpressionUUID->"6391ac8a-2ddb-46e6-958a-a3c481d1df07"]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{44, Automatic}, {-4, Automatic}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (June 30, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"fda9db45-58aa-40ac-8a0d-3da202eee9c9"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[558, 20, 723, 19, 30, "Input",ExpressionUUID->"c676e526-151a-48de-8d12-6d7b56c9bd41"],
Cell[1284, 41, 432, 11, 30, "Input",ExpressionUUID->"6eb694eb-2501-476b-939b-26a738db61d3"],
Cell[1719, 54, 204, 4, 30, "Input",ExpressionUUID->"e7c09787-6237-4603-81f6-d25bd0953b2d"],
Cell[1926, 60, 2376, 58, 283, "Input",ExpressionUUID->"b4217deb-6ac4-4c64-b9ef-94c333fea94c"],
Cell[4305, 120, 153, 3, 30, "Input",ExpressionUUID->"2f49172f-e271-4aae-9efc-53e7f089fa99"],
Cell[4461, 125, 428, 10, 33, "Input",ExpressionUUID->"7b40b5d9-6400-4b65-9076-69328dc33104"],
Cell[4892, 137, 281, 6, 30, "Input",ExpressionUUID->"5c907df2-b2a1-4b59-9dca-4af3917472a1"],
Cell[5176, 145, 295, 6, 30, "Input",ExpressionUUID->"2ac3008e-77fe-4e33-a068-312aa303e592"],
Cell[5474, 153, 250, 4, 30, "Input",ExpressionUUID->"7a997a4d-6508-44a9-ab8b-1e1e8db22eae"],
Cell[CellGroupData[{
Cell[5749, 161, 225, 4, 30, "Input",ExpressionUUID->"c926d999-f0ad-415d-975b-7e0953a5d37d"],
Cell[5977, 167, 183, 3, 34, "Output",ExpressionUUID->"f63990da-146a-4628-9542-931a0172cb74"]
}, Open  ]],
Cell[6175, 173, 336, 8, 30, "Input",ExpressionUUID->"44fcf7f0-d08d-4cc8-ad45-60e780a7b76f"],
Cell[6514, 183, 330, 7, 30, "Input",ExpressionUUID->"cac2f2b1-65f1-4870-9624-cde58e79397d"],
Cell[6847, 192, 381, 9, 30, "Input",ExpressionUUID->"d37e3be6-158c-4739-bcfd-1da0b127ec4b"],
Cell[7231, 203, 201, 4, 30, "Input",ExpressionUUID->"151eda56-fcff-42e0-92dd-db6ea4b1b7f6"],
Cell[CellGroupData[{
Cell[7457, 211, 1578, 38, 136, "Input",ExpressionUUID->"0d5b54f2-807f-475c-a069-7feac529e362"],
Cell[9038, 251, 867, 15, 34, "Output",ExpressionUUID->"eccab258-6be5-436b-90d5-b9589f7cce4e"]
}, Open  ]],
Cell[9920, 269, 180, 3, 30, "Input",ExpressionUUID->"aaa4a10d-048f-4b76-b3d9-79626527c3d6"],
Cell[10103, 274, 2763, 61, 262, "Input",ExpressionUUID->"52d93131-ef83-40fe-a9ae-dc6da959e168"],
Cell[12869, 337, 716, 20, 52, "Input",ExpressionUUID->"f26aa3a4-974b-4112-b6d9-c58741204f76"],
Cell[13588, 359, 1129, 27, 94, "Input",ExpressionUUID->"b036115e-1a2b-4bf1-a082-5537c11a90dd"],
Cell[14720, 388, 417, 9, 52, "Input",ExpressionUUID->"2b9e1a93-24b1-4cf5-a9a3-a092154b563a"],
Cell[15140, 399, 1011, 26, 73, "Input",ExpressionUUID->"42f9d204-6991-4429-ad14-9833fea712ee"],
Cell[16154, 427, 3556, 87, 157, "Input",ExpressionUUID->"457fe591-59ac-446d-9065-ab5c54f77ba5"],
Cell[CellGroupData[{
Cell[19735, 518, 214, 4, 30, "Input",ExpressionUUID->"45b166c3-1b6e-459b-aa4d-969a1554f1bd"],
Cell[19952, 524, 68654, 1291, 63, "Output",ExpressionUUID->"200f3552-248c-45ee-8194-93abc811df6e"]
}, Open  ]],
Cell[CellGroupData[{
Cell[88643, 1820, 7253, 167, 325, "Input",ExpressionUUID->"8330e15a-725b-4fe2-97ef-03decda9f574"],
Cell[95899, 1989, 1197, 20, 24, "Message",ExpressionUUID->"7909e552-df59-46dd-9134-eedf98f57ce8"]
}, Open  ]],
Cell[97111, 2012, 2514, 69, 157, "Input",ExpressionUUID->"a151c110-212c-44cd-9cbf-3807e5ba373e"],
Cell[99628, 2083, 3585, 91, 241, "Input",ExpressionUUID->"6e3eca28-e064-4f9b-b8ae-6b65033aa9f2"],
Cell[103216, 2176, 252, 4, 30, "Input",ExpressionUUID->"f3f1a5bd-66c3-4eff-af70-2481f7571087"],
Cell[103471, 2182, 1026, 24, 52, "Input",ExpressionUUID->"b69c2199-cea4-45d8-849a-12b05775330a"],
Cell[104500, 2208, 175, 3, 30, "Input",ExpressionUUID->"93b71ad0-6c9e-4cbe-962b-07a549223482"],
Cell[104678, 2213, 1233, 34, 73, "Input",ExpressionUUID->"d915ceef-3127-4a49-b3c4-b1e1ab88c764"],
Cell[105914, 2249, 343, 8, 30, "Input",ExpressionUUID->"78649622-e88f-4b82-b8d1-7957f7e87588"],
Cell[CellGroupData[{
Cell[106282, 2261, 335, 8, 30, "Input",ExpressionUUID->"1d02cfe7-d4c0-4c62-af99-6fc9521a68ef"],
Cell[106620, 2271, 135424, 2342, 103, "Output",ExpressionUUID->"39159d25-611d-4cba-9c36-cd3854824a03"]
}, Open  ]],
Cell[242059, 4616, 345, 8, 30, "Input",ExpressionUUID->"a306f7ee-bd80-4425-becb-5607a0d45860"],
Cell[242407, 4626, 355, 9, 30, "Input",ExpressionUUID->"66342a45-f482-44fd-88fd-8819db32b9de"],
Cell[CellGroupData[{
Cell[242787, 4639, 2522, 60, 94, "Input",ExpressionUUID->"025aec1f-0d7c-4768-87bc-4276d5f4e33c"],
Cell[245312, 4701, 441356, 8325, 660, "Output",ExpressionUUID->"497c54ba-e9f3-4610-8222-8f5aadf98f32"]
}, Open  ]],
Cell[CellGroupData[{
Cell[686705, 13031, 189, 3, 30, "Input",ExpressionUUID->"2831a3a4-1c00-4d15-8283-35024301a80e"],
Cell[686897, 13036, 649, 16, 34, "Output",ExpressionUUID->"aeaf5804-50fe-4309-a2d0-c79f02a50dd7"]
}, Open  ]],
Cell[CellGroupData[{
Cell[687583, 13057, 897, 20, 52, "Input",ExpressionUUID->"a9463e87-b0af-4985-9112-57d69e1478c5"],
Cell[688483, 13079, 468, 11, 24, "Message",ExpressionUUID->"b0992156-bf18-49c6-a276-08c59a98c63a"],
Cell[688954, 13092, 214, 4, 34, "Output",ExpressionUUID->"f64420af-3a53-4ce6-abb3-a872b93c1465"]
}, Open  ]],
Cell[689183, 13099, 178, 3, 30, "Input",ExpressionUUID->"da13e191-bda2-42ab-bd6e-b265755a69d5"],
Cell[CellGroupData[{
Cell[689386, 13106, 212, 4, 30, "Input",ExpressionUUID->"dcda5a28-87fa-4502-aaa1-346deb729e2c"],
Cell[689601, 13112, 441277, 8323, 660, "Output",ExpressionUUID->"04b7f4d9-23fb-4711-9051-ecf9be9afe2b"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1130915, 21440, 1387, 33, 73, "Input",ExpressionUUID->"b70a4f7e-66a8-4b3e-8667-58c11815cc2e"],
Cell[1132305, 21475, 519, 12, 24, "Message",ExpressionUUID->"13996d48-c769-4ad3-9f00-5871e80eba8f"],
Cell[1132827, 21489, 262, 5, 34, "Output",ExpressionUUID->"2dd2fb46-2785-4ee6-9867-71afa78625e2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1133126, 21499, 265, 5, 30, "Input",ExpressionUUID->"47291e4e-8eb6-45dc-945f-03ca8c7c8c11"],
Cell[1133394, 21506, 4743, 103, 63, "Output",ExpressionUUID->"ef3c817a-4f39-41b5-8c65-567a2642039c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1138174, 21614, 265, 5, 30, "Input",ExpressionUUID->"abd51306-ae3b-44f7-9d57-61e8b82097ff"],
Cell[1138442, 21621, 4765, 103, 63, "Output",ExpressionUUID->"9e04d63c-82b5-4e41-8a5d-c024b7e74d6c"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1143244, 21729, 955, 26, 73, "Input",ExpressionUUID->"e3918d58-0cfa-460a-939c-16d3841dec4e"],
Cell[1144202, 21757, 4712, 104, 76, "Output",ExpressionUUID->"049e1518-2d7b-48e8-b445-d51a1d4ac901"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1148951, 21866, 204, 4, 30, "Input",ExpressionUUID->"38c0fd2d-991a-4457-bdbf-688167ee3d6d"],
Cell[1149158, 21872, 3187, 61, 161, "Output",ExpressionUUID->"6f649b99-d4cb-4c65-a684-0d2c932666f5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1152382, 21938, 144, 2, 30, "Input",ExpressionUUID->"8d3fbeea-572d-4362-a220-827646daaebe"],
Cell[1152529, 21942, 4718, 102, 63, "Output",ExpressionUUID->"97281f7a-9088-4b48-b02f-4f28549ef1fd"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1157284, 22049, 329, 8, 30, "Input",ExpressionUUID->"a546f8ee-9e37-46c8-9392-eb283e3f03a2"],
Cell[1157616, 22059, 390927, 6530, 202, "Output",ExpressionUUID->"b9d6cdfe-ad3b-4cf5-a6ed-e73093948cc5"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1548580, 28594, 286, 6, 30, "Input",ExpressionUUID->"2526d9e4-0462-46f5-bc49-80786ea10442"],
Cell[1548869, 28602, 77504, 1435, 63, "Output",ExpressionUUID->"8f2c4dc4-cb44-4d7d-9804-709d0191c054"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1626410, 30042, 287, 6, 30, "Input",ExpressionUUID->"528553ef-1f2c-4731-b397-ec1ec8bf5fa9"],
Cell[1626700, 30050, 416, 10, 24, "Message",ExpressionUUID->"7e052967-8233-4764-8b1d-7f0d103bf4c8"],
Cell[1627119, 30062, 162, 3, 34, "Output",ExpressionUUID->"f352ea96-567f-4374-ad5d-cae5ad1475f8"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1627318, 30070, 289, 6, 30, "Input",ExpressionUUID->"89972295-73d9-46c2-86e2-15cc505c9de3"],
Cell[1627610, 30078, 67312, 1259, 187, "Output",ExpressionUUID->"54182438-d222-48d1-a881-adf97f201ff2"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1694959, 31342, 339, 7, 30, "Input",ExpressionUUID->"fcda5b11-7375-4e08-be79-d5df1e836282"],
Cell[1695301, 31351, 365, 8, 34, "Output",ExpressionUUID->"9a2208ce-f6a7-4282-93e8-89256666f53f"]
}, Open  ]],
Cell[CellGroupData[{
Cell[1695703, 31364, 176, 3, 30, "Input",ExpressionUUID->"89b74da6-0531-42d9-988b-f95377e217ff"],
Cell[1695882, 31369, 78357, 1455, 208, "Output",ExpressionUUID->"6391ac8a-2ddb-46e6-958a-a3c481d1df07"]
}, Open  ]]
}
]
*)

