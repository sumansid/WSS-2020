(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     15048,        363]
NotebookOptionsPosition[     13071,        322]
NotebookOutlinePosition[     13467,        338]
CellTagsIndexPosition[     13424,        335]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Pseudo Word Generation using GANs", "Title",
 CellChangeTimes->{{3.803163156102303*^9, 3.803163164725358*^9}, {
   3.803296680729536*^9, 3.80329668596796*^9}, 
   3.803298408060699*^9},ExpressionUUID->"e99076f0-2d1d-4573-9c30-\
23f3c885aa1e"],

Cell["", "Author",
 CellChangeTimes->{{3.803163939965631*^9, 
  3.8031639413370523`*^9}},ExpressionUUID->"95bdb156-a573-4254-81f7-\
9f010b5c04c5"],

Cell[CellGroupData[{

Cell["By Suman Sigdel", "Subtitle",
 CellChangeTimes->{{3.803163168358345*^9, 
  3.8031631712939243`*^9}},ExpressionUUID->"21c520a9-7e2d-4259-9edd-\
a45c70e1cbd4"],

Cell[TextData[{
 "\n",
 StyleBox["Introduction", "Subsection"],
 "\nGenerative Adversarial Networks or GANs are most commonly known to \
produce results that are almost indistinguishable from the real dataset eg. \
Deep Fakes. GANs consist of two neural networks, Generator and Discriminator \
which compete in an adversarial zero sum game in order for the generator to \
generate plausible examples. The generator never sees the actual training \
data and only gets data from a latent space, to which it assigns meaning with \
the help of the discriminator. The discriminator is trained with samples \
generated by the generator and the samples from the training dataset and \
learns to classify between real and fake data. The two models operate in a \
zero sum game in a sense that when the discriminator successfully classifies \
real and fake samples, it is rewarded with no updates made to the model \
parameters, however the generator is penalized with large updates. Similarly, \
when the generator generates plausible examples, only the discriminator\
\[CloseCurlyQuote]s parameters are updated.\nLarge amount of research have \
been done with GANs for image translation, generation of deep fakes and data \
augmentation, but GANs application in text and NLP is an area that is less \
explored.\n\nIn this project, I will be applying GANs for text generation and \
will be comparing the results with existing Recurrent Neural Networks. This \
project aims to show that through adversarial training better text generation \
can be achieved compared to existing RNN only models. This post is divided \
into 4 sections. In the first section, I will explain the metric that will be \
used to measure the performance of the text generation models. I will then \
explain the GAN architecture that was used for text generation and will show \
it\[CloseCurlyQuote]s performance while generating texts of various domains \
eg. Chemical Names, Pokemon Names etc. I will then train existing RNN \
language model (baseline) with the same datasets and finally will make a \
comparison between the performance of GAN and existing models."
}], "Subsubtitle",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQBWIQfc78s8fX0DeOWg9ZvED0PGenRBDtF8+XDKJPymql
g+iGnY+yQLTRgrRqEF3XEFUDonNKzE6DaC5FpnMgenP1jxdcYW8cVwV0fQDR
n/4s+g6i2WT2/gPRCQxWxWZAOuJxWj2IbrNZ0gGidb4Ed4PoLYYbJ4DFDd+D
aaE4takgevmihBkgeomJ1zwQrcTzaTWIPvPq4mawvtsvt4Jo2eaqUyC67IjG
GRA9wWnCBRDtJOj7E0QHvWXjMgfSNtXuYNok7ZQEiP531VgRRKsE+aiC6FIv
RzUwP0dTC0TPE2kC05caWA66AemqCzN/gehHgu+Z3IH0F603rCAaAORgoII=

  "],ExpressionUUID->"ad586f73-f974-4b75-a566-620b61170c20"],

Cell[CellGroupData[{

Cell["1. Performance Metric for text generation models", "Section",
 CellChangeTimes->{{3.8031631774912786`*^9, 3.80316325580241*^9}, {
  3.8031633648399057`*^9, 3.803163374728538*^9}, {3.803298249601289*^9, 
  3.8032982501456537`*^9}},ExpressionUUID->"727ac34c-55af-4510-87fb-\
bb92d88ce1c0"],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.8032969335264797`*^9},ExpressionUUID->"75eb2596-c082-4ad5-b2d7-\
a079f8f1cf0f"],

Cell[CellGroupData[{

Cell["Finding the Euclidean Distance between n-grams. ", "Subsection",
 CellChangeTimes->{{3.803163244812161*^9, 3.803163246452732*^9}, {
  3.80316329341599*^9, 
  3.803163317158906*^9}},ExpressionUUID->"a1b3883e-f640-42c1-ae39-\
075e1098fb67"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["To compare the different model performances, we will \
be finding the euclidean distance between text generated from two models. The \
initial step will be to remove special characters and diacritics from the \
generated and the real dataset. The following code accomplishes this goal by \
using StringReplace function to remove the special characters from the \
dataset.",
 FontSize->16]], "Subsubsection",
 CellChangeTimes->{{3.803163347896213*^9, 3.803163398280549*^9}, {
  3.803163683940786*^9, 3.803163711786249*^9}, {3.803207415711974*^9, 
  3.803207492031876*^9}, {3.803208596936648*^9, 
  3.803208617068239*^9}},ExpressionUUID->"d884cfd1-9e47-4f6a-8d90-\
1df54b124478"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"normalizeDataset", "[", "s_", "]"}], " ", ":=", " ", 
    RowBox[{"ToLowerCase", " ", "@", " ", 
     RowBox[{"RemoveDiacritics", " ", "@", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"s", ",", "\n", "\t", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"WordBoundary", "~~", 
            RowBox[{"(", 
             RowBox[{"WordCharacter", ".."}], ")"}], "~~", "\"\<.\>\""}], 
           "\[RuleDelayed]", "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Remove", " ", "\"\<mr.\>\""}], ",", "\"\<jr.\>\"", ",", 
            "..."}], "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<\[Mars]\>\"", "|", "\"\<\[Venus]\>\""}], "\[Rule]", 
           "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "gender", " ", "hints"}], "*)"}], "\n", 
          "\t", 
          RowBox[{
           RowBox[{"\"\<\[Hyphen]\>\"", "|", "\"\<-\>\"", "|", "\"\<'\>\""}], 
           "\[Rule]", "\"\< \>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
           "*)"}], "\n", "\t", 
          RowBox[{"DigitCharacter", "\[Rule]", "\"\<\>\""}], " ", ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
           "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<(\>\"", "|", "\"\<)\>\""}], " ", "\[Rule]", " ", 
           "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "Brackets"}], "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<%\>\"", "|", "\"\<:\>\""}], " ", "\[Rule]", " ", 
           "\"\<\>\""}]}], "}"}]}], 
       RowBox[{"(*", 
        RowBox[{"Remove", " ", "Colons", " ", "and", " ", "%"}], "*)"}], 
       "]"}]}]}]}], ";"}], "\n"}]], "Code",
 CellChangeTimes->{{3.803163432407468*^9, 3.803163436114833*^9}, {
  3.803163757506627*^9, 3.8031637664158154`*^9}, {3.803163859084519*^9, 
  3.8031638609639463`*^9}},
 CellLabel->
  "In[1363]:=",ExpressionUUID->"d4e85cf3-7f29-4191-a3bf-e4d4c2711722"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", "\[IndentingNewLine]", 
  RowBox[{"The", " ", "following", " ", "code", " ", "generate"}]}]], "Input",\

 CellChangeTimes->{{3.803163872095648*^9, 3.803163879361498*^9}, 
   3.803208624956294*^9, {3.803208830285326*^9, 
   3.803208835552998*^9}},ExpressionUUID->"a25ffabd-9f55-42cb-a427-\
f06712a1e5c8"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"characters", " ", "=", " ", 
     RowBox[{"AssociationThread", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"CharacterRange", "[", 
          RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "\"\< \>\"", ",", " ", "StartOfString", ",", " ", "EndOfString"}], 
          "}"}]}], "]"}], "\n", "\t", "\[Rule]", " ", 
       RowBox[{"Range", "[", "29", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Code",
 CellChangeTimes->{{3.803163770181651*^9, 3.803163801447587*^9}, 
   3.803163870245639*^9},ExpressionUUID->"2e931e65-9fe9-42dd-b03e-\
9f745e8d4c03"],

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"computeNGrams", "[", 
      RowBox[{"texts_", ",", " ", "n_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "ngrams", "}"}], ",", "\n", "\t", 
       RowBox[{
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", " ", "n", ",", " ", "1"}], "]"}], "]"}], " ", 
            "/@", " ", "\n", "\t\t", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "StartOfString", "}"}], ",", " ", 
                RowBox[{"Characters", "[", "#", "]"}], ",", " ", 
                RowBox[{"{", "EndOfString", "}"}]}], "]"}], "]"}], " ", "/@", 
             " ", 
             RowBox[{"normalizeText", "[", "texts", "]"}]}]}], ",", "\n", 
           "\t\t", "1"}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Convert", " ", "to", " ", "indices"}], " ", "*)"}], "\n", 
        "\t", 
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Lookup", "[", 
             RowBox[{"characters", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
           "ngrams"}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", "Counts", " ", "*)"}], "\n", "\t", 
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Normal", "[", 
          RowBox[{
           RowBox[{"N", " ", "@", " ", 
            RowBox[{"Counts", "[", "ngrams", "]"}]}], " ", "/", " ", 
           RowBox[{"Length", "[", "ngrams", "]"}]}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Fill", " ", "SparseArray"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"SparseArray", "[", 
         RowBox[{"ngrams", ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Length", "[", "characters", "]"}], ",", "n"}], "]"}]}], 
         "]"}]}]}], "\n", "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Code",
 CellChangeTimes->{{3.803163803838252*^9, 
  3.8031638230150957`*^9}},ExpressionUUID->"3899c5b6-52ba-4a01-bf97-\
cebe12f8be3f"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"findEuclideanDistance", "[", 
    RowBox[{"ngram1_", ",", "ngram2_"}], "]"}], ":=", " ", 
   RowBox[{"EuclideanDistance", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", "ngram1"}], ",", 
     RowBox[{"Flatten", "@", "ngram2"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"avgDistanceofNgram", "[", 
   RowBox[{"generator", ",", " ", "dataset"}], "]"}], ":=", " ", 
  RowBox[{"Mean", "@", 
   RowBox[{"Table", "[", 
    RowBox[{
     RowBox[{"findEuclideanDistance", "[", 
      RowBox[{
       RowBox[{"computeNGrams", "[", 
        RowBox[{
         RowBox[{"generator", "@", 
          RowBox[{"latentGeneration", "[", "100", "]"}]}], ",", "n"}], "]"}], 
       ",", " ", 
       RowBox[{"computeNGrams", "[", 
        RowBox[{
         RowBox[{"RandomChoice", "[", 
          RowBox[{"dataset", ",", "100"}], "]"}], ",", "n"}], "]"}]}], "]"}], 
     ",", 
     RowBox[{"{", 
      RowBox[{"n", ",", "1", ",", "5"}], "}"}]}], 
    "]"}]}]}], "\[IndentingNewLine]"}], "Code",
 CellChangeTimes->{{3.8031638246894197`*^9, 3.8031638319123793`*^9}, {
  3.803298579734507*^9, 
  3.8032985806625223`*^9}},ExpressionUUID->"8cc6a749-4457-43ad-bbc6-\
6a18b8ebdf09"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["(Inspired by : Murgue T., de la Higuera C. (2004) \
Distances between Distributions: Comparing Language Models. In: Fred A., \
Caelli T.M., Duin R.P.W., Campilho A.C., de Ridder D. (eds) Structural, \
Syntactic, and Statistical Pattern Recognition. SSPR /SPR 2004. Lecture Notes \
in Computer Science, vol 3138. Springer, Berlin, Heidelberg)", "Text"]], \
"Subtitle",
 CellChangeTimes->{{3.803034576576008*^9, 3.803034618268505*^9}, {
  3.803044419973773*^9, 
  3.803044478568988*^9}},ExpressionUUID->"3e5b2d0f-8d7f-4528-ad55-\
2a44d82b900a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803298257926396*^9, 
  3.803298258471985*^9}},ExpressionUUID->"1cab72a7-6ae4-4a6d-88f4-\
499b224636b6"],

Cell["2. GAN architecture for text", "Section",
 CellChangeTimes->{{3.803298271797764*^9, 
  3.8032982892800198`*^9}},ExpressionUUID->"c8e0d9fd-9bcb-4c01-a7ae-\
f8a261e8cb4e"]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{316, Automatic}, {-4, Automatic}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (June 30, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"84a99f39-32e5-4f26-8167-9118d39e0e84"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 248, 4, 98, "Title",ExpressionUUID->"e99076f0-2d1d-4573-9c30-23f3c885aa1e"],
Cell[831, 28, 146, 3, 31, "Author",ExpressionUUID->"95bdb156-a573-4254-81f7-9f010b5c04c5"],
Cell[CellGroupData[{
Cell[1002, 35, 163, 3, 53, "Subtitle",ExpressionUUID->"21c520a9-7e2d-4259-9edd-a45c70e1cbd4"],
Cell[1168, 40, 2617, 39, 300, "Subsubtitle",ExpressionUUID->"ad586f73-f974-4b75-a566-620b61170c20"],
Cell[CellGroupData[{
Cell[3810, 83, 293, 4, 67, "Section",ExpressionUUID->"727ac34c-55af-4510-87fb-bb92d88ce1c0"],
Cell[4106, 89, 131, 3, 30, "Input",ExpressionUUID->"75eb2596-c082-4ad5-b2d7-a079f8f1cf0f"],
Cell[CellGroupData[{
Cell[4262, 96, 244, 4, 54, "Subsection",ExpressionUUID->"a1b3883e-f640-42c1-ae39-075e1098fb67"],
Cell[CellGroupData[{
Cell[4531, 104, 701, 11, 63, "Subsubsection",ExpressionUUID->"d884cfd1-9e47-4f6a-8d90-1df54b124478"],
Cell[5235, 117, 2161, 51, 190, "Code",ExpressionUUID->"d4e85cf3-7f29-4191-a3bf-e4d4c2711722"],
Cell[7399, 170, 349, 7, 73, "Input",ExpressionUUID->"a25ffabd-9f55-42cb-a427-f06712a1e5c8"],
Cell[7751, 179, 758, 19, 129, "Code",ExpressionUUID->"2e931e65-9fe9-42dd-b03e-9f745e8d4c03"],
Cell[8512, 200, 2347, 56, 319, "Code",ExpressionUUID->"3899c5b6-52ba-4a01-bf97-cebe12f8be3f"],
Cell[10862, 258, 1209, 33, 110, "Code",ExpressionUUID->"8cc6a749-4457-43ad-bbc6-6a18b8ebdf09"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[12144, 299, 566, 9, 65, "Subtitle",ExpressionUUID->"3e5b2d0f-8d7f-4528-ad55-2a44d82b900a"],
Cell[12713, 310, 152, 3, 30, "Input",ExpressionUUID->"1cab72a7-6ae4-4a6d-88f4-499b224636b6"],
Cell[12868, 315, 175, 3, 67, "Section",ExpressionUUID->"c8e0d9fd-9bcb-4c01-a7ae-f8a261e8cb4e"]
}, Open  ]]
}, Open  ]]
}
]
*)

