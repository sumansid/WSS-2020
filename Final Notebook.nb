(* Content-type: application/vnd.wolfram.mathematica *)

(*** Wolfram Notebook File ***)
(* http://www.wolfram.com/nb *)

(* CreatedBy='Mathematica 12.2' *)

(*CacheID: 234*)
(* Internal cache information:
NotebookFileLineBreakTest
NotebookFileLineBreakTest
NotebookDataPosition[       158,          7]
NotebookDataLength[     18861,        446]
NotebookOptionsPosition[     16513,        401]
NotebookOutlinePosition[     16909,        417]
CellTagsIndexPosition[     16866,        414]
WindowFrame->Normal*)

(* Beginning of Notebook Content *)
Notebook[{

Cell[CellGroupData[{
Cell["Pseudo Word Generation using GANs", "Title",
 CellChangeTimes->{{3.803163156102303*^9, 3.803163164725358*^9}, {
   3.803296680729536*^9, 3.80329668596796*^9}, 
   3.803298408060699*^9},ExpressionUUID->"e99076f0-2d1d-4573-9c30-\
23f3c885aa1e"],

Cell["", "Author",
 CellChangeTimes->{{3.803163939965631*^9, 
  3.8031639413370523`*^9}},ExpressionUUID->"95bdb156-a573-4254-81f7-\
9f010b5c04c5"],

Cell[CellGroupData[{

Cell["By Suman Sigdel", "Subtitle",
 CellChangeTimes->{{3.803163168358345*^9, 
  3.8031631712939243`*^9}},ExpressionUUID->"21c520a9-7e2d-4259-9edd-\
a45c70e1cbd4"],

Cell[TextData[{
 "\n",
 StyleBox["Introduction", "Subsection"],
 "\nGenerative Adversarial Networks or GANs are most commonly known to \
produce results that are almost indistinguishable from the real dataset eg. \
Deep Fakes. GANs consist of two neural networks, Generator and Discriminator \
which compete in an adversarial zero sum game in order to generate plausible \
examples. The generator never sees the actual training data and only gets \
data from a latent space, to which it assigns meaning with the help of the \
discriminator. The discriminator is trained with samples generated by the \
generator and the samples from the training dataset and learns to classify \
between real and fake data. The two models operate in a zero sum game in a \
sense that when the discriminator successfully classifies real and fake \
samples, it is rewarded with no updates made to the model parameters, however \
the generator is penalized with large updates. Similarly, when the generator \
generates plausible examples, only the discriminator\[CloseCurlyQuote]s \
parameters are updated.\nLarge amounts of research have been done with GANs \
for image translation, generation of deep fakes and data augmentation, but \
GANs application in text and NLP is an area that is less explored.\n\n",
 StyleBox["Aim", "Subsection"],
 "\nIn this project, I will be applying GANs for text generation and will be \
comparing the results with existing Recurrent Neural Networks. This project \
aims to show that through adversarial training better text generation results \
can be achieved which is comparable to existing RNN models. This post is \
divided into 4 sections. In the first section, I will explain the metric that \
will be used to measure the performance of the text generation models. I will \
then explain the GAN architecture that was used for text generation and will \
show it\[CloseCurlyQuote]s performance while generating texts of various \
domains eg. Chemical Names, Pokemon Names etc. I will then train existing RNN \
language model (baseline) with the same datasets and finally will make a \
comparison between the performance of GAN and existing models."
}], "Subsubtitle",
 CellChangeTimes->CompressedData["
1:eJxTTMoPSmViYGAQB2IQfc78s8fX0DeOWg9ZvED0PGenRBDtF8+XDKJPymql
g+iGnY+yQLTRgrRqEF3XEFUDonNKzE6DaC5FpnMgenP1jxdcYW8cVwV0fQDR
n/4s+g6i2WT2/gPRCQxWxWZAOuJxWj2IbrNZ0gGidb4Ed4PoLYYbJ4DFDd+D
aaE4takgevmihBkgeomJ1zwQrcTzaTWIPvPq4mawvtsvt4Jo2eaqUyC67IjG
GRA9wWnCBRDtJOj7E0QHvWXjMgfSNtXuYNok7ZQEiP531VgRRKsE+aiC6FIv
RzUwP0dTC0TPE2kC05caWA66AemqCzN/gehHgu+Z3IH0F603rCD6zVtOTxBt
l6MSBKIzpgS8yAXST4MMX4FoAO01r8k=
  
  "],ExpressionUUID->"ad586f73-f974-4b75-a566-620b61170c20"],

Cell[CellGroupData[{

Cell["1. Performance Metric for text generation models", "Section",
 CellChangeTimes->{{3.8031631774912786`*^9, 3.80316325580241*^9}, {
  3.8031633648399057`*^9, 3.803163374728538*^9}, {3.803298249601289*^9, 
  3.8032982501456537`*^9}},ExpressionUUID->"727ac34c-55af-4510-87fb-\
bb92d88ce1c0"],

Cell[BoxData[" "], "Input",
 CellChangeTimes->{
  3.8032969335264797`*^9},ExpressionUUID->"75eb2596-c082-4ad5-b2d7-\
a079f8f1cf0f"],

Cell["Finding the Euclidean Distance between n-grams. ", "Subsection",
 CellChangeTimes->{{3.803163244812161*^9, 3.803163246452732*^9}, {
  3.80316329341599*^9, 
  3.803163317158906*^9}},ExpressionUUID->"a1b3883e-f640-42c1-ae39-\
075e1098fb67"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["",
 FontSize->16]], "Subsection",
 CellChangeTimes->{{3.803163347896213*^9, 3.803163398280549*^9}, {
  3.803163683940786*^9, 3.803163711786249*^9}, {3.803207415711974*^9, 
  3.803207492031876*^9}, {3.803208596936648*^9, 3.803208617068239*^9}, {
  3.803400169679439*^9, 3.803400217367443*^9}, {3.8034004435849123`*^9, 
  3.803400443961328*^9}},ExpressionUUID->"d884cfd1-9e47-4f6a-8d90-\
1df54b124478"],

Cell[TextData[StyleBox["To compare the different model performances, we will \
be finding the euclidean distance between text generated from two models. The \
initial step will be to remove special characters and diacritics from the \
real dataset. The following code accomplishes this goal by using a \
combination of StringReplace, ToLowerCase and Remove Diacritics functions to \
normalize the characters in the dataset.",
 FontSize->16]], "Text",
 CellChangeTimes->{{3.803400431656764*^9, 
  3.8034004418187227`*^9}},ExpressionUUID->"6591e263-7b69-420d-9e70-\
ada8616d283e"],

Cell[BoxData[
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"normalizeDataset", "[", "s_", "]"}], " ", ":=", " ", 
    RowBox[{"ToLowerCase", " ", "@", " ", 
     RowBox[{"RemoveDiacritics", " ", "@", " ", 
      RowBox[{"StringReplace", "[", 
       RowBox[{"s", ",", "\n", "\t", 
        RowBox[{"{", 
         RowBox[{
          RowBox[{
           RowBox[{"WordBoundary", "~~", 
            RowBox[{"(", 
             RowBox[{"WordCharacter", ".."}], ")"}], "~~", "\"\<.\>\""}], 
           "\[RuleDelayed]", "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{
            RowBox[{"Remove", " ", "\"\<mr.\>\""}], ",", "\"\<jr.\>\"", ",", 
            "..."}], "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<\[Mars]\>\"", "|", "\"\<\[Venus]\>\""}], "\[Rule]", 
           "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "gender", " ", "hints"}], "*)"}], "\n", 
          "\t", 
          RowBox[{
           RowBox[{"\"\<\[Hyphen]\>\"", "|", "\"\<-\>\"", "|", "\"\<'\>\""}], 
           "\[Rule]", "\"\< \>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
           "*)"}], "\n", "\t", 
          RowBox[{"DigitCharacter", "\[Rule]", "\"\<\>\""}], " ", ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "very", " ", "rare", " ", "characters"}], 
           "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<(\>\"", "|", "\"\<)\>\""}], " ", "\[Rule]", " ", 
           "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "Brackets"}], "*)"}], "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<%\>\"", "|", "\"\<:\>\""}], " ", "\[Rule]", " ", 
           "\"\<\>\""}], ",", 
          RowBox[{"(*", 
           RowBox[{"Remove", " ", "Colons", " ", "and", " ", "%"}], "*)"}], 
          "\n", "\t", 
          RowBox[{
           RowBox[{"\"\<[\>\"", "|", "\"\<]\>\""}], "\[Rule]", "\"\<\>\""}]}],
          "}"}]}], "]"}]}]}]}], ";"}], "\n"}]], "Code",
 CellChangeTimes->{{3.803163432407468*^9, 3.803163436114833*^9}, {
  3.803163757506627*^9, 3.8031637664158154`*^9}, {3.803163859084519*^9, 
  3.8031638609639463`*^9}, {3.803400237001539*^9, 
  3.803400249663846*^9}},ExpressionUUID->"d4e85cf3-7f29-4191-a3bf-\
e4d4c2711722"],

Cell["\<\
The next step is to create a lookup table for the different characters so \
that we can put them in their respective coordinates in the sparse array. The \
following code makes an association that maps characters and special tokens \
to an unique point.\
\>", "Text",
 CellChangeTimes->{{3.803163872095648*^9, 3.803163879361498*^9}, 
   3.803208624956294*^9, {3.803208830285326*^9, 3.803208835552998*^9}, {
   3.803400258737793*^9, 3.803400259315033*^9}, {3.80340038475633*^9, 
   3.803400427017728*^9}, {3.803400494093054*^9, 3.80340057424549*^9}, {
   3.803400621747838*^9, 
   3.8034006536694183`*^9}},ExpressionUUID->"a25ffabd-9f55-42cb-a427-\
f06712a1e5c8"],

Cell[BoxData[
 RowBox[{"\[IndentingNewLine]", 
  RowBox[{
   RowBox[{
    RowBox[{"characters", " ", "=", " ", 
     RowBox[{"AssociationThread", "[", "\n", "\t", 
      RowBox[{
       RowBox[{"Join", "[", 
        RowBox[{
         RowBox[{"CharacterRange", "[", 
          RowBox[{"\"\<a\>\"", ",", "\"\<z\>\""}], "]"}], ",", " ", 
         RowBox[{"{", 
          RowBox[{
          "\"\< \>\"", ",", " ", "StartOfString", ",", " ", "EndOfString"}], 
          "}"}]}], "]"}], "\n", "\t", "\[Rule]", " ", 
       RowBox[{"Range", "[", "29", "]"}]}], "]"}]}], ";"}], 
   "\[IndentingNewLine]"}]}]], "Code",
 CellChangeTimes->{{3.803163770181651*^9, 3.803163801447587*^9}, 
   3.803163870245639*^9},ExpressionUUID->"2e931e65-9fe9-42dd-b03e-\
9f745e8d4c03"],

Cell["\<\
A function to compute n-grams is created which compute \
\[OpenCurlyDoubleQuote]n\[CloseCurlyDoubleQuote] n-gram for a given wordlist \
and puts frequencies of each n-gram in a SparseArray. A sparse-array is \
chosen for faster computation for higher \[OpenCurlyDoubleQuote]n\
\[CloseCurlyDoubleQuote] of the n-grams.\
\>", "Text",
 CellChangeTimes->{{3.8034006589179497`*^9, 3.8034006773812647`*^9}, {
  3.803400727072348*^9, 3.803400830633148*^9}, {3.8034012621741867`*^9, 
  3.803401275209092*^9}},ExpressionUUID->"8403b5a5-5913-4a29-a171-\
70b2e1ee8953"],

Cell[BoxData[
 RowBox[{"\n", 
  RowBox[{
   RowBox[{
    RowBox[{
     RowBox[{"computeNGrams", "[", 
      RowBox[{"texts_", ",", " ", "n_"}], "]"}], " ", ":=", " ", 
     RowBox[{"Block", "[", 
      RowBox[{
       RowBox[{"{", "ngrams", "}"}], ",", "\n", "\t", 
       RowBox[{
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Flatten", "[", "\n", "\t\t", 
          RowBox[{
           RowBox[{
            RowBox[{"Function", "[", 
             RowBox[{"Partition", "[", 
              RowBox[{"#", ",", " ", "n", ",", " ", "1"}], "]"}], "]"}], " ", 
            "/@", " ", "\n", "\t\t", 
            RowBox[{
             RowBox[{"Function", "[", 
              RowBox[{"Join", "[", 
               RowBox[{
                RowBox[{"{", "StartOfString", "}"}], ",", " ", 
                RowBox[{"Characters", "[", "#", "]"}], ",", " ", 
                RowBox[{"{", "EndOfString", "}"}]}], "]"}], "]"}], " ", "/@", 
             " ", 
             RowBox[{"normalizeText", "[", "texts", "]"}]}]}], ",", "\n", 
           "\t\t", "1"}], "\n", "\t", "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Convert", " ", "to", " ", "indices"}], " ", "*)"}], "\n", 
        "\t", 
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Map", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"Lookup", "[", 
             RowBox[{"characters", ",", " ", "#"}], "]"}], "&"}], ",", " ", 
           "ngrams"}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", "Counts", " ", "*)"}], "\n", "\t", 
        RowBox[{"ngrams", " ", "=", " ", 
         RowBox[{"Normal", "[", 
          RowBox[{
           RowBox[{"N", " ", "@", " ", 
            RowBox[{"Counts", "[", "ngrams", "]"}]}], " ", "/", " ", 
           RowBox[{"Length", "[", "ngrams", "]"}]}], "]"}]}], ";", "\n", "\t", 
        RowBox[{"(*", " ", 
         RowBox[{"Fill", " ", "SparseArray"}], " ", "*)"}], "\n", "\t", 
        RowBox[{"SparseArray", "[", 
         RowBox[{"ngrams", ",", " ", 
          RowBox[{"Table", "[", 
           RowBox[{
            RowBox[{"Length", "[", "characters", "]"}], ",", "n"}], "]"}]}], 
         "]"}]}]}], "\n", "]"}]}], ";"}], "\[IndentingNewLine]"}]}]], "Code",
 CellChangeTimes->{{3.803163803838252*^9, 
  3.8031638230150957`*^9}},ExpressionUUID->"3899c5b6-52ba-4a01-bf97-\
cebe12f8be3f"],

Cell["\<\
We then compute the euclidean distance between the two distributions of \
n-grams in the dataset and generated text. The findEuclideanDistance computes \
the euclidean distance between two n gram distributions. The \
DistancesofNgrams function takes the generator and the training dataset to \
find the euclidean distance between n-gram distributions where n goes from 1 \
to 5.\
\>", "Text",
 CellChangeTimes->{{3.803400844637042*^9, 3.803400850574594*^9}, {
  3.803401041431099*^9, 3.803401092244543*^9}, {3.803401141047371*^9, 
  3.803401252007017*^9}},ExpressionUUID->"aa4c0b93-ac84-4b7a-b9aa-\
f1754387fded"],

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"findEuclideanDistance", "[", 
    RowBox[{"ngram1_", ",", "ngram2_"}], "]"}], ":=", " ", 
   RowBox[{"EuclideanDistance", "[", 
    RowBox[{
     RowBox[{"Flatten", "@", "ngram1"}], ",", 
     RowBox[{"Flatten", "@", "ngram2"}]}], "]"}]}], "\n"}], "\n", 
 RowBox[{
  RowBox[{"DistancesofNgrams", "[", 
   RowBox[{"generator", ",", " ", "dataset_"}], "]"}], ":=", " ", 
  RowBox[{"Table", "[", 
   RowBox[{
    RowBox[{"findEuclideanDistance", "[", 
     RowBox[{
      RowBox[{"computeNGrams", "[", 
       RowBox[{
        RowBox[{"generator", "@", 
         RowBox[{"latentGeneration", "[", "100", "]"}]}], ",", "n"}], "]"}], 
      ",", " ", 
      RowBox[{"computeNGrams", "[", 
       RowBox[{
        RowBox[{"RandomChoice", "[", 
         RowBox[{"dataset", ",", "100"}], "]"}], ",", "n"}], "]"}]}], "]"}], 
    ",", 
    RowBox[{"{", 
     RowBox[{"n", ",", "1", ",", "5"}], "}"}]}], 
   "]"}]}], "\[IndentingNewLine]"}], "Code",
 CellChangeTimes->{{3.8031638246894197`*^9, 3.8031638319123793`*^9}, {
  3.803298579734507*^9, 3.8032985806625223`*^9}, {3.803401023706318*^9, 
  3.8034010355553293`*^9}},ExpressionUUID->"8cc6a749-4457-43ad-bbc6-\
6a18b8ebdf09"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["( Murgue T., de la Higuera C. (2004) Distances \
between Distributions: Comparing Language Models. In: Fred A., Caelli T.M., \
Duin R.P.W., Campilho A.C., de Ridder D. (eds) Structural, Syntactic, and \
Statistical Pattern Recognition. SSPR /SPR 2004. Lecture Notes in Computer \
Science, vol 3138. Springer, Berlin, Heidelberg)", "Text"]], "Subtitle",
 CellChangeTimes->{{3.803034576576008*^9, 3.803034618268505*^9}, {
  3.803044419973773*^9, 3.803044478568988*^9}, {3.803400840028737*^9, 
  3.803400841798848*^9}},ExpressionUUID->"3e5b2d0f-8d7f-4528-ad55-\
2a44d82b900a"],

Cell[BoxData[""], "Input",
 CellChangeTimes->{{3.803298257926396*^9, 
  3.803298258471985*^9}},ExpressionUUID->"1cab72a7-6ae4-4a6d-88f4-\
499b224636b6"],

Cell[CellGroupData[{

Cell["2. GAN architecture for text", "Section",
 CellChangeTimes->{{3.803298271797764*^9, 
  3.8032982892800198`*^9}},ExpressionUUID->"c8e0d9fd-9bcb-4c01-a7ae-\
f8a261e8cb4e"],

Cell["\<\
Generative Adversarial Networks or GANs are a deep learning architecture for \
training generative models in which two models (Generator and Discriminator) \
train in an adversarial zero sum game. After training
the generator is able to produce plausible example that are almost \
indistinguishable from the training set data. Recent improvements in GANs \
have significantly improved data augmentation in machine learning tasks that \
deal with images and in this section of the post some changes to a GAN \
architecture will be made in order for text generation.










Some Extra codes

toInt[n_] := ToExpression[#] & /@ StringSplit[StringTrim[n, \"{\" | \"}\"], \
\",\"];

b = distancesLog[[1, 2]];
toInt[b];
distancesLogUpdated = toInt[#] & /@ distancesLog[[All, 2]];
distancesLogUpdated = MapIndexed[Flatten@Join[{#2 * 10}, {#1}] &, \
distancesLogUpdated]\
\>", "Text",
 CellChangeTimes->{{3.803399865260084*^9, 3.803399893695805*^9}, {
  3.803401562391534*^9, 3.803401594832176*^9}, {3.803402300729458*^9, 
  3.8034023962922173`*^9}, {3.803402446795101*^9, 3.803402471395349*^9}, {
  3.803402658456777*^9, 3.803402716840114*^9}, {3.803402845187859*^9, 
  3.803402948712865*^9}, {3.8034029812517157`*^9, 3.803403088659532*^9}, {
  3.803403447354724*^9, 
  3.803403448124292*^9}},ExpressionUUID->"09b20c6f-e6d7-4feb-8a7f-\
7ab05ead7566"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{Full, Full},
WindowMargins->{{316, Automatic}, {-4, Automatic}},
FrontEndVersion->"12.2 for Mac OS X x86 (64-bit) (June 30, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"84a99f39-32e5-4f26-8167-9118d39e0e84"
]
(* End of Notebook Content *)

(* Internal cache information *)
(*CellTagsOutline
CellTagsIndex->{}
*)
(*CellTagsIndex
CellTagsIndex->{}
*)
(*NotebookFileOutline
Notebook[{
Cell[CellGroupData[{
Cell[580, 22, 248, 4, 98, "Title",ExpressionUUID->"e99076f0-2d1d-4573-9c30-23f3c885aa1e"],
Cell[831, 28, 146, 3, 31, "Author",ExpressionUUID->"95bdb156-a573-4254-81f7-9f010b5c04c5"],
Cell[CellGroupData[{
Cell[1002, 35, 163, 3, 53, "Subtitle",ExpressionUUID->"21c520a9-7e2d-4259-9edd-a45c70e1cbd4"],
Cell[1168, 40, 2686, 41, 327, "Subsubtitle",ExpressionUUID->"ad586f73-f974-4b75-a566-620b61170c20"],
Cell[CellGroupData[{
Cell[3879, 85, 293, 4, 67, "Section",ExpressionUUID->"727ac34c-55af-4510-87fb-bb92d88ce1c0"],
Cell[4175, 91, 131, 3, 30, "Input",ExpressionUUID->"75eb2596-c082-4ad5-b2d7-a079f8f1cf0f"],
Cell[4309, 96, 244, 4, 54, "Subsection",ExpressionUUID->"a1b3883e-f640-42c1-ae39-075e1098fb67"],
Cell[CellGroupData[{
Cell[4578, 104, 424, 7, 33, "Subsection",ExpressionUUID->"d884cfd1-9e47-4f6a-8d90-1df54b124478"],
Cell[5005, 113, 578, 9, 84, "Text",ExpressionUUID->"6591e263-7b69-420d-9e70-ada8616d283e"],
Cell[5586, 124, 2316, 54, 210, "Code",ExpressionUUID->"d4e85cf3-7f29-4191-a3bf-e4d4c2711722"],
Cell[7905, 180, 672, 12, 58, "Text",ExpressionUUID->"a25ffabd-9f55-42cb-a427-f06712a1e5c8"],
Cell[8580, 194, 758, 19, 129, "Code",ExpressionUUID->"2e931e65-9fe9-42dd-b03e-9f745e8d4c03"],
Cell[9341, 215, 568, 10, 58, "Text",ExpressionUUID->"8403b5a5-5913-4a29-a171-70b2e1ee8953"],
Cell[9912, 227, 2347, 56, 319, "Code",ExpressionUUID->"3899c5b6-52ba-4a01-bf97-cebe12f8be3f"],
Cell[12262, 285, 623, 11, 58, "Text",ExpressionUUID->"aa4c0b93-ac84-4b7a-b9aa-f1754387fded"],
Cell[12888, 298, 1214, 32, 110, "Code",ExpressionUUID->"8cc6a749-4457-43ad-bbc6-6a18b8ebdf09"]
}, Open  ]]
}, Open  ]]
}, Open  ]],
Cell[CellGroupData[{
Cell[14163, 337, 597, 8, 65, "Subtitle",ExpressionUUID->"3e5b2d0f-8d7f-4528-ad55-2a44d82b900a"],
Cell[14763, 347, 152, 3, 30, "Input",ExpressionUUID->"1cab72a7-6ae4-4a6d-88f4-499b224636b6"],
Cell[CellGroupData[{
Cell[14940, 354, 175, 3, 67, "Section",ExpressionUUID->"c8e0d9fd-9bcb-4c01-a7ae-f8a261e8cb4e"],
Cell[15118, 359, 1355, 37, 495, "Text",ExpressionUUID->"09b20c6f-e6d7-4feb-8a7f-7ab05ead7566"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
}
]
*)

